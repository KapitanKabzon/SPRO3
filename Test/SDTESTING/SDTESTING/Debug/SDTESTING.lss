
SDTESTING.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  000015b4  00001648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  00800152  00800152  0000169a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000169a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00001738  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018b8  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073f  00000000  00000000  000030f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b6  00000000  00000000  0000382f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000380  00000000  00000000  00003ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a0  00000000  00000000  00004268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a3e  00000000  00000000  00004708  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00006146  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 eb       	ldi	r30, 0xB4	; 180
      7c:	f5 e1       	ldi	r31, 0x15	; 21
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 35       	cpi	r26, 0x52	; 82
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a2 e5       	ldi	r26, 0x52	; 82
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 38       	cpi	r26, 0x85	; 133
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 a3 00 	call	0x146	; 0x146 <main>
      9e:	0c 94 d8 0a 	jmp	0x15b0	; 0x15b0 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_spi>:
; void init_spi (void);

.global init_spi
.func init_spi
init_spi:
	sbi	DDR_CS		; CS: output
      a6:	22 9a       	sbi	0x04, 2	; 4
	sbi	DDR_DI		; DI: output
      a8:	23 9a       	sbi	0x04, 3	; 4
	sbi	DDR_CK		; SCLK: output
      aa:	25 9a       	sbi	0x04, 5	; 4
	sbi	PORT_DO		; DO: pull-up
      ac:	2c 9a       	sbi	0x05, 4	; 5
	ret
      ae:	08 95       	ret

000000b0 <select>:
; void select (void);

.global select
.func select
select:
	rcall	deselect
      b0:	02 d0       	rcall	.+4      	; 0xb6 <deselect>
	cbi	PORT_CS
      b2:	2a 98       	cbi	0x05, 2	; 5
	rjmp	rcv_spi
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <rcv_spi>

000000b6 <deselect>:
; void deselect (void);

.global deselect
.func deselect
deselect:
	sbi	PORT_CS
      b6:	2a 9a       	sbi	0x05, 2	; 5

000000b8 <rcv_spi>:
; BYTE rcv_spi (void);

.global rcv_spi
.func rcv_spi
rcv_spi:
	ldi	r24, 0xFF	; Send 0xFF to receive data
      b8:	8f ef       	ldi	r24, 0xFF	; 255

000000ba <xmit_spi>:
; void xmit_spi (BYTE);

.global xmit_spi
.func xmit_spi
xmit_spi:
	ldi	r25, 8
      ba:	98 e0       	ldi	r25, 0x08	; 8
1:	sbrc	r24, 7		; DI = Bit to sent
      bc:	87 fd       	sbrc	r24, 7
	sbi	PORT_DI		; 
      be:	2b 9a       	sbi	0x05, 3	; 5
	sbrs	r24, 7		; 
      c0:	87 ff       	sbrs	r24, 7
	cbi	PORT_DI		; /
      c2:	2b 98       	cbi	0x05, 3	; 5
	lsl	r24		; Get DO from MMC
      c4:	88 0f       	add	r24, r24
	sbic	PIN_DO		; 
      c6:	1c 99       	sbic	0x03, 4	; 3
	inc	r24		; /
      c8:	83 95       	inc	r24
	sbi	PORT_CK		; A positive pulse to SCLK
      ca:	2d 9a       	sbi	0x05, 5	; 5
	cbi	PORT_CK		; /
      cc:	2d 98       	cbi	0x05, 5	; 5
	dec	r25		; Repeat 8 times
      ce:	9a 95       	dec	r25
	brne	1b		; /
      d0:	a9 f7       	brne	.-22     	; 0xbc <xmit_spi+0x2>
	ret
      d2:	08 95       	ret

000000d4 <flash_erase>:

.global flash_erase
.func flash_erase
flash_erase:

	movw	ZL, r22
      d4:	fb 01       	movw	r30, r22
#if FLASHEND >= 0x10000
	out	_SFR_IO_ADDR(RAMPZ), r24
#endif

	; Initiate erase operation
	ldi	r24, 0b00000011
      d6:	83 e0       	ldi	r24, 0x03	; 3
	sts	_SFR_MEM_ADDR(SPMCSR), r24
      d8:	80 93 57 00 	sts	0x0057, r24
	spm
      dc:	e8 95       	spm

	; Wait for end of erase operation
1:	lds	r24, _SFR_MEM_ADDR(SPMCSR)
      de:	80 91 57 00 	lds	r24, 0x0057
	sbrc	r24, 0
      e2:	80 fd       	sbrc	r24, 0
	rjmp	1b
      e4:	fc cf       	rjmp	.-8      	; 0xde <flash_erase+0xa>

	; Re-enable read access to the flash
	ldi	r24, 0b00010001
      e6:	81 e1       	ldi	r24, 0x11	; 17
	sts	_SFR_MEM_ADDR(SPMCSR), r24
      e8:	80 93 57 00 	sts	0x0057, r24
	spm
      ec:	e8 95       	spm

9:	ret
      ee:	08 95       	ret

000000f0 <flash_write>:
; void flash_write (DWORD flash_addr, const BYTE* data);

.global flash_write
.func flash_write
flash_write:
	push	r0
      f0:	0f 92       	push	r0
	push	r1
      f2:	1f 92       	push	r1
#if FLASHEND >= 0x10000
	out	_SFR_IO_ADDR(RAMPZ), r24
#endif

	; Fill page buffer
	movw	ZL, r22
      f4:	fb 01       	movw	r30, r22
	movw	XL, r20
      f6:	da 01       	movw	r26, r20
	ldi	r25, lo8(SPM_PAGESIZE/2)
      f8:	90 e4       	ldi	r25, 0x40	; 64
1:	ld	r0, X+
      fa:	0d 90       	ld	r0, X+
	ld	r1, X+
      fc:	1d 90       	ld	r1, X+
	ldi	r24, 0b00000001
      fe:	81 e0       	ldi	r24, 0x01	; 1
	sts	_SFR_MEM_ADDR(SPMCSR), r24
     100:	80 93 57 00 	sts	0x0057, r24
	spm
     104:	e8 95       	spm
	adiw	ZL, 2
     106:	32 96       	adiw	r30, 0x02	; 2
	dec	r25
     108:	9a 95       	dec	r25
	brne	1b
     10a:	b9 f7       	brne	.-18     	; 0xfa <flash_write+0xa>

	; Initiate write operation
	movw	ZL, r22
     10c:	fb 01       	movw	r30, r22
	ldi	r24, 0b00000101
     10e:	85 e0       	ldi	r24, 0x05	; 5
	sts	_SFR_MEM_ADDR(SPMCSR), r24
     110:	80 93 57 00 	sts	0x0057, r24
	spm
     114:	e8 95       	spm

	; Wait for end of write operation
2:	lds	r24, _SFR_MEM_ADDR(SPMCSR)
     116:	80 91 57 00 	lds	r24, 0x0057
	sbrc	r24, 0
     11a:	80 fd       	sbrc	r24, 0
	rjmp	2b
     11c:	fc cf       	rjmp	.-8      	; 0x116 <flash_write+0x26>

	; Re-enable read access to the flash
	ldi	r24, 0b00010001
     11e:	81 e1       	ldi	r24, 0x11	; 17
	sts	_SFR_MEM_ADDR(SPMCSR), r24
     120:	80 93 57 00 	sts	0x0057, r24
	spm
     124:	e8 95       	spm

9:	pop	r1
     126:	1f 90       	pop	r1
	pop	r0
     128:	0f 90       	pop	r0
	ret
     12a:	08 95       	ret

0000012c <errorHalt>:
	}
}

void errorHalt(char *msg)
{
	printf("Error: %s\n", msg);
     12c:	9f 93       	push	r25
     12e:	8f 93       	push	r24
     130:	8c e1       	ldi	r24, 0x1C	; 28
     132:	91 e0       	ldi	r25, 0x01	; 1
     134:	9f 93       	push	r25
     136:	8f 93       	push	r24
     138:	0e 94 0d 08 	call	0x101a	; 0x101a <printf>
     13c:	0f 90       	pop	r0
     13e:	0f 90       	pop	r0
     140:	0f 90       	pop	r0
     142:	0f 90       	pop	r0
     144:	08 95       	ret

00000146 <main>:

FATFS fs;
const char MyFilenameStr[] = {"README.TXT"};

int main(void)
{
     146:	ef 92       	push	r14
     148:	ff 92       	push	r15
     14a:	0f 93       	push	r16
     14c:	1f 93       	push	r17
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	cd b7       	in	r28, 0x3d	; 61
     154:	de b7       	in	r29, 0x3e	; 62
     156:	a2 97       	sbiw	r28, 0x22	; 34
     158:	0f b6       	in	r0, 0x3f	; 63
     15a:	f8 94       	cli
     15c:	de bf       	out	0x3e, r29	; 62
     15e:	0f be       	out	0x3f, r0	; 63
     160:	cd bf       	out	0x3d, r28	; 61
	uint8_t buf[32];
	
	uart_init();
     162:	0e 94 b5 07 	call	0xf6a	; 0xf6a <uart_init>
	io_redirect();
     166:	0e 94 c6 07 	call	0xf8c	; 0xf8c <io_redirect>
	
	if (pf_mount(&fs))
     16a:	85 e5       	ldi	r24, 0x55	; 85
     16c:	91 e0       	ldi	r25, 0x01	; 1
     16e:	0e 94 ce 03 	call	0x79c	; 0x79c <pf_mount>
     172:	88 23       	and	r24, r24
     174:	21 f0       	breq	.+8      	; 0x17e <main+0x38>
	errorHalt("pf_mount");
     176:	87 e2       	ldi	r24, 0x27	; 39
     178:	91 e0       	ldi	r25, 0x01	; 1
     17a:	0e 94 96 00 	call	0x12c	; 0x12c <errorHalt>
	
	if (pf_open(MyFilenameStr))
     17e:	87 e4       	ldi	r24, 0x47	; 71
     180:	91 e0       	ldi	r25, 0x01	; 1
     182:	0e 94 fe 04 	call	0x9fc	; 0x9fc <pf_open>
     186:	88 23       	and	r24, r24
     188:	21 f0       	breq	.+8      	; 0x192 <main+0x4c>
	errorHalt("pf_open");
     18a:	80 e3       	ldi	r24, 0x30	; 48
     18c:	91 e0       	ldi	r25, 0x01	; 1
     18e:	0e 94 96 00 	call	0x12c	; 0x12c <errorHalt>
	
	while(1) {
		UINT nr;
		if(pf_read(buf, sizeof(buf), &nr))
     192:	8e 01       	movw	r16, r28
     194:	0f 5f       	subi	r16, 0xFF	; 255
     196:	1f 4f       	sbci	r17, 0xFF	; 255
		errorHalt("pf_read");
		if (nr == 0)
		break;
		
		printf("%d, %d", buf, nr);
     198:	0f 2e       	mov	r0, r31
     19a:	f0 e4       	ldi	r31, 0x40	; 64
     19c:	ef 2e       	mov	r14, r31
     19e:	f1 e0       	ldi	r31, 0x01	; 1
     1a0:	ff 2e       	mov	r15, r31
     1a2:	f0 2d       	mov	r31, r0
	if (pf_open(MyFilenameStr))
	errorHalt("pf_open");
	
	while(1) {
		UINT nr;
		if(pf_read(buf, sizeof(buf), &nr))
     1a4:	ae 01       	movw	r20, r28
     1a6:	4f 5d       	subi	r20, 0xDF	; 223
     1a8:	5f 4f       	sbci	r21, 0xFF	; 255
     1aa:	60 e2       	ldi	r22, 0x20	; 32
     1ac:	70 e0       	ldi	r23, 0x00	; 0
     1ae:	c8 01       	movw	r24, r16
     1b0:	0e 94 aa 06 	call	0xd54	; 0xd54 <pf_read>
     1b4:	88 23       	and	r24, r24
     1b6:	21 f0       	breq	.+8      	; 0x1c0 <main+0x7a>
		errorHalt("pf_read");
     1b8:	88 e3       	ldi	r24, 0x38	; 56
     1ba:	91 e0       	ldi	r25, 0x01	; 1
     1bc:	0e 94 96 00 	call	0x12c	; 0x12c <errorHalt>
		if (nr == 0)
     1c0:	29 a1       	ldd	r18, Y+33	; 0x21
     1c2:	3a a1       	ldd	r19, Y+34	; 0x22
     1c4:	21 15       	cp	r18, r1
     1c6:	31 05       	cpc	r19, r1
     1c8:	79 f0       	breq	.+30     	; 0x1e8 <main+0xa2>
		break;
		
		printf("%d, %d", buf, nr);
     1ca:	3f 93       	push	r19
     1cc:	2f 93       	push	r18
     1ce:	1f 93       	push	r17
     1d0:	0f 93       	push	r16
     1d2:	ff 92       	push	r15
     1d4:	ef 92       	push	r14
     1d6:	0e 94 0d 08 	call	0x101a	; 0x101a <printf>
	}
     1da:	0f 90       	pop	r0
     1dc:	0f 90       	pop	r0
     1de:	0f 90       	pop	r0
     1e0:	0f 90       	pop	r0
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	de cf       	rjmp	.-68     	; 0x1a4 <main+0x5e>
}
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	a2 96       	adiw	r28, 0x22	; 34
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	f8 94       	cli
     1f2:	de bf       	out	0x3e, r29	; 62
     1f4:	0f be       	out	0x3f, r0	; 63
     1f6:	cd bf       	out	0x3d, r28	; 61
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	1f 91       	pop	r17
     1fe:	0f 91       	pop	r16
     200:	ff 90       	pop	r15
     202:	ef 90       	pop	r14
     204:	08 95       	ret

00000206 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* 1st byte (Start + Index) */
	DWORD arg		/* Argument (32 bits) */
)
{
     206:	ff 92       	push	r15
     208:	0f 93       	push	r16
     20a:	1f 93       	push	r17
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	c8 2f       	mov	r28, r24
     212:	d4 2f       	mov	r29, r20
     214:	15 2f       	mov	r17, r21
     216:	06 2f       	mov	r16, r22
     218:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     21a:	88 23       	and	r24, r24
     21c:	4c f4       	brge	.+18     	; 0x230 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     21e:	40 e0       	ldi	r20, 0x00	; 0
     220:	50 e0       	ldi	r21, 0x00	; 0
     222:	ba 01       	movw	r22, r20
     224:	87 e7       	ldi	r24, 0x77	; 119
     226:	0e 94 03 01 	call	0x206	; 0x206 <send_cmd>
		if (res > 1) return res;
     22a:	82 30       	cpi	r24, 0x02	; 2
     22c:	20 f5       	brcc	.+72     	; 0x276 <send_cmd+0x70>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     22e:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card */
	select();
     230:	0e 94 58 00 	call	0xb0	; 0xb0 <select>

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
     234:	8c 2f       	mov	r24, r28
     236:	0e 94 5d 00 	call	0xba	; 0xba <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     23a:	8f 2d       	mov	r24, r15
     23c:	0e 94 5d 00 	call	0xba	; 0xba <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     240:	80 2f       	mov	r24, r16
     242:	0e 94 5d 00 	call	0xba	; 0xba <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     246:	81 2f       	mov	r24, r17
     248:	0e 94 5d 00 	call	0xba	; 0xba <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
     24c:	8d 2f       	mov	r24, r29
     24e:	0e 94 5d 00 	call	0xba	; 0xba <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     252:	c0 34       	cpi	r28, 0x40	; 64
     254:	21 f0       	breq	.+8      	; 0x25e <send_cmd+0x58>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     256:	c8 34       	cpi	r28, 0x48	; 72
     258:	21 f4       	brne	.+8      	; 0x262 <send_cmd+0x5c>
     25a:	87 e8       	ldi	r24, 0x87	; 135
     25c:	03 c0       	rjmp	.+6      	; 0x264 <send_cmd+0x5e>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     25e:	85 e9       	ldi	r24, 0x95	; 149
     260:	01 c0       	rjmp	.+2      	; 0x264 <send_cmd+0x5e>
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
     262:	81 e0       	ldi	r24, 0x01	; 1
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
	xmit_spi(n);
     264:	0e 94 5d 00 	call	0xba	; 0xba <xmit_spi>
     268:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
     26a:	0e 94 5c 00 	call	0xb8	; 0xb8 <rcv_spi>
	} while ((res & 0x80) && --n);
     26e:	88 23       	and	r24, r24
     270:	14 f4       	brge	.+4      	; 0x276 <send_cmd+0x70>
     272:	c1 50       	subi	r28, 0x01	; 1
     274:	d1 f7       	brne	.-12     	; 0x26a <send_cmd+0x64>

	return res;			/* Return with the response value */
}
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	1f 91       	pop	r17
     27c:	0f 91       	pop	r16
     27e:	ff 90       	pop	r15
     280:	08 95       	ret

00000282 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
     282:	cf 92       	push	r12
     284:	df 92       	push	r13
     286:	ef 92       	push	r14
     288:	ff 92       	push	r15
     28a:	0f 93       	push	r16
     28c:	1f 93       	push	r17
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	00 d0       	rcall	.+0      	; 0x294 <disk_initialize+0x12>
     294:	00 d0       	rcall	.+0      	; 0x296 <disk_initialize+0x14>
     296:	cd b7       	in	r28, 0x3d	; 61
     298:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];
	UINT tmr;


	init_spi();							/* Initialize ports to control MMC */
     29a:	0e 94 53 00 	call	0xa6	; 0xa6 <init_spi>
     29e:	84 e6       	ldi	r24, 0x64	; 100
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a0:	ef e8       	ldi	r30, 0x8F	; 143
     2a2:	f1 e0       	ldi	r31, 0x01	; 1
     2a4:	31 97       	sbiw	r30, 0x01	; 1
     2a6:	f1 f7       	brne	.-4      	; 0x2a4 <disk_initialize+0x22>
     2a8:	00 c0       	rjmp	.+0      	; 0x2aa <disk_initialize+0x28>
     2aa:	00 00       	nop
     2ac:	81 50       	subi	r24, 0x01	; 1
	for (n = 100; n; n--) _delay_us(100);	/* 10ms delay */
     2ae:	c1 f7       	brne	.-16     	; 0x2a0 <disk_initialize+0x1e>
     2b0:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) deselect();	/* 80 Dummy clocks with CS=H */
     2b2:	0e 94 5b 00 	call	0xb6	; 0xb6 <deselect>
     2b6:	11 50       	subi	r17, 0x01	; 1
     2b8:	e1 f7       	brne	.-8      	; 0x2b2 <disk_initialize+0x30>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     2ba:	40 e0       	ldi	r20, 0x00	; 0
     2bc:	50 e0       	ldi	r21, 0x00	; 0
     2be:	ba 01       	movw	r22, r20
     2c0:	80 e4       	ldi	r24, 0x40	; 64
     2c2:	0e 94 03 01 	call	0x206	; 0x206 <send_cmd>
     2c6:	81 30       	cpi	r24, 0x01	; 1
     2c8:	09 f0       	breq	.+2      	; 0x2cc <disk_initialize+0x4a>
     2ca:	89 c0       	rjmp	.+274    	; 0x3de <disk_initialize+0x15c>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
     2cc:	4a ea       	ldi	r20, 0xAA	; 170
     2ce:	51 e0       	ldi	r21, 0x01	; 1
     2d0:	60 e0       	ldi	r22, 0x00	; 0
     2d2:	70 e0       	ldi	r23, 0x00	; 0
     2d4:	88 e4       	ldi	r24, 0x48	; 72
     2d6:	0e 94 03 01 	call	0x206	; 0x206 <send_cmd>
     2da:	81 30       	cpi	r24, 0x01	; 1
     2dc:	09 f0       	breq	.+2      	; 0x2e0 <disk_initialize+0x5e>
     2de:	48 c0       	rjmp	.+144    	; 0x370 <disk_initialize+0xee>
     2e0:	ce 01       	movw	r24, r28
     2e2:	01 96       	adiw	r24, 0x01	; 1
     2e4:	7c 01       	movw	r14, r24
     2e6:	6e 01       	movw	r12, r28
     2e8:	95 e0       	ldi	r25, 0x05	; 5
     2ea:	c9 0e       	add	r12, r25
     2ec:	d1 1c       	adc	r13, r1
     2ee:	87 01       	movw	r16, r14
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
     2f0:	0e 94 5c 00 	call	0xb8	; 0xb8 <rcv_spi>
     2f4:	f8 01       	movw	r30, r16
     2f6:	81 93       	st	Z+, r24
     2f8:	8f 01       	movw	r16, r30
     2fa:	ec 15       	cp	r30, r12
     2fc:	fd 05       	cpc	r31, r13
     2fe:	c1 f7       	brne	.-16     	; 0x2f0 <disk_initialize+0x6e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
     300:	8b 81       	ldd	r24, Y+3	; 0x03
     302:	81 30       	cpi	r24, 0x01	; 1
     304:	09 f0       	breq	.+2      	; 0x308 <disk_initialize+0x86>
     306:	6d c0       	rjmp	.+218    	; 0x3e2 <disk_initialize+0x160>
     308:	8c 81       	ldd	r24, Y+4	; 0x04
     30a:	8a 3a       	cpi	r24, 0xAA	; 170
     30c:	61 f0       	breq	.+24     	; 0x326 <disk_initialize+0xa4>

	init_spi();							/* Initialize ports to control MMC */
	for (n = 100; n; n--) _delay_us(100);	/* 10ms delay */
	for (n = 10; n; n--) deselect();	/* 80 Dummy clocks with CS=H */

	ty = 0;
     30e:	f1 2c       	mov	r15, r1
     310:	78 c0       	rjmp	.+240    	; 0x402 <disk_initialize+0x180>
     312:	8f e8       	ldi	r24, 0x8F	; 143
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	01 97       	sbiw	r24, 0x01	; 1
     318:	f1 f7       	brne	.-4      	; 0x316 <disk_initialize+0x94>
     31a:	00 c0       	rjmp	.+0      	; 0x31c <disk_initialize+0x9a>
     31c:	00 00       	nop
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) _delay_us(100);	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     31e:	01 50       	subi	r16, 0x01	; 1
     320:	11 09       	sbc	r17, r1
     322:	19 f4       	brne	.+6      	; 0x32a <disk_initialize+0xa8>
     324:	60 c0       	rjmp	.+192    	; 0x3e6 <disk_initialize+0x164>
     326:	00 e1       	ldi	r16, 0x10	; 16
     328:	17 e2       	ldi	r17, 0x27	; 39
     32a:	40 e0       	ldi	r20, 0x00	; 0
     32c:	50 e0       	ldi	r21, 0x00	; 0
     32e:	60 e0       	ldi	r22, 0x00	; 0
     330:	70 e4       	ldi	r23, 0x40	; 64
     332:	89 ee       	ldi	r24, 0xE9	; 233
     334:	0e 94 03 01 	call	0x206	; 0x206 <send_cmd>
     338:	81 11       	cpse	r24, r1
     33a:	eb cf       	rjmp	.-42     	; 0x312 <disk_initialize+0x90>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     33c:	01 2b       	or	r16, r17
     33e:	09 f4       	brne	.+2      	; 0x342 <disk_initialize+0xc0>
     340:	54 c0       	rjmp	.+168    	; 0x3ea <disk_initialize+0x168>
     342:	40 e0       	ldi	r20, 0x00	; 0
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	ba 01       	movw	r22, r20
     348:	8a e7       	ldi	r24, 0x7A	; 122
     34a:	0e 94 03 01 	call	0x206	; 0x206 <send_cmd>
     34e:	81 11       	cpse	r24, r1
     350:	4e c0       	rjmp	.+156    	; 0x3ee <disk_initialize+0x16c>
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
     352:	0e 94 5c 00 	call	0xb8	; 0xb8 <rcv_spi>
     356:	f7 01       	movw	r30, r14
     358:	81 93       	st	Z+, r24
     35a:	7f 01       	movw	r14, r30
     35c:	ec 15       	cp	r30, r12
     35e:	fd 05       	cpc	r31, r13
     360:	c1 f7       	brne	.-16     	; 0x352 <disk_initialize+0xd0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	86 fd       	sbrc	r24, 6
     366:	45 c0       	rjmp	.+138    	; 0x3f2 <disk_initialize+0x170>
     368:	68 94       	set
     36a:	ff 24       	eor	r15, r15
     36c:	f2 f8       	bld	r15, 2
     36e:	49 c0       	rjmp	.+146    	; 0x402 <disk_initialize+0x180>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     370:	40 e0       	ldi	r20, 0x00	; 0
     372:	50 e0       	ldi	r21, 0x00	; 0
     374:	ba 01       	movw	r22, r20
     376:	89 ee       	ldi	r24, 0xE9	; 233
     378:	0e 94 03 01 	call	0x206	; 0x206 <send_cmd>
     37c:	82 30       	cpi	r24, 0x02	; 2
     37e:	38 f0       	brcs	.+14     	; 0x38e <disk_initialize+0x10c>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
     380:	ff 24       	eor	r15, r15
     382:	f3 94       	inc	r15
     384:	0f 2e       	mov	r0, r31
     386:	f1 e4       	ldi	r31, 0x41	; 65
     388:	ef 2e       	mov	r14, r31
     38a:	f0 2d       	mov	r31, r0
     38c:	07 c0       	rjmp	.+14     	; 0x39c <disk_initialize+0x11a>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
     38e:	68 94       	set
     390:	ff 24       	eor	r15, r15
     392:	f1 f8       	bld	r15, 1
     394:	0f 2e       	mov	r0, r31
     396:	f9 ee       	ldi	r31, 0xE9	; 233
     398:	ef 2e       	mov	r14, r31
     39a:	f0 2d       	mov	r31, r0
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) _delay_us(100);	/* Wait for leaving idle state */
     39c:	00 e1       	ldi	r16, 0x10	; 16
     39e:	17 e2       	ldi	r17, 0x27	; 39
     3a0:	09 c0       	rjmp	.+18     	; 0x3b4 <disk_initialize+0x132>
     3a2:	8f e8       	ldi	r24, 0x8F	; 143
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	01 97       	sbiw	r24, 0x01	; 1
     3a8:	f1 f7       	brne	.-4      	; 0x3a6 <disk_initialize+0x124>
     3aa:	00 c0       	rjmp	.+0      	; 0x3ac <disk_initialize+0x12a>
     3ac:	00 00       	nop
     3ae:	01 50       	subi	r16, 0x01	; 1
     3b0:	11 09       	sbc	r17, r1
     3b2:	21 f1       	breq	.+72     	; 0x3fc <disk_initialize+0x17a>
     3b4:	40 e0       	ldi	r20, 0x00	; 0
     3b6:	50 e0       	ldi	r21, 0x00	; 0
     3b8:	ba 01       	movw	r22, r20
     3ba:	8e 2d       	mov	r24, r14
     3bc:	0e 94 03 01 	call	0x206	; 0x206 <send_cmd>
     3c0:	81 11       	cpse	r24, r1
     3c2:	ef cf       	rjmp	.-34     	; 0x3a2 <disk_initialize+0x120>
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
     3c4:	01 2b       	or	r16, r17
     3c6:	e1 f0       	breq	.+56     	; 0x400 <disk_initialize+0x17e>
     3c8:	40 e0       	ldi	r20, 0x00	; 0
     3ca:	52 e0       	ldi	r21, 0x02	; 2
     3cc:	60 e0       	ldi	r22, 0x00	; 0
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	80 e5       	ldi	r24, 0x50	; 80
     3d2:	0e 94 03 01 	call	0x206	; 0x206 <send_cmd>
     3d6:	88 23       	and	r24, r24
     3d8:	a1 f0       	breq	.+40     	; 0x402 <disk_initialize+0x180>
				ty = 0;
     3da:	f1 2c       	mov	r15, r1
     3dc:	12 c0       	rjmp	.+36     	; 0x402 <disk_initialize+0x180>

	init_spi();							/* Initialize ports to control MMC */
	for (n = 100; n; n--) _delay_us(100);	/* 10ms delay */
	for (n = 10; n; n--) deselect();	/* 80 Dummy clocks with CS=H */

	ty = 0;
     3de:	f1 2c       	mov	r15, r1
     3e0:	10 c0       	rjmp	.+32     	; 0x402 <disk_initialize+0x180>
     3e2:	f1 2c       	mov	r15, r1
     3e4:	0e c0       	rjmp	.+28     	; 0x402 <disk_initialize+0x180>
     3e6:	f1 2c       	mov	r15, r1
     3e8:	0c c0       	rjmp	.+24     	; 0x402 <disk_initialize+0x180>
     3ea:	f1 2c       	mov	r15, r1
     3ec:	0a c0       	rjmp	.+20     	; 0x402 <disk_initialize+0x180>
     3ee:	f1 2c       	mov	r15, r1
     3f0:	08 c0       	rjmp	.+16     	; 0x402 <disk_initialize+0x180>
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) _delay_us(100);	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
     3f2:	0f 2e       	mov	r0, r31
     3f4:	fc e0       	ldi	r31, 0x0C	; 12
     3f6:	ff 2e       	mov	r15, r31
     3f8:	f0 2d       	mov	r31, r0
     3fa:	03 c0       	rjmp	.+6      	; 0x402 <disk_initialize+0x180>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) _delay_us(100);	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
				ty = 0;
     3fc:	f1 2c       	mov	r15, r1
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <disk_initialize+0x180>
     400:	f1 2c       	mov	r15, r1
		}
	}
	CardType = ty;
     402:	f0 92 52 01 	sts	0x0152, r15
	deselect();
     406:	0e 94 5b 00 	call	0xb6	; 0xb6 <deselect>

	return ty ? 0 : STA_NOINIT;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	f1 10       	cpse	r15, r1
     40e:	80 e0       	ldi	r24, 0x00	; 0
}
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	1f 91       	pop	r17
     41e:	0f 91       	pop	r16
     420:	ff 90       	pop	r15
     422:	ef 90       	pop	r14
     424:	df 90       	pop	r13
     426:	cf 90       	pop	r12
     428:	08 95       	ret

0000042a <disk_readp>:
	BYTE *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
	DWORD sector,	/* Sector number (LBA) */
	UINT offset,	/* Byte offset to read from (0..511) */
	UINT count		/* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
     42a:	cf 92       	push	r12
     42c:	df 92       	push	r13
     42e:	ef 92       	push	r14
     430:	ff 92       	push	r15
     432:	0f 93       	push	r16
     434:	1f 93       	push	r17
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	c8 2e       	mov	r12, r24
     43c:	d9 2e       	mov	r13, r25
     43e:	79 01       	movw	r14, r18
	DRESULT res;
	BYTE rc;
	UINT bc;


	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     440:	80 91 52 01 	lds	r24, 0x0152
     444:	83 fd       	sbrc	r24, 3
     446:	09 c0       	rjmp	.+18     	; 0x45a <disk_readp+0x30>
     448:	03 2e       	mov	r0, r19
     44a:	39 e0       	ldi	r19, 0x09	; 9
     44c:	44 0f       	add	r20, r20
     44e:	55 1f       	adc	r21, r21
     450:	66 1f       	adc	r22, r22
     452:	77 1f       	adc	r23, r23
     454:	3a 95       	dec	r19
     456:	d1 f7       	brne	.-12     	; 0x44c <disk_readp+0x22>
     458:	30 2d       	mov	r19, r0

	res = RES_ERROR;
	if (send_cmd(CMD17, sector) == 0) {		/* READ_SINGLE_BLOCK */
     45a:	81 e5       	ldi	r24, 0x51	; 81
     45c:	0e 94 03 01 	call	0x206	; 0x206 <send_cmd>
     460:	81 11       	cpse	r24, r1
     462:	2b c0       	rjmp	.+86     	; 0x4ba <disk_readp+0x90>
     464:	c0 e4       	ldi	r28, 0x40	; 64
     466:	dc e9       	ldi	r29, 0x9C	; 156

		bc = 40000;
		do {							/* Wait for data packet */
			rc = rcv_spi();
     468:	0e 94 5c 00 	call	0xb8	; 0xb8 <rcv_spi>
		} while (rc == 0xFF && --bc);
     46c:	8f 3f       	cpi	r24, 0xFF	; 255
     46e:	21 f4       	brne	.+8      	; 0x478 <disk_readp+0x4e>
     470:	21 97       	sbiw	r28, 0x01	; 1
     472:	d1 f7       	brne	.-12     	; 0x468 <disk_readp+0x3e>
	UINT bc;


	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	res = RES_ERROR;
     474:	c1 e0       	ldi	r28, 0x01	; 1
     476:	24 c0       	rjmp	.+72     	; 0x4c0 <disk_readp+0x96>
		bc = 40000;
		do {							/* Wait for data packet */
			rc = rcv_spi();
		} while (rc == 0xFF && --bc);

		if (rc == 0xFE) {				/* A data packet arrived */
     478:	8e 3f       	cpi	r24, 0xFE	; 254
     47a:	09 f5       	brne	.+66     	; 0x4be <disk_readp+0x94>
     47c:	c2 e0       	ldi	r28, 0x02	; 2
     47e:	d2 e0       	ldi	r29, 0x02	; 2
     480:	c0 1b       	sub	r28, r16
     482:	d1 0b       	sbc	r29, r17
			bc = 514 - offset - count;
     484:	ce 19       	sub	r28, r14
     486:	df 09       	sbc	r29, r15

			/* Skip leading bytes */
			if (offset) {
     488:	e1 14       	cp	r14, r1
     48a:	f1 04       	cpc	r15, r1
     48c:	31 f0       	breq	.+12     	; 0x49a <disk_readp+0x70>
				do rcv_spi(); while (--offset);
     48e:	0e 94 5c 00 	call	0xb8	; 0xb8 <rcv_spi>
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	e8 1a       	sub	r14, r24
     496:	f1 08       	sbc	r15, r1
     498:	d1 f7       	brne	.-12     	; 0x48e <disk_readp+0x64>
     49a:	ec 2c       	mov	r14, r12
     49c:	fd 2c       	mov	r15, r13
			}

			/* Receive a part of the sector */
			do {
				*buff++ = rcv_spi();
     49e:	0e 94 5c 00 	call	0xb8	; 0xb8 <rcv_spi>
     4a2:	f7 01       	movw	r30, r14
     4a4:	81 93       	st	Z+, r24
     4a6:	7f 01       	movw	r14, r30
			} while (--count);
     4a8:	01 50       	subi	r16, 0x01	; 1
     4aa:	11 09       	sbc	r17, r1
     4ac:	c1 f7       	brne	.-16     	; 0x49e <disk_readp+0x74>

			/* Skip trailing bytes and CRC */
			do rcv_spi(); while (--bc);
     4ae:	0e 94 5c 00 	call	0xb8	; 0xb8 <rcv_spi>
     4b2:	21 97       	sbiw	r28, 0x01	; 1
     4b4:	e1 f7       	brne	.-8      	; 0x4ae <disk_readp+0x84>

			res = RES_OK;
     4b6:	c0 e0       	ldi	r28, 0x00	; 0
     4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <disk_readp+0x96>
	UINT bc;


	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	res = RES_ERROR;
     4ba:	c1 e0       	ldi	r28, 0x01	; 1
     4bc:	01 c0       	rjmp	.+2      	; 0x4c0 <disk_readp+0x96>
     4be:	c1 e0       	ldi	r28, 0x01	; 1

			res = RES_OK;
		}
	}

	deselect();
     4c0:	0e 94 5b 00 	call	0xb6	; 0xb6 <deselect>

	return res;
}
     4c4:	8c 2f       	mov	r24, r28
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	1f 91       	pop	r17
     4cc:	0f 91       	pop	r16
     4ce:	ff 90       	pop	r15
     4d0:	ef 90       	pop	r14
     4d2:	df 90       	pop	r13
     4d4:	cf 90       	pop	r12
     4d6:	08 95       	ret

000004d8 <clust2sect>:

static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
     4d8:	0f 93       	push	r16
     4da:	1f 93       	push	r17
	FATFS *fs = FatFs;
     4dc:	e0 91 53 01 	lds	r30, 0x0153
     4e0:	f0 91 54 01 	lds	r31, 0x0154


	clst -= 2;
     4e4:	9b 01       	movw	r18, r22
     4e6:	ac 01       	movw	r20, r24
     4e8:	22 50       	subi	r18, 0x02	; 2
     4ea:	31 09       	sbc	r19, r1
     4ec:	41 09       	sbc	r20, r1
     4ee:	51 09       	sbc	r21, r1
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     4f0:	86 81       	ldd	r24, Z+6	; 0x06
     4f2:	97 81       	ldd	r25, Z+7	; 0x07
     4f4:	a0 85       	ldd	r26, Z+8	; 0x08
     4f6:	b1 85       	ldd	r27, Z+9	; 0x09
     4f8:	02 97       	sbiw	r24, 0x02	; 2
     4fa:	a1 09       	sbc	r26, r1
     4fc:	b1 09       	sbc	r27, r1
     4fe:	28 17       	cp	r18, r24
     500:	39 07       	cpc	r19, r25
     502:	4a 07       	cpc	r20, r26
     504:	5b 07       	cpc	r21, r27
     506:	68 f4       	brcc	.+26     	; 0x522 <clust2sect+0x4a>
	return (DWORD)clst * fs->csize + fs->database;
     508:	a2 81       	ldd	r26, Z+2	; 0x02
     50a:	b0 e0       	ldi	r27, 0x00	; 0
     50c:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__muluhisi3>
     510:	02 89       	ldd	r16, Z+18	; 0x12
     512:	13 89       	ldd	r17, Z+19	; 0x13
     514:	24 89       	ldd	r18, Z+20	; 0x14
     516:	35 89       	ldd	r19, Z+21	; 0x15
     518:	60 0f       	add	r22, r16
     51a:	71 1f       	adc	r23, r17
     51c:	82 1f       	adc	r24, r18
     51e:	93 1f       	adc	r25, r19
     520:	03 c0       	rjmp	.+6      	; 0x528 <clust2sect+0x50>
{
	FATFS *fs = FatFs;


	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     522:	60 e0       	ldi	r22, 0x00	; 0
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	cb 01       	movw	r24, r22
	return (DWORD)clst * fs->csize + fs->database;
}
     528:	1f 91       	pop	r17
     52a:	0f 91       	pop	r16
     52c:	08 95       	ret

0000052e <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
     52e:	0f 93       	push	r16
     530:	1f 93       	push	r17
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	fc 01       	movw	r30, r24
	CLUST clst;
	FATFS *fs = FatFs;
     538:	a0 91 53 01 	lds	r26, 0x0153
     53c:	b0 91 54 01 	lds	r27, 0x0154


	dj->index = 0;
     540:	11 82       	std	Z+1, r1	; 0x01
     542:	10 82       	st	Z, r1
	clst = dj->sclust;
     544:	64 81       	ldd	r22, Z+4	; 0x04
     546:	75 81       	ldd	r23, Z+5	; 0x05
     548:	86 81       	ldd	r24, Z+6	; 0x06
     54a:	97 81       	ldd	r25, Z+7	; 0x07
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
     54c:	61 30       	cpi	r22, 0x01	; 1
     54e:	71 05       	cpc	r23, r1
     550:	81 05       	cpc	r24, r1
     552:	91 05       	cpc	r25, r1
     554:	91 f1       	breq	.+100    	; 0x5ba <dir_rewind+0x8c>
     556:	16 96       	adiw	r26, 0x06	; 6
     558:	0d 91       	ld	r16, X+
     55a:	1d 91       	ld	r17, X+
     55c:	2d 91       	ld	r18, X+
     55e:	3c 91       	ld	r19, X
     560:	19 97       	sbiw	r26, 0x09	; 9
     562:	60 17       	cp	r22, r16
     564:	71 07       	cpc	r23, r17
     566:	82 07       	cpc	r24, r18
     568:	93 07       	cpc	r25, r19
     56a:	48 f5       	brcc	.+82     	; 0x5be <dir_rewind+0x90>
     56c:	ef 01       	movw	r28, r30
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && (_FS_32ONLY || fs->fs_type == FS_FAT32))	/* Replace cluster# 0 with root cluster# if in FAT32 */
     56e:	61 15       	cp	r22, r1
     570:	71 05       	cpc	r23, r1
     572:	81 05       	cpc	r24, r1
     574:	91 05       	cpc	r25, r1
     576:	29 f5       	brne	.+74     	; 0x5c2 <dir_rewind+0x94>
     578:	8c 91       	ld	r24, X
     57a:	83 30       	cpi	r24, 0x03	; 3
     57c:	39 f5       	brne	.+78     	; 0x5cc <dir_rewind+0x9e>
		clst = (CLUST)fs->dirbase;
     57e:	1e 96       	adiw	r26, 0x0e	; 14
     580:	6d 91       	ld	r22, X+
     582:	7d 91       	ld	r23, X+
     584:	8d 91       	ld	r24, X+
     586:	9c 91       	ld	r25, X
     588:	51 97       	sbiw	r26, 0x11	; 17
	dj->clust = clst;						/* Current cluster */
     58a:	60 87       	std	Z+8, r22	; 0x08
     58c:	71 87       	std	Z+9, r23	; 0x09
     58e:	82 87       	std	Z+10, r24	; 0x0a
     590:	93 87       	std	Z+11, r25	; 0x0b
	dj->sect = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     592:	61 15       	cp	r22, r1
     594:	71 05       	cpc	r23, r1
     596:	81 05       	cpc	r24, r1
     598:	91 05       	cpc	r25, r1
     59a:	19 f0       	breq	.+6      	; 0x5a2 <dir_rewind+0x74>
     59c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <clust2sect>
     5a0:	06 c0       	rjmp	.+12     	; 0x5ae <dir_rewind+0x80>
     5a2:	1e 96       	adiw	r26, 0x0e	; 14
     5a4:	6d 91       	ld	r22, X+
     5a6:	7d 91       	ld	r23, X+
     5a8:	8d 91       	ld	r24, X+
     5aa:	9c 91       	ld	r25, X
     5ac:	51 97       	sbiw	r26, 0x11	; 17
     5ae:	6c 87       	std	Y+12, r22	; 0x0c
     5b0:	7d 87       	std	Y+13, r23	; 0x0d
     5b2:	8e 87       	std	Y+14, r24	; 0x0e
     5b4:	9f 87       	std	Y+15, r25	; 0x0f

	return FR_OK;	/* Seek succeeded */
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	0e c0       	rjmp	.+28     	; 0x5d6 <dir_rewind+0xa8>


	dj->index = 0;
	clst = dj->sclust;
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
		return FR_DISK_ERR;
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	0c c0       	rjmp	.+24     	; 0x5d6 <dir_rewind+0xa8>
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	0a c0       	rjmp	.+20     	; 0x5d6 <dir_rewind+0xa8>
	if (_FS_FAT32 && !clst && (_FS_32ONLY || fs->fs_type == FS_FAT32))	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;						/* Current cluster */
     5c2:	60 87       	std	Z+8, r22	; 0x08
     5c4:	71 87       	std	Z+9, r23	; 0x09
     5c6:	82 87       	std	Z+10, r24	; 0x0a
     5c8:	93 87       	std	Z+11, r25	; 0x0b
     5ca:	e8 cf       	rjmp	.-48     	; 0x59c <dir_rewind+0x6e>
     5cc:	10 86       	std	Z+8, r1	; 0x08
     5ce:	11 86       	std	Z+9, r1	; 0x09
     5d0:	12 86       	std	Z+10, r1	; 0x0a
     5d2:	13 86       	std	Z+11, r1	; 0x0b
     5d4:	e6 cf       	rjmp	.-52     	; 0x5a2 <dir_rewind+0x74>
	dj->sect = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase;	/* Current sector */

	return FR_OK;	/* Seek succeeded */
}
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	0f 91       	pop	r16
     5de:	08 95       	ret

000005e0 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     5e0:	cf 92       	push	r12
     5e2:	df 92       	push	r13
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	ec 01       	movw	r28, r24
     5f2:	6a 01       	movw	r12, r20
     5f4:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot record */
     5f6:	02 e0       	ldi	r16, 0x02	; 2
     5f8:	10 e0       	ldi	r17, 0x00	; 0
     5fa:	2e ef       	ldi	r18, 0xFE	; 254
     5fc:	31 e0       	ldi	r19, 0x01	; 1
     5fe:	0e 94 15 02 	call	0x42a	; 0x42a <disk_readp>
     602:	81 11       	cpse	r24, r1
     604:	26 c0       	rjmp	.+76     	; 0x652 <check_fs+0x72>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
     606:	88 81       	ld	r24, Y
     608:	99 81       	ldd	r25, Y+1	; 0x01
     60a:	85 35       	cpi	r24, 0x55	; 85
     60c:	9a 4a       	sbci	r25, 0xAA	; 170
     60e:	19 f5       	brne	.+70     	; 0x656 <check_fs+0x76>
		return 2;

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
     610:	26 e3       	ldi	r18, 0x36	; 54
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	b7 01       	movw	r22, r14
     616:	a6 01       	movw	r20, r12
     618:	ce 01       	movw	r24, r28
     61a:	0e 94 15 02 	call	0x42a	; 0x42a <disk_readp>
     61e:	81 11       	cpse	r24, r1
     620:	05 c0       	rjmp	.+10     	; 0x62c <check_fs+0x4c>
     622:	88 81       	ld	r24, Y
     624:	99 81       	ldd	r25, Y+1	; 0x01
     626:	86 34       	cpi	r24, 0x46	; 70
     628:	91 44       	sbci	r25, 0x41	; 65
     62a:	b9 f0       	breq	.+46     	; 0x65a <check_fs+0x7a>
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
     62c:	02 e0       	ldi	r16, 0x02	; 2
     62e:	10 e0       	ldi	r17, 0x00	; 0
     630:	22 e5       	ldi	r18, 0x52	; 82
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	b7 01       	movw	r22, r14
     636:	a6 01       	movw	r20, r12
     638:	ce 01       	movw	r24, r28
     63a:	0e 94 15 02 	call	0x42a	; 0x42a <disk_readp>
     63e:	81 11       	cpse	r24, r1
     640:	0e c0       	rjmp	.+28     	; 0x65e <check_fs+0x7e>
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	28 81       	ld	r18, Y
     646:	39 81       	ldd	r19, Y+1	; 0x01
     648:	26 34       	cpi	r18, 0x46	; 70
     64a:	31 44       	sbci	r19, 0x41	; 65
     64c:	49 f4       	brne	.+18     	; 0x660 <check_fs+0x80>
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	07 c0       	rjmp	.+14     	; 0x660 <check_fs+0x80>
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot record */
		return 3;
     652:	83 e0       	ldi	r24, 0x03	; 3
     654:	05 c0       	rjmp	.+10     	; 0x660 <check_fs+0x80>
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
		return 2;
     656:	82 e0       	ldi	r24, 0x02	; 2
     658:	03 c0       	rjmp	.+6      	; 0x660 <check_fs+0x80>

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
		return 0;
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	01 c0       	rjmp	.+2      	; 0x660 <check_fs+0x80>
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
		return 0;
	return 1;
     65e:	81 e0       	ldi	r24, 0x01	; 1
}
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	1f 91       	pop	r17
     666:	0f 91       	pop	r16
     668:	ff 90       	pop	r15
     66a:	ef 90       	pop	r14
     66c:	df 90       	pop	r13
     66e:	cf 90       	pop	r12
     670:	08 95       	ret

00000672 <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
     672:	cf 92       	push	r12
     674:	df 92       	push	r13
     676:	ef 92       	push	r14
     678:	ff 92       	push	r15
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	00 d0       	rcall	.+0      	; 0x684 <get_fat+0x12>
     684:	00 d0       	rcall	.+0      	; 0x686 <get_fat+0x14>
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
	BYTE buf[4];
	FATFS *fs = FatFs;
     68a:	e0 91 53 01 	lds	r30, 0x0153
     68e:	f0 91 54 01 	lds	r31, 0x0154

	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
     692:	62 30       	cpi	r22, 0x02	; 2
     694:	71 05       	cpc	r23, r1
     696:	81 05       	cpc	r24, r1
     698:	91 05       	cpc	r25, r1
     69a:	08 f4       	brcc	.+2      	; 0x69e <get_fat+0x2c>
     69c:	5a c0       	rjmp	.+180    	; 0x752 <get_fat+0xe0>
     69e:	06 81       	ldd	r16, Z+6	; 0x06
     6a0:	17 81       	ldd	r17, Z+7	; 0x07
     6a2:	20 85       	ldd	r18, Z+8	; 0x08
     6a4:	31 85       	ldd	r19, Z+9	; 0x09
     6a6:	60 17       	cp	r22, r16
     6a8:	71 07       	cpc	r23, r17
     6aa:	82 07       	cpc	r24, r18
     6ac:	93 07       	cpc	r25, r19
     6ae:	08 f0       	brcs	.+2      	; 0x6b2 <get_fat+0x40>
     6b0:	55 c0       	rjmp	.+170    	; 0x75c <get_fat+0xea>
		return 1;

	switch (fs->fs_type) {
     6b2:	20 81       	ld	r18, Z
     6b4:	22 30       	cpi	r18, 0x02	; 2
     6b6:	19 f0       	breq	.+6      	; 0x6be <get_fat+0x4c>
     6b8:	23 30       	cpi	r18, 0x03	; 3
     6ba:	01 f1       	breq	.+64     	; 0x6fc <get_fat+0x8a>
     6bc:	54 c0       	rjmp	.+168    	; 0x766 <get_fat+0xf4>
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
	}
#endif
#if _FS_FAT16
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, ((UINT)clst % 256) * 2, 2)) break;
     6be:	9b 01       	movw	r18, r22
     6c0:	33 27       	eor	r19, r19
     6c2:	22 0f       	add	r18, r18
     6c4:	33 1f       	adc	r19, r19
     6c6:	bb 27       	eor	r27, r27
     6c8:	a9 2f       	mov	r26, r25
     6ca:	98 2f       	mov	r25, r24
     6cc:	87 2f       	mov	r24, r23
     6ce:	c2 84       	ldd	r12, Z+10	; 0x0a
     6d0:	d3 84       	ldd	r13, Z+11	; 0x0b
     6d2:	e4 84       	ldd	r14, Z+12	; 0x0c
     6d4:	f5 84       	ldd	r15, Z+13	; 0x0d
     6d6:	ac 01       	movw	r20, r24
     6d8:	bd 01       	movw	r22, r26
     6da:	4c 0d       	add	r20, r12
     6dc:	5d 1d       	adc	r21, r13
     6de:	6e 1d       	adc	r22, r14
     6e0:	7f 1d       	adc	r23, r15
     6e2:	02 e0       	ldi	r16, 0x02	; 2
     6e4:	10 e0       	ldi	r17, 0x00	; 0
     6e6:	ce 01       	movw	r24, r28
     6e8:	01 96       	adiw	r24, 0x01	; 1
     6ea:	0e 94 15 02 	call	0x42a	; 0x42a <disk_readp>
     6ee:	81 11       	cpse	r24, r1
     6f0:	3f c0       	rjmp	.+126    	; 0x770 <get_fat+0xfe>
		return LD_WORD(buf);
     6f2:	69 81       	ldd	r22, Y+1	; 0x01
     6f4:	7a 81       	ldd	r23, Y+2	; 0x02
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	43 c0       	rjmp	.+134    	; 0x782 <get_fat+0x110>
#endif
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) break;
     6fc:	9b 01       	movw	r18, r22
     6fe:	2f 77       	andi	r18, 0x7F	; 127
     700:	33 27       	eor	r19, r19
     702:	22 0f       	add	r18, r18
     704:	33 1f       	adc	r19, r19
     706:	22 0f       	add	r18, r18
     708:	33 1f       	adc	r19, r19
     70a:	dc 01       	movw	r26, r24
     70c:	cb 01       	movw	r24, r22
     70e:	68 94       	set
     710:	16 f8       	bld	r1, 6
     712:	b6 95       	lsr	r27
     714:	a7 95       	ror	r26
     716:	97 95       	ror	r25
     718:	87 95       	ror	r24
     71a:	16 94       	lsr	r1
     71c:	d1 f7       	brne	.-12     	; 0x712 <get_fat+0xa0>
     71e:	c2 84       	ldd	r12, Z+10	; 0x0a
     720:	d3 84       	ldd	r13, Z+11	; 0x0b
     722:	e4 84       	ldd	r14, Z+12	; 0x0c
     724:	f5 84       	ldd	r15, Z+13	; 0x0d
     726:	ac 01       	movw	r20, r24
     728:	bd 01       	movw	r22, r26
     72a:	4c 0d       	add	r20, r12
     72c:	5d 1d       	adc	r21, r13
     72e:	6e 1d       	adc	r22, r14
     730:	7f 1d       	adc	r23, r15
     732:	04 e0       	ldi	r16, 0x04	; 4
     734:	10 e0       	ldi	r17, 0x00	; 0
     736:	ce 01       	movw	r24, r28
     738:	01 96       	adiw	r24, 0x01	; 1
     73a:	0e 94 15 02 	call	0x42a	; 0x42a <disk_readp>
     73e:	81 11       	cpse	r24, r1
     740:	1c c0       	rjmp	.+56     	; 0x77a <get_fat+0x108>
		return LD_DWORD(buf) & 0x0FFFFFFF;
     742:	89 81       	ldd	r24, Y+1	; 0x01
     744:	9a 81       	ldd	r25, Y+2	; 0x02
     746:	ab 81       	ldd	r26, Y+3	; 0x03
     748:	bc 81       	ldd	r27, Y+4	; 0x04
     74a:	bc 01       	movw	r22, r24
     74c:	cd 01       	movw	r24, r26
     74e:	9f 70       	andi	r25, 0x0F	; 15
     750:	18 c0       	rjmp	.+48     	; 0x782 <get_fat+0x110>
{
	BYTE buf[4];
	FATFS *fs = FatFs;

	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
		return 1;
     752:	61 e0       	ldi	r22, 0x01	; 1
     754:	70 e0       	ldi	r23, 0x00	; 0
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	13 c0       	rjmp	.+38     	; 0x782 <get_fat+0x110>
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	0e c0       	rjmp	.+28     	; 0x782 <get_fat+0x110>
		if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) break;
		return LD_DWORD(buf) & 0x0FFFFFFF;
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
     766:	61 e0       	ldi	r22, 0x01	; 1
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	09 c0       	rjmp	.+18     	; 0x782 <get_fat+0x110>
     770:	61 e0       	ldi	r22, 0x01	; 1
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	04 c0       	rjmp	.+8      	; 0x782 <get_fat+0x110>
     77a:	61 e0       	ldi	r22, 0x01	; 1
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	90 e0       	ldi	r25, 0x00	; 0
}
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	ff 90       	pop	r15
     794:	ef 90       	pop	r14
     796:	df 90       	pop	r13
     798:	cf 90       	pop	r12
     79a:	08 95       	ret

0000079c <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object */
)
{
     79c:	4f 92       	push	r4
     79e:	5f 92       	push	r5
     7a0:	6f 92       	push	r6
     7a2:	7f 92       	push	r7
     7a4:	8f 92       	push	r8
     7a6:	9f 92       	push	r9
     7a8:	af 92       	push	r10
     7aa:	bf 92       	push	r11
     7ac:	ef 92       	push	r14
     7ae:	ff 92       	push	r15
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
     7bc:	a8 97       	sbiw	r28, 0x28	; 40
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	cd bf       	out	0x3d, r28	; 61
     7c8:	7c 01       	movw	r14, r24
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
     7ca:	10 92 54 01 	sts	0x0154, r1
     7ce:	10 92 53 01 	sts	0x0153, r1

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
     7d2:	0e 94 41 01 	call	0x282	; 0x282 <disk_initialize>
     7d6:	80 fd       	sbrc	r24, 0
     7d8:	c6 c0       	rjmp	.+396    	; 0x966 <__stack+0x67>
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	ba 01       	movw	r22, r20
     7e0:	ce 01       	movw	r24, r28
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
     7e8:	81 30       	cpi	r24, 0x01	; 1
     7ea:	e1 f4       	brne	.+56     	; 0x824 <pf_mount+0x88>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
     7ec:	00 e1       	ldi	r16, 0x10	; 16
     7ee:	10 e0       	ldi	r17, 0x00	; 0
     7f0:	2e eb       	ldi	r18, 0xBE	; 190
     7f2:	31 e0       	ldi	r19, 0x01	; 1
     7f4:	40 e0       	ldi	r20, 0x00	; 0
     7f6:	50 e0       	ldi	r21, 0x00	; 0
     7f8:	ba 01       	movw	r22, r20
     7fa:	ce 01       	movw	r24, r28
     7fc:	01 96       	adiw	r24, 0x01	; 1
     7fe:	0e 94 15 02 	call	0x42a	; 0x42a <disk_readp>
     802:	81 11       	cpse	r24, r1
     804:	b2 c0       	rjmp	.+356    	; 0x96a <__stack+0x6b>
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
     806:	8d 81       	ldd	r24, Y+5	; 0x05
     808:	88 23       	and	r24, r24
     80a:	09 f4       	brne	.+2      	; 0x80e <pf_mount+0x72>
     80c:	b0 c0       	rjmp	.+352    	; 0x96e <__stack+0x6f>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
     80e:	89 84       	ldd	r8, Y+9	; 0x09
     810:	9a 84       	ldd	r9, Y+10	; 0x0a
     812:	ab 84       	ldd	r10, Y+11	; 0x0b
     814:	bc 84       	ldd	r11, Y+12	; 0x0c
				fmt = check_fs(buf, bsect);	/* Check the partition */
     816:	b5 01       	movw	r22, r10
     818:	a4 01       	movw	r20, r8
     81a:	ce 01       	movw	r24, r28
     81c:	01 96       	adiw	r24, 0x01	; 1
     81e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <check_fs>
     822:	03 c0       	rjmp	.+6      	; 0x82a <pf_mount+0x8e>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
     824:	81 2c       	mov	r8, r1
     826:	91 2c       	mov	r9, r1
     828:	54 01       	movw	r10, r8
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
     82a:	83 30       	cpi	r24, 0x03	; 3
     82c:	09 f4       	brne	.+2      	; 0x830 <pf_mount+0x94>
     82e:	a1 c0       	rjmp	.+322    	; 0x972 <__stack+0x73>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
     830:	81 11       	cpse	r24, r1
     832:	a1 c0       	rjmp	.+322    	; 0x976 <__stack+0x77>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
     834:	04 e2       	ldi	r16, 0x24	; 36
     836:	10 e0       	ldi	r17, 0x00	; 0
     838:	2d e0       	ldi	r18, 0x0D	; 13
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	b5 01       	movw	r22, r10
     83e:	a4 01       	movw	r20, r8
     840:	ce 01       	movw	r24, r28
     842:	01 96       	adiw	r24, 0x01	; 1
     844:	0e 94 15 02 	call	0x42a	; 0x42a <disk_readp>
     848:	81 11       	cpse	r24, r1
     84a:	97 c0       	rjmp	.+302    	; 0x97a <__stack+0x7b>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
     84c:	2a 85       	ldd	r18, Y+10	; 0x0a
     84e:	3b 85       	ldd	r19, Y+11	; 0x0b
     850:	40 e0       	ldi	r20, 0x00	; 0
     852:	50 e0       	ldi	r21, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
     854:	21 15       	cp	r18, r1
     856:	31 05       	cpc	r19, r1
     858:	41 05       	cpc	r20, r1
     85a:	51 05       	cpc	r21, r1
     85c:	21 f4       	brne	.+8      	; 0x866 <pf_mount+0xca>
     85e:	28 8d       	ldd	r18, Y+24	; 0x18
     860:	39 8d       	ldd	r19, Y+25	; 0x19
     862:	4a 8d       	ldd	r20, Y+26	; 0x1a
     864:	5b 8d       	ldd	r21, Y+27	; 0x1b

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
     866:	ac 81       	ldd	r26, Y+4	; 0x04
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__muluhisi3>
     86e:	6d a3       	std	Y+37, r22	; 0x25
     870:	7e a3       	std	Y+38, r23	; 0x26
     872:	8f a3       	std	Y+39, r24	; 0x27
     874:	98 a7       	std	Y+40, r25	; 0x28
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
     876:	0a 81       	ldd	r16, Y+2	; 0x02
     878:	1b 81       	ldd	r17, Y+3	; 0x03
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	80 0e       	add	r8, r16
     880:	91 1e       	adc	r9, r17
     882:	a2 1e       	adc	r10, r18
     884:	b3 1e       	adc	r11, r19
     886:	d7 01       	movw	r26, r14
     888:	1a 96       	adiw	r26, 0x0a	; 10
     88a:	8d 92       	st	X+, r8
     88c:	9d 92       	st	X+, r9
     88e:	ad 92       	st	X+, r10
     890:	bc 92       	st	X, r11
     892:	1d 97       	sbiw	r26, 0x0d	; 13
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
     894:	49 81       	ldd	r20, Y+1	; 0x01
     896:	12 96       	adiw	r26, 0x02	; 2
     898:	4c 93       	st	X, r20
     89a:	12 97       	sbiw	r26, 0x02	; 2
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
     89c:	4d 80       	ldd	r4, Y+5	; 0x05
     89e:	5e 80       	ldd	r5, Y+6	; 0x06
     8a0:	15 96       	adiw	r26, 0x05	; 5
     8a2:	5c 92       	st	X, r5
     8a4:	4e 92       	st	-X, r4
     8a6:	14 97       	sbiw	r26, 0x04	; 4
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
     8a8:	8f 81       	ldd	r24, Y+7	; 0x07
     8aa:	98 85       	ldd	r25, Y+8	; 0x08
     8ac:	a0 e0       	ldi	r26, 0x00	; 0
     8ae:	b0 e0       	ldi	r27, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
     8b0:	00 97       	sbiw	r24, 0x00	; 0
     8b2:	a1 05       	cpc	r26, r1
     8b4:	b1 05       	cpc	r27, r1
     8b6:	21 f4       	brne	.+8      	; 0x8c0 <pf_mount+0x124>
     8b8:	8c 89       	ldd	r24, Y+20	; 0x14
     8ba:	9d 89       	ldd	r25, Y+21	; 0x15
     8bc:	ae 89       	ldd	r26, Y+22	; 0x16
     8be:	bf 89       	ldd	r27, Y+23	; 0x17
	mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
     8c0:	56 94       	lsr	r5
     8c2:	47 94       	ror	r4
     8c4:	56 94       	lsr	r5
     8c6:	47 94       	ror	r4
     8c8:	56 94       	lsr	r5
     8ca:	47 94       	ror	r4
     8cc:	56 94       	lsr	r5
     8ce:	47 94       	ror	r4
     8d0:	61 2c       	mov	r6, r1
     8d2:	71 2c       	mov	r7, r1
     8d4:	80 1b       	sub	r24, r16
     8d6:	91 0b       	sbc	r25, r17
     8d8:	a2 0b       	sbc	r26, r18
     8da:	b3 0b       	sbc	r27, r19
     8dc:	0d a1       	ldd	r16, Y+37	; 0x25
     8de:	1e a1       	ldd	r17, Y+38	; 0x26
     8e0:	2f a1       	ldd	r18, Y+39	; 0x27
     8e2:	38 a5       	ldd	r19, Y+40	; 0x28
     8e4:	80 1b       	sub	r24, r16
     8e6:	91 0b       	sbc	r25, r17
     8e8:	a2 0b       	sbc	r26, r18
     8ea:	b3 0b       	sbc	r27, r19
     8ec:	bc 01       	movw	r22, r24
     8ee:	cd 01       	movw	r24, r26
     8f0:	64 19       	sub	r22, r4
     8f2:	75 09       	sbc	r23, r5
     8f4:	86 09       	sbc	r24, r6
     8f6:	97 09       	sbc	r25, r7
		) / fs->csize + 2;
     8f8:	24 2f       	mov	r18, r20
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	40 e0       	ldi	r20, 0x00	; 0
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__udivmodsi4>
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
	mclst = (tsect						/* Last cluster# + 1 */
     904:	da 01       	movw	r26, r20
     906:	c9 01       	movw	r24, r18
     908:	02 96       	adiw	r24, 0x02	; 2
     90a:	a1 1d       	adc	r26, r1
     90c:	b1 1d       	adc	r27, r1
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;
     90e:	f7 01       	movw	r30, r14
     910:	86 83       	std	Z+6, r24	; 0x06
     912:	97 83       	std	Z+7, r25	; 0x07
     914:	a0 87       	std	Z+8, r26	; 0x08
     916:	b1 87       	std	Z+9, r27	; 0x09

	fmt = 0;							/* Determine the FAT sub type */
	if (_FS_FAT12 && mclst < 0xFF7)
		fmt = FS_FAT12;
	if (_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7)
     918:	ba 01       	movw	r22, r20
     91a:	a9 01       	movw	r20, r18
     91c:	46 5f       	subi	r20, 0xF6	; 246
     91e:	5f 40       	sbci	r21, 0x0F	; 15
     920:	61 09       	sbc	r22, r1
     922:	71 09       	sbc	r23, r1
     924:	4f 3f       	cpi	r20, 0xFF	; 255
     926:	5f 4e       	sbci	r21, 0xEF	; 239
     928:	61 05       	cpc	r22, r1
     92a:	71 05       	cpc	r23, r1
     92c:	78 f1       	brcs	.+94     	; 0x98c <__stack+0x8d>
     92e:	27 c0       	rjmp	.+78     	; 0x97e <__stack+0x7f>
     930:	84 0c       	add	r8, r4
     932:	95 1c       	adc	r9, r5
     934:	a6 1c       	adc	r10, r6
     936:	b7 1c       	adc	r11, r7

	if (_FS_32ONLY || (_FS_FAT32 && fmt == FS_FAT32))
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
     938:	0d a1       	ldd	r16, Y+37	; 0x25
     93a:	1e a1       	ldd	r17, Y+38	; 0x26
     93c:	2f a1       	ldd	r18, Y+39	; 0x27
     93e:	38 a5       	ldd	r19, Y+40	; 0x28
     940:	80 0e       	add	r8, r16
     942:	91 1e       	adc	r9, r17
     944:	a2 1e       	adc	r10, r18
     946:	b3 1e       	adc	r11, r19
     948:	d7 01       	movw	r26, r14
     94a:	52 96       	adiw	r26, 0x12	; 18
     94c:	8d 92       	st	X+, r8
     94e:	9d 92       	st	X+, r9
     950:	ad 92       	st	X+, r10
     952:	bc 92       	st	X, r11
     954:	55 97       	sbiw	r26, 0x15	; 21

	fs->flag = 0;
     956:	11 96       	adiw	r26, 0x01	; 1
     958:	1c 92       	st	X, r1
	FatFs = fs;
     95a:	f0 92 54 01 	sts	0x0154, r15
     95e:	e0 92 53 01 	sts	0x0153, r14

	return FR_OK;
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	36 c0       	rjmp	.+108    	; 0x9d2 <__stack+0xd3>


	FatFs = 0;

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
		return FR_NOT_READY;
     966:	82 e0       	ldi	r24, 0x02	; 2
     968:	34 c0       	rjmp	.+104    	; 0x9d2 <__stack+0xd3>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	32 c0       	rjmp	.+100    	; 0x9d2 <__stack+0xd3>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
     96e:	86 e0       	ldi	r24, 0x06	; 6
     970:	30 c0       	rjmp	.+96     	; 0x9d2 <__stack+0xd3>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	2e c0       	rjmp	.+92     	; 0x9d2 <__stack+0xd3>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
     976:	86 e0       	ldi	r24, 0x06	; 6
     978:	2c c0       	rjmp	.+88     	; 0x9d2 <__stack+0xd3>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	2a c0       	rjmp	.+84     	; 0x9d2 <__stack+0xd3>
	fmt = 0;							/* Determine the FAT sub type */
	if (_FS_FAT12 && mclst < 0xFF7)
		fmt = FS_FAT12;
	if (_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7)
		fmt = FS_FAT16;
	if (_FS_FAT32 && mclst >= 0xFFF7)
     97e:	87 3f       	cpi	r24, 0xF7	; 247
     980:	9f 4f       	sbci	r25, 0xFF	; 255
     982:	a1 05       	cpc	r26, r1
     984:	b1 05       	cpc	r27, r1
     986:	38 f4       	brcc	.+14     	; 0x996 <__stack+0x97>
		fmt = FS_FAT32;
	if (!fmt) return FR_NO_FILESYSTEM;
     988:	86 e0       	ldi	r24, 0x06	; 6
     98a:	23 c0       	rjmp	.+70     	; 0x9d2 <__stack+0xd3>
	fmt = 0;							/* Determine the FAT sub type */
	if (_FS_FAT12 && mclst < 0xFF7)
		fmt = FS_FAT12;
	if (_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7)
		fmt = FS_FAT16;
	if (_FS_FAT32 && mclst >= 0xFFF7)
     98c:	87 3f       	cpi	r24, 0xF7	; 247
     98e:	9f 4f       	sbci	r25, 0xFF	; 255
     990:	a1 05       	cpc	r26, r1
     992:	b1 05       	cpc	r27, r1
     994:	68 f0       	brcs	.+26     	; 0x9b0 <__stack+0xb1>
		fmt = FS_FAT32;
	if (!fmt) return FR_NO_FILESYSTEM;
	fs->fs_type = fmt;
     996:	83 e0       	ldi	r24, 0x03	; 3
     998:	d7 01       	movw	r26, r14
     99a:	8c 93       	st	X, r24

	if (_FS_32ONLY || (_FS_FAT32 && fmt == FS_FAT32))
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
     99c:	88 a1       	ldd	r24, Y+32	; 0x20
     99e:	99 a1       	ldd	r25, Y+33	; 0x21
     9a0:	aa a1       	ldd	r26, Y+34	; 0x22
     9a2:	bb a1       	ldd	r27, Y+35	; 0x23
     9a4:	f7 01       	movw	r30, r14
     9a6:	86 87       	std	Z+14, r24	; 0x0e
     9a8:	97 87       	std	Z+15, r25	; 0x0f
     9aa:	a0 8b       	std	Z+16, r26	; 0x10
     9ac:	b1 8b       	std	Z+17, r27	; 0x11
     9ae:	c0 cf       	rjmp	.-128    	; 0x930 <__stack+0x31>
	if (_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7)
		fmt = FS_FAT16;
	if (_FS_FAT32 && mclst >= 0xFFF7)
		fmt = FS_FAT32;
	if (!fmt) return FR_NO_FILESYSTEM;
	fs->fs_type = fmt;
     9b0:	82 e0       	ldi	r24, 0x02	; 2
     9b2:	d7 01       	movw	r26, r14
     9b4:	8c 93       	st	X, r24

	if (_FS_32ONLY || (_FS_FAT32 && fmt == FS_FAT32))
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
     9b6:	8d a1       	ldd	r24, Y+37	; 0x25
     9b8:	9e a1       	ldd	r25, Y+38	; 0x26
     9ba:	af a1       	ldd	r26, Y+39	; 0x27
     9bc:	b8 a5       	ldd	r27, Y+40	; 0x28
     9be:	88 0d       	add	r24, r8
     9c0:	99 1d       	adc	r25, r9
     9c2:	aa 1d       	adc	r26, r10
     9c4:	bb 1d       	adc	r27, r11
     9c6:	f7 01       	movw	r30, r14
     9c8:	86 87       	std	Z+14, r24	; 0x0e
     9ca:	97 87       	std	Z+15, r25	; 0x0f
     9cc:	a0 8b       	std	Z+16, r26	; 0x10
     9ce:	b1 8b       	std	Z+17, r27	; 0x11
     9d0:	af cf       	rjmp	.-162    	; 0x930 <__stack+0x31>

	fs->flag = 0;
	FatFs = fs;

	return FR_OK;
}
     9d2:	a8 96       	adiw	r28, 0x28	; 40
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	de bf       	out	0x3e, r29	; 62
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	cd bf       	out	0x3d, r28	; 61
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	bf 90       	pop	r11
     9ec:	af 90       	pop	r10
     9ee:	9f 90       	pop	r9
     9f0:	8f 90       	pop	r8
     9f2:	7f 90       	pop	r7
     9f4:	6f 90       	pop	r6
     9f6:	5f 90       	pop	r5
     9f8:	4f 90       	pop	r4
     9fa:	08 95       	ret

000009fc <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
     9fc:	2f 92       	push	r2
     9fe:	3f 92       	push	r3
     a00:	4f 92       	push	r4
     a02:	5f 92       	push	r5
     a04:	6f 92       	push	r6
     a06:	7f 92       	push	r7
     a08:	8f 92       	push	r8
     a0a:	9f 92       	push	r9
     a0c:	af 92       	push	r10
     a0e:	bf 92       	push	r11
     a10:	cf 92       	push	r12
     a12:	df 92       	push	r13
     a14:	ef 92       	push	r14
     a16:	ff 92       	push	r15
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	cd b7       	in	r28, 0x3d	; 61
     a22:	de b7       	in	r29, 0x3e	; 62
     a24:	ec 97       	sbiw	r28, 0x3c	; 60
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	f8 94       	cli
     a2a:	de bf       	out	0x3e, r29	; 62
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	cd bf       	out	0x3d, r28	; 61
     a30:	6c 01       	movw	r12, r24
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
     a32:	a0 90 53 01 	lds	r10, 0x0153
     a36:	b0 90 54 01 	lds	r11, 0x0154


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     a3a:	a1 14       	cp	r10, r1
     a3c:	b1 04       	cpc	r11, r1
     a3e:	09 f4       	brne	.+2      	; 0xa42 <pf_open+0x46>
     a40:	55 c1       	rjmp	.+682    	; 0xcec <pf_open+0x2f0>

	fs->flag = 0;
     a42:	f5 01       	movw	r30, r10
     a44:	11 82       	std	Z+1, r1	; 0x01
	dj.fn = sp;
     a46:	ce 01       	movw	r24, r28
     a48:	41 96       	adiw	r24, 0x11	; 17
     a4a:	9c 83       	std	Y+4, r25	; 0x04
     a4c:	8b 83       	std	Y+3, r24	; 0x03
)
{
	FRESULT res;


	while (*path == ' ') path++;		/* Strip leading spaces */
     a4e:	f6 01       	movw	r30, r12
     a50:	80 81       	ld	r24, Z
     a52:	80 32       	cpi	r24, 0x20	; 32
     a54:	29 f4       	brne	.+10     	; 0xa60 <pf_open+0x64>
     a56:	31 96       	adiw	r30, 0x01	; 1
     a58:	6f 01       	movw	r12, r30
     a5a:	81 91       	ld	r24, Z+
     a5c:	80 32       	cpi	r24, 0x20	; 32
     a5e:	e1 f3       	breq	.-8      	; 0xa58 <pf_open+0x5c>
	if (*path == '/') path++;			/* Strip heading separator if exist */
     a60:	8f 32       	cpi	r24, 0x2F	; 47
     a62:	19 f4       	brne	.+6      	; 0xa6a <pf_open+0x6e>
     a64:	ff ef       	ldi	r31, 0xFF	; 255
     a66:	cf 1a       	sub	r12, r31
     a68:	df 0a       	sbc	r13, r31
	dj->sclust = 0;						/* Set start directory (always root dir) */
     a6a:	1d 82       	std	Y+5, r1	; 0x05
     a6c:	1e 82       	std	Y+6, r1	; 0x06
     a6e:	1f 82       	std	Y+7, r1	; 0x07
     a70:	18 86       	std	Y+8, r1	; 0x08

	if ((BYTE)*path < ' ') {			/* Null path means the root directory */
     a72:	f6 01       	movw	r30, r12
     a74:	80 81       	ld	r24, Z
     a76:	80 32       	cpi	r24, 0x20	; 32
     a78:	38 f4       	brcc	.+14     	; 0xa88 <pf_open+0x8c>
		res = dir_rewind(dj);
     a7a:	ce 01       	movw	r24, r28
     a7c:	01 96       	adiw	r24, 0x01	; 1
     a7e:	0e 94 97 02 	call	0x52e	; 0x52e <dir_rewind>
     a82:	98 2f       	mov	r25, r24
		dir[0] = 0;
     a84:	1d 8e       	std	Y+29, r1	; 0x1d
     a86:	fb c0       	rjmp	.+502    	; 0xc7e <pf_open+0x282>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     a88:	68 94       	set
     a8a:	ff 24       	eor	r15, r15
     a8c:	f5 f8       	bld	r15, 5
     a8e:	61 2c       	mov	r6, r1
     a90:	68 94       	set
     a92:	44 24       	eor	r4, r4
     a94:	43 f8       	bld	r4, 3
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
			i = 8; ni = 11;
     a96:	34 2c       	mov	r3, r4
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
     a98:	55 24       	eor	r5, r5
     a9a:	53 94       	inc	r5
	res = dir_rewind(dj);			/* Rewind directory object */
	if (res != FR_OK) return res;

	do {
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
     a9c:	e5 2c       	mov	r14, r5
     a9e:	76 2c       	mov	r7, r6
CLUST get_clust (
	BYTE* dir		/* Pointer to directory entry */
)
{
	FATFS *fs = FatFs;
	CLUST clst = 0;
     aa0:	21 2c       	mov	r2, r1
	static const BYTE cvt[] = _EXCVT;
#endif
#endif

	/* Create file name in directory form */
	sfn = dj->fn;
     aa2:	ab 81       	ldd	r26, Y+3	; 0x03
     aa4:	bc 81       	ldd	r27, Y+4	; 0x04
     aa6:	fd 01       	movw	r30, r26
     aa8:	cd 01       	movw	r24, r26
     aaa:	0b 96       	adiw	r24, 0x0b	; 11

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     aac:	f1 92       	st	Z+, r15
     aae:	e8 17       	cp	r30, r24
     ab0:	f9 07       	cpc	r31, r25
     ab2:	e1 f7       	brne	.-8      	; 0xaac <pf_open+0xb0>
     ab4:	96 2d       	mov	r25, r6
     ab6:	86 2d       	mov	r24, r6
     ab8:	34 2d       	mov	r19, r4
     aba:	01 c0       	rjmp	.+2      	; 0xabe <pf_open+0xc2>
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
     abc:	82 2f       	mov	r24, r18
     abe:	21 e0       	ldi	r18, 0x01	; 1
     ac0:	28 0f       	add	r18, r24
     ac2:	f6 01       	movw	r30, r12
     ac4:	e8 0f       	add	r30, r24
     ac6:	f1 1d       	adc	r31, r1
     ac8:	80 81       	ld	r24, Z
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
     aca:	81 32       	cpi	r24, 0x21	; 33
     acc:	68 f0       	brcs	.+26     	; 0xae8 <pf_open+0xec>
     ace:	8f 32       	cpi	r24, 0x2F	; 47
     ad0:	59 f0       	breq	.+22     	; 0xae8 <pf_open+0xec>
		if (c == '.' || i >= ni) {
     ad2:	8e 32       	cpi	r24, 0x2E	; 46
     ad4:	09 f4       	brne	.+2      	; 0xad8 <pf_open+0xdc>
     ad6:	12 c1       	rjmp	.+548    	; 0xcfc <pf_open+0x300>
     ad8:	93 17       	cp	r25, r19
     ada:	30 f4       	brcc	.+12     	; 0xae8 <pf_open+0xec>
			sfn[i++] = d;
		} else
#endif
		{						/* Single byte code */
			if (_USE_LCC && IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
     adc:	fd 01       	movw	r30, r26
     ade:	e9 0f       	add	r30, r25
     ae0:	f1 1d       	adc	r31, r1
     ae2:	80 83       	st	Z, r24
     ae4:	9f 5f       	subi	r25, 0xFF	; 255
     ae6:	ea cf       	rjmp	.-44     	; 0xabc <pf_open+0xc0>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
     ae8:	c2 0e       	add	r12, r18
     aea:	d1 1c       	adc	r13, r1

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
     aec:	95 2d       	mov	r25, r5
     aee:	81 32       	cpi	r24, 0x21	; 33
     af0:	08 f0       	brcs	.+2      	; 0xaf4 <pf_open+0xf8>
     af2:	96 2d       	mov	r25, r6
     af4:	1b 96       	adiw	r26, 0x0b	; 11
     af6:	9c 93       	st	X, r25
{
	FRESULT res;
	BYTE c;


	res = dir_rewind(dj);			/* Rewind directory object */
     af8:	ce 01       	movw	r24, r28
     afa:	01 96       	adiw	r24, 0x01	; 1
     afc:	0e 94 97 02 	call	0x52e	; 0x52e <dir_rewind>
     b00:	98 2f       	mov	r25, r24
	if (res != FR_OK) return res;
     b02:	81 11       	cpse	r24, r1
     b04:	bc c0       	rjmp	.+376    	; 0xc7e <pf_open+0x282>

	do {
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
     b06:	29 81       	ldd	r18, Y+1	; 0x01
     b08:	3a 81       	ldd	r19, Y+2	; 0x02
     b0a:	2f 70       	andi	r18, 0x0F	; 15
     b0c:	33 27       	eor	r19, r19
     b0e:	22 0f       	add	r18, r18
     b10:	33 1f       	adc	r19, r19
     b12:	22 95       	swap	r18
     b14:	32 95       	swap	r19
     b16:	30 7f       	andi	r19, 0xF0	; 240
     b18:	32 27       	eor	r19, r18
     b1a:	20 7f       	andi	r18, 0xF0	; 240
     b1c:	32 27       	eor	r19, r18
     b1e:	4d 85       	ldd	r20, Y+13	; 0x0d
     b20:	5e 85       	ldd	r21, Y+14	; 0x0e
     b22:	6f 85       	ldd	r22, Y+15	; 0x0f
     b24:	78 89       	ldd	r23, Y+16	; 0x10
     b26:	00 e2       	ldi	r16, 0x20	; 32
     b28:	10 e0       	ldi	r17, 0x00	; 0
     b2a:	ce 01       	movw	r24, r28
     b2c:	4d 96       	adiw	r24, 0x1d	; 29
     b2e:	0e 94 15 02 	call	0x42a	; 0x42a <disk_readp>
			? FR_DISK_ERR : FR_OK;
     b32:	9e 2d       	mov	r25, r14
     b34:	81 11       	cpse	r24, r1
     b36:	01 c0       	rjmp	.+2      	; 0xb3a <pf_open+0x13e>
     b38:	97 2d       	mov	r25, r7
		if (res != FR_OK) break;
     b3a:	91 11       	cpse	r25, r1
     b3c:	a0 c0       	rjmp	.+320    	; 0xc7e <pf_open+0x282>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
     b3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b40:	88 23       	and	r24, r24
     b42:	09 f4       	brne	.+2      	; 0xb46 <pf_open+0x14a>
     b44:	eb c0       	rjmp	.+470    	; 0xd1c <pf_open+0x320>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
     b46:	68 a5       	ldd	r22, Y+40	; 0x28
     b48:	63 fd       	sbrc	r22, 3
     b4a:	11 c0       	rjmp	.+34     	; 0xb6e <pf_open+0x172>
     b4c:	4b 81       	ldd	r20, Y+3	; 0x03
     b4e:	5c 81       	ldd	r21, Y+4	; 0x04
     b50:	de 01       	movw	r26, r28
     b52:	5d 96       	adiw	r26, 0x1d	; 29
     b54:	fa 01       	movw	r30, r20
     b56:	9a 01       	movw	r18, r20
     b58:	25 5f       	subi	r18, 0xF5	; 245
     b5a:	3f 4f       	sbci	r19, 0xFF	; 255
     b5c:	04 c0       	rjmp	.+8      	; 0xb66 <pf_open+0x16a>
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
     b5e:	e2 17       	cp	r30, r18
     b60:	f3 07       	cpc	r31, r19
     b62:	09 f4       	brne	.+2      	; 0xb66 <pf_open+0x16a>
     b64:	66 c0       	rjmp	.+204    	; 0xc32 <pf_open+0x236>
     b66:	9d 91       	ld	r25, X+
     b68:	81 91       	ld	r24, Z+
     b6a:	98 17       	cp	r25, r24
     b6c:	c1 f3       	breq	.-16     	; 0xb5e <pf_open+0x162>
	DIR *dj			/* Pointer to directory object */
)
{
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
     b6e:	80 90 53 01 	lds	r8, 0x0153
     b72:	90 90 54 01 	lds	r9, 0x0154


	i = dj->index + 1;
     b76:	09 81       	ldd	r16, Y+1	; 0x01
     b78:	1a 81       	ldd	r17, Y+2	; 0x02
     b7a:	0f 5f       	subi	r16, 0xFF	; 255
     b7c:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
     b7e:	09 f4       	brne	.+2      	; 0xb82 <pf_open+0x186>
     b80:	c3 c0       	rjmp	.+390    	; 0xd08 <pf_open+0x30c>
     b82:	8d 85       	ldd	r24, Y+13	; 0x0d
     b84:	9e 85       	ldd	r25, Y+14	; 0x0e
     b86:	af 85       	ldd	r26, Y+15	; 0x0f
     b88:	b8 89       	ldd	r27, Y+16	; 0x10
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	a1 05       	cpc	r26, r1
     b8e:	b1 05       	cpc	r27, r1
     b90:	09 f4       	brne	.+2      	; 0xb94 <pf_open+0x198>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <pf_open+0x310>
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
     b94:	98 01       	movw	r18, r16
     b96:	2f 70       	andi	r18, 0x0F	; 15
     b98:	33 27       	eor	r19, r19
     b9a:	23 2b       	or	r18, r19
     b9c:	09 f0       	breq	.+2      	; 0xba0 <pf_open+0x1a4>
     b9e:	46 c0       	rjmp	.+140    	; 0xc2c <pf_open+0x230>
		dj->sect++;			/* Next sector */
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	a1 1d       	adc	r26, r1
     ba4:	b1 1d       	adc	r27, r1
     ba6:	8d 87       	std	Y+13, r24	; 0x0d
     ba8:	9e 87       	std	Y+14, r25	; 0x0e
     baa:	af 87       	std	Y+15, r26	; 0x0f
     bac:	b8 8b       	std	Y+16, r27	; 0x10

		if (dj->clust == 0) {	/* Static table */
     bae:	49 85       	ldd	r20, Y+9	; 0x09
     bb0:	5a 85       	ldd	r21, Y+10	; 0x0a
     bb2:	6b 85       	ldd	r22, Y+11	; 0x0b
     bb4:	7c 85       	ldd	r23, Y+12	; 0x0c
     bb6:	41 15       	cp	r20, r1
     bb8:	51 05       	cpc	r21, r1
     bba:	61 05       	cpc	r22, r1
     bbc:	71 05       	cpc	r23, r1
     bbe:	41 f4       	brne	.+16     	; 0xbd0 <pf_open+0x1d4>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
     bc0:	f4 01       	movw	r30, r8
     bc2:	84 81       	ldd	r24, Z+4	; 0x04
     bc4:	95 81       	ldd	r25, Z+5	; 0x05
     bc6:	08 17       	cp	r16, r24
     bc8:	19 07       	cpc	r17, r25
     bca:	08 f0       	brcs	.+2      	; 0xbce <pf_open+0x1d2>
     bcc:	a1 c0       	rjmp	.+322    	; 0xd10 <pf_open+0x314>
     bce:	2e c0       	rjmp	.+92     	; 0xc2c <pf_open+0x230>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
     bd0:	f4 01       	movw	r30, r8
     bd2:	82 81       	ldd	r24, Z+2	; 0x02
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	01 97       	sbiw	r24, 0x01	; 1
     bd8:	98 01       	movw	r18, r16
     bda:	32 95       	swap	r19
     bdc:	22 95       	swap	r18
     bde:	2f 70       	andi	r18, 0x0F	; 15
     be0:	23 27       	eor	r18, r19
     be2:	3f 70       	andi	r19, 0x0F	; 15
     be4:	23 27       	eor	r18, r19
     be6:	82 23       	and	r24, r18
     be8:	93 23       	and	r25, r19
     bea:	89 2b       	or	r24, r25
     bec:	f9 f4       	brne	.+62     	; 0xc2c <pf_open+0x230>
				clst = get_fat(dj->clust);		/* Get next cluster */
     bee:	cb 01       	movw	r24, r22
     bf0:	ba 01       	movw	r22, r20
     bf2:	0e 94 39 03 	call	0x672	; 0x672 <get_fat>
				if (clst <= 1) return FR_DISK_ERR;
     bf6:	62 30       	cpi	r22, 0x02	; 2
     bf8:	71 05       	cpc	r23, r1
     bfa:	81 05       	cpc	r24, r1
     bfc:	91 05       	cpc	r25, r1
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <pf_open+0x206>
     c00:	89 c0       	rjmp	.+274    	; 0xd14 <pf_open+0x318>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
     c02:	f4 01       	movw	r30, r8
     c04:	26 81       	ldd	r18, Z+6	; 0x06
     c06:	37 81       	ldd	r19, Z+7	; 0x07
     c08:	40 85       	ldd	r20, Z+8	; 0x08
     c0a:	51 85       	ldd	r21, Z+9	; 0x09
     c0c:	62 17       	cp	r22, r18
     c0e:	73 07       	cpc	r23, r19
     c10:	84 07       	cpc	r24, r20
     c12:	95 07       	cpc	r25, r21
     c14:	08 f0       	brcs	.+2      	; 0xc18 <pf_open+0x21c>
     c16:	80 c0       	rjmp	.+256    	; 0xd18 <pf_open+0x31c>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
     c18:	69 87       	std	Y+9, r22	; 0x09
     c1a:	7a 87       	std	Y+10, r23	; 0x0a
     c1c:	8b 87       	std	Y+11, r24	; 0x0b
     c1e:	9c 87       	std	Y+12, r25	; 0x0c
				dj->sect = clust2sect(clst);
     c20:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <clust2sect>
     c24:	6d 87       	std	Y+13, r22	; 0x0d
     c26:	7e 87       	std	Y+14, r23	; 0x0e
     c28:	8f 87       	std	Y+15, r24	; 0x0f
     c2a:	98 8b       	std	Y+16, r25	; 0x10
			}
		}
	}

	dj->index = i;
     c2c:	1a 83       	std	Y+2, r17	; 0x02
     c2e:	09 83       	std	Y+1, r16	; 0x01
     c30:	6a cf       	rjmp	.-300    	; 0xb06 <pf_open+0x10a>
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) break;		/* Could not find the object */
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
     c32:	fa 01       	movw	r30, r20
     c34:	83 85       	ldd	r24, Z+11	; 0x0b
     c36:	81 11       	cpse	r24, r1
     c38:	24 c0       	rjmp	.+72     	; 0xc82 <pf_open+0x286>
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
     c3a:	64 ff       	sbrs	r22, 4
     c3c:	71 c0       	rjmp	.+226    	; 0xd20 <pf_open+0x324>
{
	FATFS *fs = FatFs;
	CLUST clst = 0;


	if (_FS_32ONLY || (_FS_FAT32 && fs->fs_type == FS_FAT32)) {
     c3e:	e0 91 53 01 	lds	r30, 0x0153
     c42:	f0 91 54 01 	lds	r31, 0x0154
     c46:	80 81       	ld	r24, Z
     c48:	83 30       	cpi	r24, 0x03	; 3
     c4a:	41 f4       	brne	.+16     	; 0xc5c <pf_open+0x260>
		clst = LD_WORD(dir+DIR_FstClusHI);
     c4c:	89 a9       	ldd	r24, Y+49	; 0x31
     c4e:	9a a9       	ldd	r25, Y+50	; 0x32
     c50:	a0 e0       	ldi	r26, 0x00	; 0
     c52:	b0 e0       	ldi	r27, 0x00	; 0
		clst <<= 16;
     c54:	dc 01       	movw	r26, r24
     c56:	99 27       	eor	r25, r25
     c58:	88 27       	eor	r24, r24
     c5a:	04 c0       	rjmp	.+8      	; 0xc64 <pf_open+0x268>
CLUST get_clust (
	BYTE* dir		/* Pointer to directory entry */
)
{
	FATFS *fs = FatFs;
	CLUST clst = 0;
     c5c:	82 2d       	mov	r24, r2
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	a0 e0       	ldi	r26, 0x00	; 0
     c62:	b0 e0       	ldi	r27, 0x00	; 0

	if (_FS_32ONLY || (_FS_FAT32 && fs->fs_type == FS_FAT32)) {
		clst = LD_WORD(dir+DIR_FstClusHI);
		clst <<= 16;
	}
	clst |= LD_WORD(dir+DIR_FstClusLO);
     c64:	4f a9       	ldd	r20, Y+55	; 0x37
     c66:	58 ad       	ldd	r21, Y+56	; 0x38
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	84 2b       	or	r24, r20
     c6e:	95 2b       	or	r25, r21
     c70:	a6 2b       	or	r26, r22
     c72:	b7 2b       	or	r27, r23
			if (res != FR_OK) break;		/* Could not find the object */
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
				res = FR_NO_FILE; break;
			}
			dj->sclust = get_clust(dir);	/* Follow next */
     c74:	8d 83       	std	Y+5, r24	; 0x05
     c76:	9e 83       	std	Y+6, r25	; 0x06
     c78:	af 83       	std	Y+7, r26	; 0x07
     c7a:	b8 87       	std	Y+8, r27	; 0x08
     c7c:	12 cf       	rjmp	.-476    	; 0xaa2 <pf_open+0xa6>
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */

	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
     c7e:	91 11       	cpse	r25, r1
     c80:	37 c0       	rjmp	.+110    	; 0xcf0 <pf_open+0x2f4>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
     c82:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c84:	88 23       	and	r24, r24
     c86:	b1 f1       	breq	.+108    	; 0xcf4 <pf_open+0x2f8>
     c88:	88 a5       	ldd	r24, Y+40	; 0x28
     c8a:	84 fd       	sbrc	r24, 4
     c8c:	35 c0       	rjmp	.+106    	; 0xcf8 <pf_open+0x2fc>
{
	FATFS *fs = FatFs;
	CLUST clst = 0;


	if (_FS_32ONLY || (_FS_FAT32 && fs->fs_type == FS_FAT32)) {
     c8e:	e0 91 53 01 	lds	r30, 0x0153
     c92:	f0 91 54 01 	lds	r31, 0x0154
     c96:	80 81       	ld	r24, Z
     c98:	83 30       	cpi	r24, 0x03	; 3
     c9a:	41 f4       	brne	.+16     	; 0xcac <pf_open+0x2b0>
		clst = LD_WORD(dir+DIR_FstClusHI);
     c9c:	89 a9       	ldd	r24, Y+49	; 0x31
     c9e:	9a a9       	ldd	r25, Y+50	; 0x32
     ca0:	a0 e0       	ldi	r26, 0x00	; 0
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
		clst <<= 16;
     ca4:	dc 01       	movw	r26, r24
     ca6:	99 27       	eor	r25, r25
     ca8:	88 27       	eor	r24, r24
     caa:	03 c0       	rjmp	.+6      	; 0xcb2 <pf_open+0x2b6>
CLUST get_clust (
	BYTE* dir		/* Pointer to directory entry */
)
{
	FATFS *fs = FatFs;
	CLUST clst = 0;
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	dc 01       	movw	r26, r24

	if (_FS_32ONLY || (_FS_FAT32 && fs->fs_type == FS_FAT32)) {
		clst = LD_WORD(dir+DIR_FstClusHI);
		clst <<= 16;
	}
	clst |= LD_WORD(dir+DIR_FstClusLO);
     cb2:	4f a9       	ldd	r20, Y+55	; 0x37
     cb4:	58 ad       	ldd	r21, Y+56	; 0x38
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	84 2b       	or	r24, r20
     cbc:	95 2b       	or	r25, r21
     cbe:	a6 2b       	or	r26, r22
     cc0:	b7 2b       	or	r27, r23
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
		return FR_NO_FILE;

	fs->org_clust = get_clust(dir);		/* File start cluster */
     cc2:	f5 01       	movw	r30, r10
     cc4:	86 8f       	std	Z+30, r24	; 0x1e
     cc6:	97 8f       	std	Z+31, r25	; 0x1f
     cc8:	a0 a3       	std	Z+32, r26	; 0x20
     cca:	b1 a3       	std	Z+33, r27	; 0x21
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
     ccc:	89 ad       	ldd	r24, Y+57	; 0x39
     cce:	9a ad       	ldd	r25, Y+58	; 0x3a
     cd0:	ab ad       	ldd	r26, Y+59	; 0x3b
     cd2:	bc ad       	ldd	r27, Y+60	; 0x3c
     cd4:	82 8f       	std	Z+26, r24	; 0x1a
     cd6:	93 8f       	std	Z+27, r25	; 0x1b
     cd8:	a4 8f       	std	Z+28, r26	; 0x1c
     cda:	b5 8f       	std	Z+29, r27	; 0x1d
	fs->fptr = 0;						/* File pointer */
     cdc:	16 8a       	std	Z+22, r1	; 0x16
     cde:	17 8a       	std	Z+23, r1	; 0x17
     ce0:	10 8e       	std	Z+24, r1	; 0x18
     ce2:	11 8e       	std	Z+25, r1	; 0x19
	fs->flag = FA_OPENED;
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	81 83       	std	Z+1, r24	; 0x01

	return FR_OK;
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	1b c0       	rjmp	.+54     	; 0xd22 <pf_open+0x326>
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     cec:	85 e0       	ldi	r24, 0x05	; 5
     cee:	19 c0       	rjmp	.+50     	; 0xd22 <pf_open+0x326>
     cf0:	89 2f       	mov	r24, r25
     cf2:	17 c0       	rjmp	.+46     	; 0xd22 <pf_open+0x326>
	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
		return FR_NO_FILE;
     cf4:	83 e0       	ldi	r24, 0x03	; 3
     cf6:	15 c0       	rjmp	.+42     	; 0xd22 <pf_open+0x326>
     cf8:	83 e0       	ldi	r24, 0x03	; 3
     cfa:	13 c0       	rjmp	.+38     	; 0xd22 <pf_open+0x326>
	p = *path;
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
     cfc:	38 30       	cpi	r19, 0x08	; 8
     cfe:	09 f0       	breq	.+2      	; 0xd02 <pf_open+0x306>
     d00:	f3 ce       	rjmp	.-538    	; 0xae8 <pf_open+0xec>
			i = 8; ni = 11;
     d02:	93 2d       	mov	r25, r3
     d04:	3b e0       	ldi	r19, 0x0B	; 11
     d06:	da ce       	rjmp	.-588    	; 0xabc <pf_open+0xc0>
	FATFS *fs = FatFs;


	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
     d08:	83 e0       	ldi	r24, 0x03	; 3
     d0a:	0b c0       	rjmp	.+22     	; 0xd22 <pf_open+0x326>
     d0c:	83 e0       	ldi	r24, 0x03	; 3
     d0e:	09 c0       	rjmp	.+18     	; 0xd22 <pf_open+0x326>
	if (!(i % 16)) {		/* Sector changed? */
		dj->sect++;			/* Next sector */

		if (dj->clust == 0) {	/* Static table */
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
     d10:	83 e0       	ldi	r24, 0x03	; 3
     d12:	07 c0       	rjmp	.+14     	; 0xd22 <pf_open+0x326>
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	05 c0       	rjmp	.+10     	; 0xd22 <pf_open+0x326>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
					return FR_NO_FILE;			/* Report EOT */
     d18:	83 e0       	ldi	r24, 0x03	; 3
     d1a:	03 c0       	rjmp	.+6      	; 0xd22 <pf_open+0x326>
	do {
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
     d1c:	93 e0       	ldi	r25, 0x03	; 3
     d1e:	af cf       	rjmp	.-162    	; 0xc7e <pf_open+0x282>
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) break;		/* Could not find the object */
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
				res = FR_NO_FILE; break;
     d20:	83 e0       	ldi	r24, 0x03	; 3
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
	fs->fptr = 0;						/* File pointer */
	fs->flag = FA_OPENED;

	return FR_OK;
}
     d22:	ec 96       	adiw	r28, 0x3c	; 60
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	ff 90       	pop	r15
     d38:	ef 90       	pop	r14
     d3a:	df 90       	pop	r13
     d3c:	cf 90       	pop	r12
     d3e:	bf 90       	pop	r11
     d40:	af 90       	pop	r10
     d42:	9f 90       	pop	r9
     d44:	8f 90       	pop	r8
     d46:	7f 90       	pop	r7
     d48:	6f 90       	pop	r6
     d4a:	5f 90       	pop	r5
     d4c:	4f 90       	pop	r4
     d4e:	3f 90       	pop	r3
     d50:	2f 90       	pop	r2
     d52:	08 95       	ret

00000d54 <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
     d54:	2f 92       	push	r2
     d56:	3f 92       	push	r3
     d58:	4f 92       	push	r4
     d5a:	5f 92       	push	r5
     d5c:	6f 92       	push	r6
     d5e:	7f 92       	push	r7
     d60:	8f 92       	push	r8
     d62:	9f 92       	push	r9
     d64:	af 92       	push	r10
     d66:	bf 92       	push	r11
     d68:	cf 92       	push	r12
     d6a:	df 92       	push	r13
     d6c:	ef 92       	push	r14
     d6e:	ff 92       	push	r15
     d70:	0f 93       	push	r16
     d72:	1f 93       	push	r17
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	2c 01       	movw	r4, r24
     d7a:	6b 01       	movw	r12, r22
     d7c:	3a 01       	movw	r6, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	UINT rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;
     d7e:	e0 90 53 01 	lds	r14, 0x0153
     d82:	f0 90 54 01 	lds	r15, 0x0154


	*br = 0;
     d86:	fa 01       	movw	r30, r20
     d88:	11 82       	std	Z+1, r1	; 0x01
     d8a:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     d8c:	e1 14       	cp	r14, r1
     d8e:	f1 04       	cpc	r15, r1
     d90:	09 f4       	brne	.+2      	; 0xd94 <pf_read+0x40>
     d92:	bb c0       	rjmp	.+374    	; 0xf0a <pf_read+0x1b6>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
     d94:	f7 01       	movw	r30, r14
     d96:	81 81       	ldd	r24, Z+1	; 0x01
     d98:	80 ff       	sbrs	r24, 0
     d9a:	b9 c0       	rjmp	.+370    	; 0xf0e <pf_read+0x1ba>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
     d9c:	82 8d       	ldd	r24, Z+26	; 0x1a
     d9e:	93 8d       	ldd	r25, Z+27	; 0x1b
     da0:	a4 8d       	ldd	r26, Z+28	; 0x1c
     da2:	b5 8d       	ldd	r27, Z+29	; 0x1d
     da4:	46 89       	ldd	r20, Z+22	; 0x16
     da6:	57 89       	ldd	r21, Z+23	; 0x17
     da8:	60 8d       	ldd	r22, Z+24	; 0x18
     daa:	71 8d       	ldd	r23, Z+25	; 0x19
     dac:	84 1b       	sub	r24, r20
     dae:	95 0b       	sbc	r25, r21
     db0:	a6 0b       	sbc	r26, r22
     db2:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
     db4:	a6 01       	movw	r20, r12
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	84 17       	cp	r24, r20
     dbc:	95 07       	cpc	r25, r21
     dbe:	a6 07       	cpc	r26, r22
     dc0:	b7 07       	cpc	r27, r23
     dc2:	08 f4       	brcc	.+2      	; 0xdc6 <pf_read+0x72>
     dc4:	6c 01       	movw	r12, r24

	while (btr)	{									/* Repeat until all data transferred */
     dc6:	c1 14       	cp	r12, r1
     dc8:	d1 04       	cpc	r13, r1
     dca:	09 f4       	brne	.+2      	; 0xdce <pf_read+0x7a>
     dcc:	a2 c0       	rjmp	.+324    	; 0xf12 <pf_read+0x1be>
     dce:	52 01       	movw	r10, r4
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) ABORT(FR_DISK_ERR);
			fs->dsect = sect + cs;
		}
		rcnt = 512 - (UINT)fs->fptr % 512;			/* Get partial sector data from sector buffer */
     dd0:	81 2c       	mov	r8, r1
     dd2:	68 94       	set
     dd4:	99 24       	eor	r9, r9
     dd6:	91 f8       	bld	r9, 1
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
     dd8:	31 2c       	mov	r3, r1
     dda:	21 2c       	mov	r2, r1

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
     ddc:	f7 01       	movw	r30, r14
     dde:	86 89       	ldd	r24, Z+22	; 0x16
     de0:	97 89       	ldd	r25, Z+23	; 0x17
     de2:	a0 8d       	ldd	r26, Z+24	; 0x18
     de4:	b1 8d       	ldd	r27, Z+25	; 0x19
     de6:	ac 01       	movw	r20, r24
     de8:	bd 01       	movw	r22, r26
     dea:	51 70       	andi	r21, 0x01	; 1
     dec:	66 27       	eor	r22, r22
     dee:	77 27       	eor	r23, r23
     df0:	45 2b       	or	r20, r21
     df2:	46 2b       	or	r20, r22
     df4:	47 2b       	or	r20, r23
     df6:	09 f0       	breq	.+2      	; 0xdfa <pf_read+0xa6>
     df8:	48 c0       	rjmp	.+144    	; 0xe8a <pf_read+0x136>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
     dfa:	c2 81       	ldd	r28, Z+2	; 0x02
     dfc:	c1 50       	subi	r28, 0x01	; 1
     dfe:	ac 01       	movw	r20, r24
     e00:	bd 01       	movw	r22, r26
     e02:	03 2e       	mov	r0, r19
     e04:	39 e0       	ldi	r19, 0x09	; 9
     e06:	76 95       	lsr	r23
     e08:	67 95       	ror	r22
     e0a:	57 95       	ror	r21
     e0c:	47 95       	ror	r20
     e0e:	3a 95       	dec	r19
     e10:	d1 f7       	brne	.-12     	; 0xe06 <pf_read+0xb2>
     e12:	30 2d       	mov	r19, r0
     e14:	c4 23       	and	r28, r20
			if (!cs) {								/* On the cluster boundary? */
     e16:	f1 f4       	brne	.+60     	; 0xe54 <pf_read+0x100>
				if (fs->fptr == 0)					/* On the top of the file? */
     e18:	89 2b       	or	r24, r25
     e1a:	8a 2b       	or	r24, r26
     e1c:	8b 2b       	or	r24, r27
     e1e:	29 f4       	brne	.+10     	; 0xe2a <pf_read+0xd6>
					clst = fs->org_clust;
     e20:	66 8d       	ldd	r22, Z+30	; 0x1e
     e22:	77 8d       	ldd	r23, Z+31	; 0x1f
     e24:	80 a1       	ldd	r24, Z+32	; 0x20
     e26:	91 a1       	ldd	r25, Z+33	; 0x21
     e28:	07 c0       	rjmp	.+14     	; 0xe38 <pf_read+0xe4>
				else
					clst = get_fat(fs->curr_clust);
     e2a:	f7 01       	movw	r30, r14
     e2c:	62 a1       	ldd	r22, Z+34	; 0x22
     e2e:	73 a1       	ldd	r23, Z+35	; 0x23
     e30:	84 a1       	ldd	r24, Z+36	; 0x24
     e32:	95 a1       	ldd	r25, Z+37	; 0x25
     e34:	0e 94 39 03 	call	0x672	; 0x672 <get_fat>
				if (clst <= 1) ABORT(FR_DISK_ERR);
     e38:	62 30       	cpi	r22, 0x02	; 2
     e3a:	71 05       	cpc	r23, r1
     e3c:	81 05       	cpc	r24, r1
     e3e:	91 05       	cpc	r25, r1
     e40:	20 f4       	brcc	.+8      	; 0xe4a <pf_read+0xf6>
     e42:	f7 01       	movw	r30, r14
     e44:	11 82       	std	Z+1, r1	; 0x01
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	65 c0       	rjmp	.+202    	; 0xf14 <pf_read+0x1c0>
				fs->curr_clust = clst;				/* Update current cluster */
     e4a:	f7 01       	movw	r30, r14
     e4c:	62 a3       	std	Z+34, r22	; 0x22
     e4e:	73 a3       	std	Z+35, r23	; 0x23
     e50:	84 a3       	std	Z+36, r24	; 0x24
     e52:	95 a3       	std	Z+37, r25	; 0x25
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
     e54:	f7 01       	movw	r30, r14
     e56:	62 a1       	ldd	r22, Z+34	; 0x22
     e58:	73 a1       	ldd	r23, Z+35	; 0x23
     e5a:	84 a1       	ldd	r24, Z+36	; 0x24
     e5c:	95 a1       	ldd	r25, Z+37	; 0x25
     e5e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <clust2sect>
			if (!sect) ABORT(FR_DISK_ERR);
     e62:	61 15       	cp	r22, r1
     e64:	71 05       	cpc	r23, r1
     e66:	81 05       	cpc	r24, r1
     e68:	91 05       	cpc	r25, r1
     e6a:	21 f4       	brne	.+8      	; 0xe74 <pf_read+0x120>
     e6c:	f7 01       	movw	r30, r14
     e6e:	11 82       	std	Z+1, r1	; 0x01
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	50 c0       	rjmp	.+160    	; 0xf14 <pf_read+0x1c0>
			fs->dsect = sect + cs;
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	8c 0f       	add	r24, r28
     e7a:	91 1d       	adc	r25, r1
     e7c:	a1 1d       	adc	r26, r1
     e7e:	b1 1d       	adc	r27, r1
     e80:	f7 01       	movw	r30, r14
     e82:	86 a3       	std	Z+38, r24	; 0x26
     e84:	97 a3       	std	Z+39, r25	; 0x27
     e86:	a0 a7       	std	Z+40, r26	; 0x28
     e88:	b1 a7       	std	Z+41, r27	; 0x29
		}
		rcnt = 512 - (UINT)fs->fptr % 512;			/* Get partial sector data from sector buffer */
     e8a:	f7 01       	movw	r30, r14
     e8c:	26 89       	ldd	r18, Z+22	; 0x16
     e8e:	37 89       	ldd	r19, Z+23	; 0x17
     e90:	31 70       	andi	r19, 0x01	; 1
     e92:	c4 01       	movw	r24, r8
     e94:	82 1b       	sub	r24, r18
     e96:	93 0b       	sbc	r25, r19
     e98:	e6 01       	movw	r28, r12
     e9a:	8c 15       	cp	r24, r12
     e9c:	9d 05       	cpc	r25, r13
     e9e:	08 f4       	brcc	.+2      	; 0xea2 <pf_read+0x14e>
     ea0:	ec 01       	movw	r28, r24
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
     ea2:	f7 01       	movw	r30, r14
     ea4:	46 a1       	ldd	r20, Z+38	; 0x26
     ea6:	57 a1       	ldd	r21, Z+39	; 0x27
     ea8:	60 a5       	ldd	r22, Z+40	; 0x28
     eaa:	71 a5       	ldd	r23, Z+41	; 0x29
     eac:	41 14       	cp	r4, r1
     eae:	51 04       	cpc	r5, r1
     eb0:	19 f0       	breq	.+6      	; 0xeb8 <pf_read+0x164>
     eb2:	8a 2d       	mov	r24, r10
     eb4:	9b 2d       	mov	r25, r11
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <pf_read+0x168>
     eb8:	83 2d       	mov	r24, r3
     eba:	92 2d       	mov	r25, r2
     ebc:	8e 01       	movw	r16, r28
     ebe:	0e 94 15 02 	call	0x42a	; 0x42a <disk_readp>
		if (dr) ABORT(FR_DISK_ERR);
     ec2:	88 23       	and	r24, r24
     ec4:	21 f0       	breq	.+8      	; 0xece <pf_read+0x17a>
     ec6:	f7 01       	movw	r30, r14
     ec8:	11 82       	std	Z+1, r1	; 0x01
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	23 c0       	rjmp	.+70     	; 0xf14 <pf_read+0x1c0>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
     ece:	f7 01       	movw	r30, r14
     ed0:	86 89       	ldd	r24, Z+22	; 0x16
     ed2:	97 89       	ldd	r25, Z+23	; 0x17
     ed4:	a0 8d       	ldd	r26, Z+24	; 0x18
     ed6:	b1 8d       	ldd	r27, Z+25	; 0x19
     ed8:	8c 0f       	add	r24, r28
     eda:	9d 1f       	adc	r25, r29
     edc:	a1 1d       	adc	r26, r1
     ede:	b1 1d       	adc	r27, r1
     ee0:	86 8b       	std	Z+22, r24	; 0x16
     ee2:	97 8b       	std	Z+23, r25	; 0x17
     ee4:	a0 8f       	std	Z+24, r26	; 0x18
     ee6:	b1 8f       	std	Z+25, r27	; 0x19
     ee8:	ac 0e       	add	r10, r28
     eea:	bd 1e       	adc	r11, r29
		btr -= rcnt; *br += rcnt;
     eec:	cc 1a       	sub	r12, r28
     eee:	dd 0a       	sbc	r13, r29
     ef0:	f3 01       	movw	r30, r6
     ef2:	80 81       	ld	r24, Z
     ef4:	91 81       	ldd	r25, Z+1	; 0x01
     ef6:	c8 0f       	add	r28, r24
     ef8:	d9 1f       	adc	r29, r25
     efa:	d1 83       	std	Z+1, r29	; 0x01
     efc:	c0 83       	st	Z, r28
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
     efe:	c1 14       	cp	r12, r1
     f00:	d1 04       	cpc	r13, r1
     f02:	09 f0       	breq	.+2      	; 0xf06 <pf_read+0x1b2>
     f04:	6b cf       	rjmp	.-298    	; 0xddc <pf_read+0x88>
		if (dr) ABORT(FR_DISK_ERR);
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
		btr -= rcnt; *br += rcnt;
	}

	return FR_OK;
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	05 c0       	rjmp	.+10     	; 0xf14 <pf_read+0x1c0>
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;


	*br = 0;
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     f0a:	85 e0       	ldi	r24, 0x05	; 5
     f0c:	03 c0       	rjmp	.+6      	; 0xf14 <pf_read+0x1c0>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
		return FR_NOT_OPENED;
     f0e:	84 e0       	ldi	r24, 0x04	; 4
     f10:	01 c0       	rjmp	.+2      	; 0xf14 <pf_read+0x1c0>
		if (dr) ABORT(FR_DISK_ERR);
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
		btr -= rcnt; *br += rcnt;
	}

	return FR_OK;
     f12:	80 e0       	ldi	r24, 0x00	; 0
}
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	1f 91       	pop	r17
     f1a:	0f 91       	pop	r16
     f1c:	ff 90       	pop	r15
     f1e:	ef 90       	pop	r14
     f20:	df 90       	pop	r13
     f22:	cf 90       	pop	r12
     f24:	bf 90       	pop	r11
     f26:	af 90       	pop	r10
     f28:	9f 90       	pop	r9
     f2a:	8f 90       	pop	r8
     f2c:	7f 90       	pop	r7
     f2e:	6f 90       	pop	r6
     f30:	5f 90       	pop	r5
     f32:	4f 90       	pop	r4
     f34:	3f 90       	pop	r3
     f36:	2f 90       	pop	r2
     f38:	08 95       	ret

00000f3a <uart_putchar>:
		stdout = &uart_output;	//redirect standard output to uart
		stdin  = &uart_input;  //redirect standard input to uart
}
	

void uart_putchar(char c, FILE *stream) {
     f3a:	cf 93       	push	r28
     f3c:	c8 2f       	mov	r28, r24
	if (c == '\n') {
     f3e:	8a 30       	cpi	r24, 0x0A	; 10
     f40:	19 f4       	brne	.+6      	; 0xf48 <uart_putchar+0xe>
		uart_putchar('\r', stream);
     f42:	8d e0       	ldi	r24, 0x0D	; 13
     f44:	0e 94 9d 07 	call	0xf3a	; 0xf3a <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
     f48:	e0 ec       	ldi	r30, 0xC0	; 192
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	90 81       	ld	r25, Z
     f4e:	95 ff       	sbrs	r25, 5
     f50:	fd cf       	rjmp	.-6      	; 0xf4c <uart_putchar+0x12>
	UDR0 = c;
     f52:	c0 93 c6 00 	sts	0x00C6, r28
}
     f56:	cf 91       	pop	r28
     f58:	08 95       	ret

00000f5a <uart_getchar>:

char uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0);
     f5a:	e0 ec       	ldi	r30, 0xC0	; 192
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	88 23       	and	r24, r24
     f62:	ec f7       	brge	.-6      	; 0xf5e <uart_getchar+0x4>
	return UDR0;
     f64:	80 91 c6 00 	lds	r24, 0x00C6
}
     f68:	08 95       	ret

00000f6a <uart_init>:


void uart_init(void) {

	/* setting up a clock signal for baud rate based on BAUD value */	
	UBRR0H = UBRRH_VALUE; // 0x00 
     f6a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE; // 0x67 for BAUD = 9600
     f6e:	87 e6       	ldi	r24, 0x67	; 103
     f70:	80 93 c4 00 	sts	0x00C4, r24
	
	#if USE_2X
		UCSR0A |= _BV(U2X0);
	#else
		UCSR0A &= ~(_BV(U2X0));
     f74:	e0 ec       	ldi	r30, 0xC0	; 192
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	8d 7f       	andi	r24, 0xFD	; 253
     f7c:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
     f7e:	86 e0       	ldi	r24, 0x06	; 6
     f80:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
     f84:	88 e1       	ldi	r24, 0x18	; 24
     f86:	80 93 c1 00 	sts	0x00C1, r24
     f8a:	08 95       	ret

00000f8c <io_redirect>:
}

void io_redirect(void){
		
		stdout = &uart_output;	//redirect standard output to uart
     f8c:	ef e7       	ldi	r30, 0x7F	; 127
     f8e:	f1 e0       	ldi	r31, 0x01	; 1
     f90:	8e e0       	ldi	r24, 0x0E	; 14
     f92:	91 e0       	ldi	r25, 0x01	; 1
     f94:	93 83       	std	Z+3, r25	; 0x03
     f96:	82 83       	std	Z+2, r24	; 0x02
		stdin  = &uart_input;  //redirect standard input to uart
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	91 e0       	ldi	r25, 0x01	; 1
     f9c:	91 83       	std	Z+1, r25	; 0x01
     f9e:	80 83       	st	Z, r24
     fa0:	08 95       	ret

00000fa2 <__udivmodsi4>:
     fa2:	a1 e2       	ldi	r26, 0x21	; 33
     fa4:	1a 2e       	mov	r1, r26
     fa6:	aa 1b       	sub	r26, r26
     fa8:	bb 1b       	sub	r27, r27
     faa:	fd 01       	movw	r30, r26
     fac:	0d c0       	rjmp	.+26     	; 0xfc8 <__udivmodsi4_ep>

00000fae <__udivmodsi4_loop>:
     fae:	aa 1f       	adc	r26, r26
     fb0:	bb 1f       	adc	r27, r27
     fb2:	ee 1f       	adc	r30, r30
     fb4:	ff 1f       	adc	r31, r31
     fb6:	a2 17       	cp	r26, r18
     fb8:	b3 07       	cpc	r27, r19
     fba:	e4 07       	cpc	r30, r20
     fbc:	f5 07       	cpc	r31, r21
     fbe:	20 f0       	brcs	.+8      	; 0xfc8 <__udivmodsi4_ep>
     fc0:	a2 1b       	sub	r26, r18
     fc2:	b3 0b       	sbc	r27, r19
     fc4:	e4 0b       	sbc	r30, r20
     fc6:	f5 0b       	sbc	r31, r21

00000fc8 <__udivmodsi4_ep>:
     fc8:	66 1f       	adc	r22, r22
     fca:	77 1f       	adc	r23, r23
     fcc:	88 1f       	adc	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	1a 94       	dec	r1
     fd2:	69 f7       	brne	.-38     	; 0xfae <__udivmodsi4_loop>
     fd4:	60 95       	com	r22
     fd6:	70 95       	com	r23
     fd8:	80 95       	com	r24
     fda:	90 95       	com	r25
     fdc:	9b 01       	movw	r18, r22
     fde:	ac 01       	movw	r20, r24
     fe0:	bd 01       	movw	r22, r26
     fe2:	cf 01       	movw	r24, r30
     fe4:	08 95       	ret

00000fe6 <__muluhisi3>:
     fe6:	0e 94 fe 07 	call	0xffc	; 0xffc <__umulhisi3>
     fea:	a5 9f       	mul	r26, r21
     fec:	90 0d       	add	r25, r0
     fee:	b4 9f       	mul	r27, r20
     ff0:	90 0d       	add	r25, r0
     ff2:	a4 9f       	mul	r26, r20
     ff4:	80 0d       	add	r24, r0
     ff6:	91 1d       	adc	r25, r1
     ff8:	11 24       	eor	r1, r1
     ffa:	08 95       	ret

00000ffc <__umulhisi3>:
     ffc:	a2 9f       	mul	r26, r18
     ffe:	b0 01       	movw	r22, r0
    1000:	b3 9f       	mul	r27, r19
    1002:	c0 01       	movw	r24, r0
    1004:	a3 9f       	mul	r26, r19
    1006:	70 0d       	add	r23, r0
    1008:	81 1d       	adc	r24, r1
    100a:	11 24       	eor	r1, r1
    100c:	91 1d       	adc	r25, r1
    100e:	b2 9f       	mul	r27, r18
    1010:	70 0d       	add	r23, r0
    1012:	81 1d       	adc	r24, r1
    1014:	11 24       	eor	r1, r1
    1016:	91 1d       	adc	r25, r1
    1018:	08 95       	ret

0000101a <printf>:
    101a:	a0 e0       	ldi	r26, 0x00	; 0
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e3 e1       	ldi	r30, 0x13	; 19
    1020:	f8 e0       	ldi	r31, 0x08	; 8
    1022:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__prologue_saves__+0x20>
    1026:	ae 01       	movw	r20, r28
    1028:	4b 5f       	subi	r20, 0xFB	; 251
    102a:	5f 4f       	sbci	r21, 0xFF	; 255
    102c:	fa 01       	movw	r30, r20
    102e:	61 91       	ld	r22, Z+
    1030:	71 91       	ld	r23, Z+
    1032:	af 01       	movw	r20, r30
    1034:	80 91 81 01 	lds	r24, 0x0181
    1038:	90 91 82 01 	lds	r25, 0x0182
    103c:	0e 94 23 08 	call	0x1046	; 0x1046 <vfprintf>
    1040:	e2 e0       	ldi	r30, 0x02	; 2
    1042:	0c 94 cd 0a 	jmp	0x159a	; 0x159a <__epilogue_restores__+0x20>

00001046 <vfprintf>:
    1046:	ac e0       	ldi	r26, 0x0C	; 12
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e9 e2       	ldi	r30, 0x29	; 41
    104c:	f8 e0       	ldi	r31, 0x08	; 8
    104e:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__prologue_saves__>
    1052:	7c 01       	movw	r14, r24
    1054:	6b 01       	movw	r12, r22
    1056:	8a 01       	movw	r16, r20
    1058:	fc 01       	movw	r30, r24
    105a:	17 82       	std	Z+7, r1	; 0x07
    105c:	16 82       	std	Z+6, r1	; 0x06
    105e:	83 81       	ldd	r24, Z+3	; 0x03
    1060:	81 ff       	sbrs	r24, 1
    1062:	bd c1       	rjmp	.+890    	; 0x13de <vfprintf+0x398>
    1064:	ce 01       	movw	r24, r28
    1066:	01 96       	adiw	r24, 0x01	; 1
    1068:	4c 01       	movw	r8, r24
    106a:	f7 01       	movw	r30, r14
    106c:	93 81       	ldd	r25, Z+3	; 0x03
    106e:	f6 01       	movw	r30, r12
    1070:	93 fd       	sbrc	r25, 3
    1072:	85 91       	lpm	r24, Z+
    1074:	93 ff       	sbrs	r25, 3
    1076:	81 91       	ld	r24, Z+
    1078:	6f 01       	movw	r12, r30
    107a:	88 23       	and	r24, r24
    107c:	09 f4       	brne	.+2      	; 0x1080 <vfprintf+0x3a>
    107e:	ab c1       	rjmp	.+854    	; 0x13d6 <vfprintf+0x390>
    1080:	85 32       	cpi	r24, 0x25	; 37
    1082:	39 f4       	brne	.+14     	; 0x1092 <vfprintf+0x4c>
    1084:	93 fd       	sbrc	r25, 3
    1086:	85 91       	lpm	r24, Z+
    1088:	93 ff       	sbrs	r25, 3
    108a:	81 91       	ld	r24, Z+
    108c:	6f 01       	movw	r12, r30
    108e:	85 32       	cpi	r24, 0x25	; 37
    1090:	29 f4       	brne	.+10     	; 0x109c <vfprintf+0x56>
    1092:	b7 01       	movw	r22, r14
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
    109a:	e7 cf       	rjmp	.-50     	; 0x106a <vfprintf+0x24>
    109c:	51 2c       	mov	r5, r1
    109e:	31 2c       	mov	r3, r1
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	20 32       	cpi	r18, 0x20	; 32
    10a4:	a0 f4       	brcc	.+40     	; 0x10ce <vfprintf+0x88>
    10a6:	8b 32       	cpi	r24, 0x2B	; 43
    10a8:	69 f0       	breq	.+26     	; 0x10c4 <vfprintf+0x7e>
    10aa:	30 f4       	brcc	.+12     	; 0x10b8 <vfprintf+0x72>
    10ac:	80 32       	cpi	r24, 0x20	; 32
    10ae:	59 f0       	breq	.+22     	; 0x10c6 <vfprintf+0x80>
    10b0:	83 32       	cpi	r24, 0x23	; 35
    10b2:	69 f4       	brne	.+26     	; 0x10ce <vfprintf+0x88>
    10b4:	20 61       	ori	r18, 0x10	; 16
    10b6:	2c c0       	rjmp	.+88     	; 0x1110 <vfprintf+0xca>
    10b8:	8d 32       	cpi	r24, 0x2D	; 45
    10ba:	39 f0       	breq	.+14     	; 0x10ca <vfprintf+0x84>
    10bc:	80 33       	cpi	r24, 0x30	; 48
    10be:	39 f4       	brne	.+14     	; 0x10ce <vfprintf+0x88>
    10c0:	21 60       	ori	r18, 0x01	; 1
    10c2:	26 c0       	rjmp	.+76     	; 0x1110 <vfprintf+0xca>
    10c4:	22 60       	ori	r18, 0x02	; 2
    10c6:	24 60       	ori	r18, 0x04	; 4
    10c8:	23 c0       	rjmp	.+70     	; 0x1110 <vfprintf+0xca>
    10ca:	28 60       	ori	r18, 0x08	; 8
    10cc:	21 c0       	rjmp	.+66     	; 0x1110 <vfprintf+0xca>
    10ce:	27 fd       	sbrc	r18, 7
    10d0:	27 c0       	rjmp	.+78     	; 0x1120 <vfprintf+0xda>
    10d2:	30 ed       	ldi	r19, 0xD0	; 208
    10d4:	38 0f       	add	r19, r24
    10d6:	3a 30       	cpi	r19, 0x0A	; 10
    10d8:	78 f4       	brcc	.+30     	; 0x10f8 <vfprintf+0xb2>
    10da:	26 ff       	sbrs	r18, 6
    10dc:	06 c0       	rjmp	.+12     	; 0x10ea <vfprintf+0xa4>
    10de:	fa e0       	ldi	r31, 0x0A	; 10
    10e0:	5f 9e       	mul	r5, r31
    10e2:	30 0d       	add	r19, r0
    10e4:	11 24       	eor	r1, r1
    10e6:	53 2e       	mov	r5, r19
    10e8:	13 c0       	rjmp	.+38     	; 0x1110 <vfprintf+0xca>
    10ea:	8a e0       	ldi	r24, 0x0A	; 10
    10ec:	38 9e       	mul	r3, r24
    10ee:	30 0d       	add	r19, r0
    10f0:	11 24       	eor	r1, r1
    10f2:	33 2e       	mov	r3, r19
    10f4:	20 62       	ori	r18, 0x20	; 32
    10f6:	0c c0       	rjmp	.+24     	; 0x1110 <vfprintf+0xca>
    10f8:	8e 32       	cpi	r24, 0x2E	; 46
    10fa:	21 f4       	brne	.+8      	; 0x1104 <vfprintf+0xbe>
    10fc:	26 fd       	sbrc	r18, 6
    10fe:	6b c1       	rjmp	.+726    	; 0x13d6 <vfprintf+0x390>
    1100:	20 64       	ori	r18, 0x40	; 64
    1102:	06 c0       	rjmp	.+12     	; 0x1110 <vfprintf+0xca>
    1104:	8c 36       	cpi	r24, 0x6C	; 108
    1106:	11 f4       	brne	.+4      	; 0x110c <vfprintf+0xc6>
    1108:	20 68       	ori	r18, 0x80	; 128
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <vfprintf+0xca>
    110c:	88 36       	cpi	r24, 0x68	; 104
    110e:	41 f4       	brne	.+16     	; 0x1120 <vfprintf+0xda>
    1110:	f6 01       	movw	r30, r12
    1112:	93 fd       	sbrc	r25, 3
    1114:	85 91       	lpm	r24, Z+
    1116:	93 ff       	sbrs	r25, 3
    1118:	81 91       	ld	r24, Z+
    111a:	6f 01       	movw	r12, r30
    111c:	81 11       	cpse	r24, r1
    111e:	c1 cf       	rjmp	.-126    	; 0x10a2 <vfprintf+0x5c>
    1120:	98 2f       	mov	r25, r24
    1122:	9f 7d       	andi	r25, 0xDF	; 223
    1124:	95 54       	subi	r25, 0x45	; 69
    1126:	93 30       	cpi	r25, 0x03	; 3
    1128:	28 f4       	brcc	.+10     	; 0x1134 <vfprintf+0xee>
    112a:	0c 5f       	subi	r16, 0xFC	; 252
    112c:	1f 4f       	sbci	r17, 0xFF	; 255
    112e:	ff e3       	ldi	r31, 0x3F	; 63
    1130:	f9 83       	std	Y+1, r31	; 0x01
    1132:	0d c0       	rjmp	.+26     	; 0x114e <vfprintf+0x108>
    1134:	83 36       	cpi	r24, 0x63	; 99
    1136:	31 f0       	breq	.+12     	; 0x1144 <vfprintf+0xfe>
    1138:	83 37       	cpi	r24, 0x73	; 115
    113a:	71 f0       	breq	.+28     	; 0x1158 <vfprintf+0x112>
    113c:	83 35       	cpi	r24, 0x53	; 83
    113e:	09 f0       	breq	.+2      	; 0x1142 <vfprintf+0xfc>
    1140:	5b c0       	rjmp	.+182    	; 0x11f8 <vfprintf+0x1b2>
    1142:	22 c0       	rjmp	.+68     	; 0x1188 <vfprintf+0x142>
    1144:	f8 01       	movw	r30, r16
    1146:	80 81       	ld	r24, Z
    1148:	89 83       	std	Y+1, r24	; 0x01
    114a:	0e 5f       	subi	r16, 0xFE	; 254
    114c:	1f 4f       	sbci	r17, 0xFF	; 255
    114e:	44 24       	eor	r4, r4
    1150:	43 94       	inc	r4
    1152:	51 2c       	mov	r5, r1
    1154:	54 01       	movw	r10, r8
    1156:	15 c0       	rjmp	.+42     	; 0x1182 <vfprintf+0x13c>
    1158:	38 01       	movw	r6, r16
    115a:	f2 e0       	ldi	r31, 0x02	; 2
    115c:	6f 0e       	add	r6, r31
    115e:	71 1c       	adc	r7, r1
    1160:	f8 01       	movw	r30, r16
    1162:	a0 80       	ld	r10, Z
    1164:	b1 80       	ldd	r11, Z+1	; 0x01
    1166:	26 ff       	sbrs	r18, 6
    1168:	03 c0       	rjmp	.+6      	; 0x1170 <vfprintf+0x12a>
    116a:	65 2d       	mov	r22, r5
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <vfprintf+0x12e>
    1170:	6f ef       	ldi	r22, 0xFF	; 255
    1172:	7f ef       	ldi	r23, 0xFF	; 255
    1174:	c5 01       	movw	r24, r10
    1176:	2c 87       	std	Y+12, r18	; 0x0c
    1178:	0e 94 00 0a 	call	0x1400	; 0x1400 <strnlen>
    117c:	2c 01       	movw	r4, r24
    117e:	83 01       	movw	r16, r6
    1180:	2c 85       	ldd	r18, Y+12	; 0x0c
    1182:	2f 77       	andi	r18, 0x7F	; 127
    1184:	22 2e       	mov	r2, r18
    1186:	17 c0       	rjmp	.+46     	; 0x11b6 <vfprintf+0x170>
    1188:	38 01       	movw	r6, r16
    118a:	f2 e0       	ldi	r31, 0x02	; 2
    118c:	6f 0e       	add	r6, r31
    118e:	71 1c       	adc	r7, r1
    1190:	f8 01       	movw	r30, r16
    1192:	a0 80       	ld	r10, Z
    1194:	b1 80       	ldd	r11, Z+1	; 0x01
    1196:	26 ff       	sbrs	r18, 6
    1198:	03 c0       	rjmp	.+6      	; 0x11a0 <vfprintf+0x15a>
    119a:	65 2d       	mov	r22, r5
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <vfprintf+0x15e>
    11a0:	6f ef       	ldi	r22, 0xFF	; 255
    11a2:	7f ef       	ldi	r23, 0xFF	; 255
    11a4:	c5 01       	movw	r24, r10
    11a6:	2c 87       	std	Y+12, r18	; 0x0c
    11a8:	0e 94 f5 09 	call	0x13ea	; 0x13ea <strnlen_P>
    11ac:	2c 01       	movw	r4, r24
    11ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    11b0:	20 68       	ori	r18, 0x80	; 128
    11b2:	22 2e       	mov	r2, r18
    11b4:	83 01       	movw	r16, r6
    11b6:	23 fc       	sbrc	r2, 3
    11b8:	1b c0       	rjmp	.+54     	; 0x11f0 <vfprintf+0x1aa>
    11ba:	83 2d       	mov	r24, r3
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	48 16       	cp	r4, r24
    11c0:	59 06       	cpc	r5, r25
    11c2:	b0 f4       	brcc	.+44     	; 0x11f0 <vfprintf+0x1aa>
    11c4:	b7 01       	movw	r22, r14
    11c6:	80 e2       	ldi	r24, 0x20	; 32
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
    11ce:	3a 94       	dec	r3
    11d0:	f4 cf       	rjmp	.-24     	; 0x11ba <vfprintf+0x174>
    11d2:	f5 01       	movw	r30, r10
    11d4:	27 fc       	sbrc	r2, 7
    11d6:	85 91       	lpm	r24, Z+
    11d8:	27 fe       	sbrs	r2, 7
    11da:	81 91       	ld	r24, Z+
    11dc:	5f 01       	movw	r10, r30
    11de:	b7 01       	movw	r22, r14
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
    11e6:	31 10       	cpse	r3, r1
    11e8:	3a 94       	dec	r3
    11ea:	f1 e0       	ldi	r31, 0x01	; 1
    11ec:	4f 1a       	sub	r4, r31
    11ee:	51 08       	sbc	r5, r1
    11f0:	41 14       	cp	r4, r1
    11f2:	51 04       	cpc	r5, r1
    11f4:	71 f7       	brne	.-36     	; 0x11d2 <vfprintf+0x18c>
    11f6:	e5 c0       	rjmp	.+458    	; 0x13c2 <vfprintf+0x37c>
    11f8:	84 36       	cpi	r24, 0x64	; 100
    11fa:	11 f0       	breq	.+4      	; 0x1200 <vfprintf+0x1ba>
    11fc:	89 36       	cpi	r24, 0x69	; 105
    11fe:	39 f5       	brne	.+78     	; 0x124e <vfprintf+0x208>
    1200:	f8 01       	movw	r30, r16
    1202:	27 ff       	sbrs	r18, 7
    1204:	07 c0       	rjmp	.+14     	; 0x1214 <vfprintf+0x1ce>
    1206:	60 81       	ld	r22, Z
    1208:	71 81       	ldd	r23, Z+1	; 0x01
    120a:	82 81       	ldd	r24, Z+2	; 0x02
    120c:	93 81       	ldd	r25, Z+3	; 0x03
    120e:	0c 5f       	subi	r16, 0xFC	; 252
    1210:	1f 4f       	sbci	r17, 0xFF	; 255
    1212:	08 c0       	rjmp	.+16     	; 0x1224 <vfprintf+0x1de>
    1214:	60 81       	ld	r22, Z
    1216:	71 81       	ldd	r23, Z+1	; 0x01
    1218:	07 2e       	mov	r0, r23
    121a:	00 0c       	add	r0, r0
    121c:	88 0b       	sbc	r24, r24
    121e:	99 0b       	sbc	r25, r25
    1220:	0e 5f       	subi	r16, 0xFE	; 254
    1222:	1f 4f       	sbci	r17, 0xFF	; 255
    1224:	2f 76       	andi	r18, 0x6F	; 111
    1226:	72 2e       	mov	r7, r18
    1228:	97 ff       	sbrs	r25, 7
    122a:	09 c0       	rjmp	.+18     	; 0x123e <vfprintf+0x1f8>
    122c:	90 95       	com	r25
    122e:	80 95       	com	r24
    1230:	70 95       	com	r23
    1232:	61 95       	neg	r22
    1234:	7f 4f       	sbci	r23, 0xFF	; 255
    1236:	8f 4f       	sbci	r24, 0xFF	; 255
    1238:	9f 4f       	sbci	r25, 0xFF	; 255
    123a:	20 68       	ori	r18, 0x80	; 128
    123c:	72 2e       	mov	r7, r18
    123e:	2a e0       	ldi	r18, 0x0A	; 10
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	a4 01       	movw	r20, r8
    1244:	0e 94 43 0a 	call	0x1486	; 0x1486 <__ultoa_invert>
    1248:	a8 2e       	mov	r10, r24
    124a:	a8 18       	sub	r10, r8
    124c:	44 c0       	rjmp	.+136    	; 0x12d6 <vfprintf+0x290>
    124e:	85 37       	cpi	r24, 0x75	; 117
    1250:	29 f4       	brne	.+10     	; 0x125c <vfprintf+0x216>
    1252:	2f 7e       	andi	r18, 0xEF	; 239
    1254:	b2 2e       	mov	r11, r18
    1256:	2a e0       	ldi	r18, 0x0A	; 10
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	25 c0       	rjmp	.+74     	; 0x12a6 <vfprintf+0x260>
    125c:	f2 2f       	mov	r31, r18
    125e:	f9 7f       	andi	r31, 0xF9	; 249
    1260:	bf 2e       	mov	r11, r31
    1262:	8f 36       	cpi	r24, 0x6F	; 111
    1264:	c1 f0       	breq	.+48     	; 0x1296 <vfprintf+0x250>
    1266:	18 f4       	brcc	.+6      	; 0x126e <vfprintf+0x228>
    1268:	88 35       	cpi	r24, 0x58	; 88
    126a:	79 f0       	breq	.+30     	; 0x128a <vfprintf+0x244>
    126c:	b4 c0       	rjmp	.+360    	; 0x13d6 <vfprintf+0x390>
    126e:	80 37       	cpi	r24, 0x70	; 112
    1270:	19 f0       	breq	.+6      	; 0x1278 <vfprintf+0x232>
    1272:	88 37       	cpi	r24, 0x78	; 120
    1274:	21 f0       	breq	.+8      	; 0x127e <vfprintf+0x238>
    1276:	af c0       	rjmp	.+350    	; 0x13d6 <vfprintf+0x390>
    1278:	2f 2f       	mov	r18, r31
    127a:	20 61       	ori	r18, 0x10	; 16
    127c:	b2 2e       	mov	r11, r18
    127e:	b4 fe       	sbrs	r11, 4
    1280:	0d c0       	rjmp	.+26     	; 0x129c <vfprintf+0x256>
    1282:	8b 2d       	mov	r24, r11
    1284:	84 60       	ori	r24, 0x04	; 4
    1286:	b8 2e       	mov	r11, r24
    1288:	09 c0       	rjmp	.+18     	; 0x129c <vfprintf+0x256>
    128a:	24 ff       	sbrs	r18, 4
    128c:	0a c0       	rjmp	.+20     	; 0x12a2 <vfprintf+0x25c>
    128e:	9f 2f       	mov	r25, r31
    1290:	96 60       	ori	r25, 0x06	; 6
    1292:	b9 2e       	mov	r11, r25
    1294:	06 c0       	rjmp	.+12     	; 0x12a2 <vfprintf+0x25c>
    1296:	28 e0       	ldi	r18, 0x08	; 8
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	05 c0       	rjmp	.+10     	; 0x12a6 <vfprintf+0x260>
    129c:	20 e1       	ldi	r18, 0x10	; 16
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <vfprintf+0x260>
    12a2:	20 e1       	ldi	r18, 0x10	; 16
    12a4:	32 e0       	ldi	r19, 0x02	; 2
    12a6:	f8 01       	movw	r30, r16
    12a8:	b7 fe       	sbrs	r11, 7
    12aa:	07 c0       	rjmp	.+14     	; 0x12ba <vfprintf+0x274>
    12ac:	60 81       	ld	r22, Z
    12ae:	71 81       	ldd	r23, Z+1	; 0x01
    12b0:	82 81       	ldd	r24, Z+2	; 0x02
    12b2:	93 81       	ldd	r25, Z+3	; 0x03
    12b4:	0c 5f       	subi	r16, 0xFC	; 252
    12b6:	1f 4f       	sbci	r17, 0xFF	; 255
    12b8:	06 c0       	rjmp	.+12     	; 0x12c6 <vfprintf+0x280>
    12ba:	60 81       	ld	r22, Z
    12bc:	71 81       	ldd	r23, Z+1	; 0x01
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 5f       	subi	r16, 0xFE	; 254
    12c4:	1f 4f       	sbci	r17, 0xFF	; 255
    12c6:	a4 01       	movw	r20, r8
    12c8:	0e 94 43 0a 	call	0x1486	; 0x1486 <__ultoa_invert>
    12cc:	a8 2e       	mov	r10, r24
    12ce:	a8 18       	sub	r10, r8
    12d0:	fb 2d       	mov	r31, r11
    12d2:	ff 77       	andi	r31, 0x7F	; 127
    12d4:	7f 2e       	mov	r7, r31
    12d6:	76 fe       	sbrs	r7, 6
    12d8:	0b c0       	rjmp	.+22     	; 0x12f0 <vfprintf+0x2aa>
    12da:	37 2d       	mov	r19, r7
    12dc:	3e 7f       	andi	r19, 0xFE	; 254
    12de:	a5 14       	cp	r10, r5
    12e0:	50 f4       	brcc	.+20     	; 0x12f6 <vfprintf+0x2b0>
    12e2:	74 fe       	sbrs	r7, 4
    12e4:	0a c0       	rjmp	.+20     	; 0x12fa <vfprintf+0x2b4>
    12e6:	72 fc       	sbrc	r7, 2
    12e8:	08 c0       	rjmp	.+16     	; 0x12fa <vfprintf+0x2b4>
    12ea:	37 2d       	mov	r19, r7
    12ec:	3e 7e       	andi	r19, 0xEE	; 238
    12ee:	05 c0       	rjmp	.+10     	; 0x12fa <vfprintf+0x2b4>
    12f0:	ba 2c       	mov	r11, r10
    12f2:	37 2d       	mov	r19, r7
    12f4:	03 c0       	rjmp	.+6      	; 0x12fc <vfprintf+0x2b6>
    12f6:	ba 2c       	mov	r11, r10
    12f8:	01 c0       	rjmp	.+2      	; 0x12fc <vfprintf+0x2b6>
    12fa:	b5 2c       	mov	r11, r5
    12fc:	34 ff       	sbrs	r19, 4
    12fe:	0d c0       	rjmp	.+26     	; 0x131a <vfprintf+0x2d4>
    1300:	fe 01       	movw	r30, r28
    1302:	ea 0d       	add	r30, r10
    1304:	f1 1d       	adc	r31, r1
    1306:	80 81       	ld	r24, Z
    1308:	80 33       	cpi	r24, 0x30	; 48
    130a:	11 f4       	brne	.+4      	; 0x1310 <vfprintf+0x2ca>
    130c:	39 7e       	andi	r19, 0xE9	; 233
    130e:	09 c0       	rjmp	.+18     	; 0x1322 <vfprintf+0x2dc>
    1310:	32 ff       	sbrs	r19, 2
    1312:	06 c0       	rjmp	.+12     	; 0x1320 <vfprintf+0x2da>
    1314:	b3 94       	inc	r11
    1316:	b3 94       	inc	r11
    1318:	04 c0       	rjmp	.+8      	; 0x1322 <vfprintf+0x2dc>
    131a:	83 2f       	mov	r24, r19
    131c:	86 78       	andi	r24, 0x86	; 134
    131e:	09 f0       	breq	.+2      	; 0x1322 <vfprintf+0x2dc>
    1320:	b3 94       	inc	r11
    1322:	33 fd       	sbrc	r19, 3
    1324:	13 c0       	rjmp	.+38     	; 0x134c <vfprintf+0x306>
    1326:	30 ff       	sbrs	r19, 0
    1328:	06 c0       	rjmp	.+12     	; 0x1336 <vfprintf+0x2f0>
    132a:	5a 2c       	mov	r5, r10
    132c:	b3 14       	cp	r11, r3
    132e:	18 f4       	brcc	.+6      	; 0x1336 <vfprintf+0x2f0>
    1330:	53 0c       	add	r5, r3
    1332:	5b 18       	sub	r5, r11
    1334:	b3 2c       	mov	r11, r3
    1336:	b3 14       	cp	r11, r3
    1338:	68 f4       	brcc	.+26     	; 0x1354 <vfprintf+0x30e>
    133a:	b7 01       	movw	r22, r14
    133c:	80 e2       	ldi	r24, 0x20	; 32
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	3c 87       	std	Y+12, r19	; 0x0c
    1342:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
    1346:	b3 94       	inc	r11
    1348:	3c 85       	ldd	r19, Y+12	; 0x0c
    134a:	f5 cf       	rjmp	.-22     	; 0x1336 <vfprintf+0x2f0>
    134c:	b3 14       	cp	r11, r3
    134e:	10 f4       	brcc	.+4      	; 0x1354 <vfprintf+0x30e>
    1350:	3b 18       	sub	r3, r11
    1352:	01 c0       	rjmp	.+2      	; 0x1356 <vfprintf+0x310>
    1354:	31 2c       	mov	r3, r1
    1356:	34 ff       	sbrs	r19, 4
    1358:	12 c0       	rjmp	.+36     	; 0x137e <vfprintf+0x338>
    135a:	b7 01       	movw	r22, r14
    135c:	80 e3       	ldi	r24, 0x30	; 48
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	3c 87       	std	Y+12, r19	; 0x0c
    1362:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
    1366:	3c 85       	ldd	r19, Y+12	; 0x0c
    1368:	32 ff       	sbrs	r19, 2
    136a:	17 c0       	rjmp	.+46     	; 0x139a <vfprintf+0x354>
    136c:	31 fd       	sbrc	r19, 1
    136e:	03 c0       	rjmp	.+6      	; 0x1376 <vfprintf+0x330>
    1370:	88 e7       	ldi	r24, 0x78	; 120
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	02 c0       	rjmp	.+4      	; 0x137a <vfprintf+0x334>
    1376:	88 e5       	ldi	r24, 0x58	; 88
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	b7 01       	movw	r22, r14
    137c:	0c c0       	rjmp	.+24     	; 0x1396 <vfprintf+0x350>
    137e:	83 2f       	mov	r24, r19
    1380:	86 78       	andi	r24, 0x86	; 134
    1382:	59 f0       	breq	.+22     	; 0x139a <vfprintf+0x354>
    1384:	31 ff       	sbrs	r19, 1
    1386:	02 c0       	rjmp	.+4      	; 0x138c <vfprintf+0x346>
    1388:	8b e2       	ldi	r24, 0x2B	; 43
    138a:	01 c0       	rjmp	.+2      	; 0x138e <vfprintf+0x348>
    138c:	80 e2       	ldi	r24, 0x20	; 32
    138e:	37 fd       	sbrc	r19, 7
    1390:	8d e2       	ldi	r24, 0x2D	; 45
    1392:	b7 01       	movw	r22, r14
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
    139a:	a5 14       	cp	r10, r5
    139c:	38 f4       	brcc	.+14     	; 0x13ac <vfprintf+0x366>
    139e:	b7 01       	movw	r22, r14
    13a0:	80 e3       	ldi	r24, 0x30	; 48
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
    13a8:	5a 94       	dec	r5
    13aa:	f7 cf       	rjmp	.-18     	; 0x139a <vfprintf+0x354>
    13ac:	aa 94       	dec	r10
    13ae:	f4 01       	movw	r30, r8
    13b0:	ea 0d       	add	r30, r10
    13b2:	f1 1d       	adc	r31, r1
    13b4:	80 81       	ld	r24, Z
    13b6:	b7 01       	movw	r22, r14
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
    13be:	a1 10       	cpse	r10, r1
    13c0:	f5 cf       	rjmp	.-22     	; 0x13ac <vfprintf+0x366>
    13c2:	33 20       	and	r3, r3
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <vfprintf+0x382>
    13c6:	51 ce       	rjmp	.-862    	; 0x106a <vfprintf+0x24>
    13c8:	b7 01       	movw	r22, r14
    13ca:	80 e2       	ldi	r24, 0x20	; 32
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	0e 94 0b 0a 	call	0x1416	; 0x1416 <fputc>
    13d2:	3a 94       	dec	r3
    13d4:	f6 cf       	rjmp	.-20     	; 0x13c2 <vfprintf+0x37c>
    13d6:	f7 01       	movw	r30, r14
    13d8:	86 81       	ldd	r24, Z+6	; 0x06
    13da:	97 81       	ldd	r25, Z+7	; 0x07
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <vfprintf+0x39c>
    13de:	8f ef       	ldi	r24, 0xFF	; 255
    13e0:	9f ef       	ldi	r25, 0xFF	; 255
    13e2:	2c 96       	adiw	r28, 0x0c	; 12
    13e4:	e2 e1       	ldi	r30, 0x12	; 18
    13e6:	0c 94 bd 0a 	jmp	0x157a	; 0x157a <__epilogue_restores__>

000013ea <strnlen_P>:
    13ea:	fc 01       	movw	r30, r24
    13ec:	05 90       	lpm	r0, Z+
    13ee:	61 50       	subi	r22, 0x01	; 1
    13f0:	70 40       	sbci	r23, 0x00	; 0
    13f2:	01 10       	cpse	r0, r1
    13f4:	d8 f7       	brcc	.-10     	; 0x13ec <strnlen_P+0x2>
    13f6:	80 95       	com	r24
    13f8:	90 95       	com	r25
    13fa:	8e 0f       	add	r24, r30
    13fc:	9f 1f       	adc	r25, r31
    13fe:	08 95       	ret

00001400 <strnlen>:
    1400:	fc 01       	movw	r30, r24
    1402:	61 50       	subi	r22, 0x01	; 1
    1404:	70 40       	sbci	r23, 0x00	; 0
    1406:	01 90       	ld	r0, Z+
    1408:	01 10       	cpse	r0, r1
    140a:	d8 f7       	brcc	.-10     	; 0x1402 <strnlen+0x2>
    140c:	80 95       	com	r24
    140e:	90 95       	com	r25
    1410:	8e 0f       	add	r24, r30
    1412:	9f 1f       	adc	r25, r31
    1414:	08 95       	ret

00001416 <fputc>:
    1416:	0f 93       	push	r16
    1418:	1f 93       	push	r17
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	fb 01       	movw	r30, r22
    1420:	23 81       	ldd	r18, Z+3	; 0x03
    1422:	21 fd       	sbrc	r18, 1
    1424:	03 c0       	rjmp	.+6      	; 0x142c <fputc+0x16>
    1426:	8f ef       	ldi	r24, 0xFF	; 255
    1428:	9f ef       	ldi	r25, 0xFF	; 255
    142a:	28 c0       	rjmp	.+80     	; 0x147c <fputc+0x66>
    142c:	22 ff       	sbrs	r18, 2
    142e:	16 c0       	rjmp	.+44     	; 0x145c <fputc+0x46>
    1430:	46 81       	ldd	r20, Z+6	; 0x06
    1432:	57 81       	ldd	r21, Z+7	; 0x07
    1434:	24 81       	ldd	r18, Z+4	; 0x04
    1436:	35 81       	ldd	r19, Z+5	; 0x05
    1438:	42 17       	cp	r20, r18
    143a:	53 07       	cpc	r21, r19
    143c:	44 f4       	brge	.+16     	; 0x144e <fputc+0x38>
    143e:	a0 81       	ld	r26, Z
    1440:	b1 81       	ldd	r27, Z+1	; 0x01
    1442:	9d 01       	movw	r18, r26
    1444:	2f 5f       	subi	r18, 0xFF	; 255
    1446:	3f 4f       	sbci	r19, 0xFF	; 255
    1448:	31 83       	std	Z+1, r19	; 0x01
    144a:	20 83       	st	Z, r18
    144c:	8c 93       	st	X, r24
    144e:	26 81       	ldd	r18, Z+6	; 0x06
    1450:	37 81       	ldd	r19, Z+7	; 0x07
    1452:	2f 5f       	subi	r18, 0xFF	; 255
    1454:	3f 4f       	sbci	r19, 0xFF	; 255
    1456:	37 83       	std	Z+7, r19	; 0x07
    1458:	26 83       	std	Z+6, r18	; 0x06
    145a:	10 c0       	rjmp	.+32     	; 0x147c <fputc+0x66>
    145c:	eb 01       	movw	r28, r22
    145e:	09 2f       	mov	r16, r25
    1460:	18 2f       	mov	r17, r24
    1462:	00 84       	ldd	r0, Z+8	; 0x08
    1464:	f1 85       	ldd	r31, Z+9	; 0x09
    1466:	e0 2d       	mov	r30, r0
    1468:	09 95       	icall
    146a:	89 2b       	or	r24, r25
    146c:	e1 f6       	brne	.-72     	; 0x1426 <fputc+0x10>
    146e:	8e 81       	ldd	r24, Y+6	; 0x06
    1470:	9f 81       	ldd	r25, Y+7	; 0x07
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	9f 83       	std	Y+7, r25	; 0x07
    1476:	8e 83       	std	Y+6, r24	; 0x06
    1478:	81 2f       	mov	r24, r17
    147a:	90 2f       	mov	r25, r16
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	1f 91       	pop	r17
    1482:	0f 91       	pop	r16
    1484:	08 95       	ret

00001486 <__ultoa_invert>:
    1486:	fa 01       	movw	r30, r20
    1488:	aa 27       	eor	r26, r26
    148a:	28 30       	cpi	r18, 0x08	; 8
    148c:	51 f1       	breq	.+84     	; 0x14e2 <__ultoa_invert+0x5c>
    148e:	20 31       	cpi	r18, 0x10	; 16
    1490:	81 f1       	breq	.+96     	; 0x14f2 <__ultoa_invert+0x6c>
    1492:	e8 94       	clt
    1494:	6f 93       	push	r22
    1496:	6e 7f       	andi	r22, 0xFE	; 254
    1498:	6e 5f       	subi	r22, 0xFE	; 254
    149a:	7f 4f       	sbci	r23, 0xFF	; 255
    149c:	8f 4f       	sbci	r24, 0xFF	; 255
    149e:	9f 4f       	sbci	r25, 0xFF	; 255
    14a0:	af 4f       	sbci	r26, 0xFF	; 255
    14a2:	b1 e0       	ldi	r27, 0x01	; 1
    14a4:	3e d0       	rcall	.+124    	; 0x1522 <__ultoa_invert+0x9c>
    14a6:	b4 e0       	ldi	r27, 0x04	; 4
    14a8:	3c d0       	rcall	.+120    	; 0x1522 <__ultoa_invert+0x9c>
    14aa:	67 0f       	add	r22, r23
    14ac:	78 1f       	adc	r23, r24
    14ae:	89 1f       	adc	r24, r25
    14b0:	9a 1f       	adc	r25, r26
    14b2:	a1 1d       	adc	r26, r1
    14b4:	68 0f       	add	r22, r24
    14b6:	79 1f       	adc	r23, r25
    14b8:	8a 1f       	adc	r24, r26
    14ba:	91 1d       	adc	r25, r1
    14bc:	a1 1d       	adc	r26, r1
    14be:	6a 0f       	add	r22, r26
    14c0:	71 1d       	adc	r23, r1
    14c2:	81 1d       	adc	r24, r1
    14c4:	91 1d       	adc	r25, r1
    14c6:	a1 1d       	adc	r26, r1
    14c8:	20 d0       	rcall	.+64     	; 0x150a <__ultoa_invert+0x84>
    14ca:	09 f4       	brne	.+2      	; 0x14ce <__ultoa_invert+0x48>
    14cc:	68 94       	set
    14ce:	3f 91       	pop	r19
    14d0:	2a e0       	ldi	r18, 0x0A	; 10
    14d2:	26 9f       	mul	r18, r22
    14d4:	11 24       	eor	r1, r1
    14d6:	30 19       	sub	r19, r0
    14d8:	30 5d       	subi	r19, 0xD0	; 208
    14da:	31 93       	st	Z+, r19
    14dc:	de f6       	brtc	.-74     	; 0x1494 <__ultoa_invert+0xe>
    14de:	cf 01       	movw	r24, r30
    14e0:	08 95       	ret
    14e2:	46 2f       	mov	r20, r22
    14e4:	47 70       	andi	r20, 0x07	; 7
    14e6:	40 5d       	subi	r20, 0xD0	; 208
    14e8:	41 93       	st	Z+, r20
    14ea:	b3 e0       	ldi	r27, 0x03	; 3
    14ec:	0f d0       	rcall	.+30     	; 0x150c <__ultoa_invert+0x86>
    14ee:	c9 f7       	brne	.-14     	; 0x14e2 <__ultoa_invert+0x5c>
    14f0:	f6 cf       	rjmp	.-20     	; 0x14de <__ultoa_invert+0x58>
    14f2:	46 2f       	mov	r20, r22
    14f4:	4f 70       	andi	r20, 0x0F	; 15
    14f6:	40 5d       	subi	r20, 0xD0	; 208
    14f8:	4a 33       	cpi	r20, 0x3A	; 58
    14fa:	18 f0       	brcs	.+6      	; 0x1502 <__ultoa_invert+0x7c>
    14fc:	49 5d       	subi	r20, 0xD9	; 217
    14fe:	31 fd       	sbrc	r19, 1
    1500:	40 52       	subi	r20, 0x20	; 32
    1502:	41 93       	st	Z+, r20
    1504:	02 d0       	rcall	.+4      	; 0x150a <__ultoa_invert+0x84>
    1506:	a9 f7       	brne	.-22     	; 0x14f2 <__ultoa_invert+0x6c>
    1508:	ea cf       	rjmp	.-44     	; 0x14de <__ultoa_invert+0x58>
    150a:	b4 e0       	ldi	r27, 0x04	; 4
    150c:	a6 95       	lsr	r26
    150e:	97 95       	ror	r25
    1510:	87 95       	ror	r24
    1512:	77 95       	ror	r23
    1514:	67 95       	ror	r22
    1516:	ba 95       	dec	r27
    1518:	c9 f7       	brne	.-14     	; 0x150c <__ultoa_invert+0x86>
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	61 05       	cpc	r22, r1
    151e:	71 05       	cpc	r23, r1
    1520:	08 95       	ret
    1522:	9b 01       	movw	r18, r22
    1524:	ac 01       	movw	r20, r24
    1526:	0a 2e       	mov	r0, r26
    1528:	06 94       	lsr	r0
    152a:	57 95       	ror	r21
    152c:	47 95       	ror	r20
    152e:	37 95       	ror	r19
    1530:	27 95       	ror	r18
    1532:	ba 95       	dec	r27
    1534:	c9 f7       	brne	.-14     	; 0x1528 <__ultoa_invert+0xa2>
    1536:	62 0f       	add	r22, r18
    1538:	73 1f       	adc	r23, r19
    153a:	84 1f       	adc	r24, r20
    153c:	95 1f       	adc	r25, r21
    153e:	a0 1d       	adc	r26, r0
    1540:	08 95       	ret

00001542 <__prologue_saves__>:
    1542:	2f 92       	push	r2
    1544:	3f 92       	push	r3
    1546:	4f 92       	push	r4
    1548:	5f 92       	push	r5
    154a:	6f 92       	push	r6
    154c:	7f 92       	push	r7
    154e:	8f 92       	push	r8
    1550:	9f 92       	push	r9
    1552:	af 92       	push	r10
    1554:	bf 92       	push	r11
    1556:	cf 92       	push	r12
    1558:	df 92       	push	r13
    155a:	ef 92       	push	r14
    155c:	ff 92       	push	r15
    155e:	0f 93       	push	r16
    1560:	1f 93       	push	r17
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	ca 1b       	sub	r28, r26
    156c:	db 0b       	sbc	r29, r27
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	09 94       	ijmp

0000157a <__epilogue_restores__>:
    157a:	2a 88       	ldd	r2, Y+18	; 0x12
    157c:	39 88       	ldd	r3, Y+17	; 0x11
    157e:	48 88       	ldd	r4, Y+16	; 0x10
    1580:	5f 84       	ldd	r5, Y+15	; 0x0f
    1582:	6e 84       	ldd	r6, Y+14	; 0x0e
    1584:	7d 84       	ldd	r7, Y+13	; 0x0d
    1586:	8c 84       	ldd	r8, Y+12	; 0x0c
    1588:	9b 84       	ldd	r9, Y+11	; 0x0b
    158a:	aa 84       	ldd	r10, Y+10	; 0x0a
    158c:	b9 84       	ldd	r11, Y+9	; 0x09
    158e:	c8 84       	ldd	r12, Y+8	; 0x08
    1590:	df 80       	ldd	r13, Y+7	; 0x07
    1592:	ee 80       	ldd	r14, Y+6	; 0x06
    1594:	fd 80       	ldd	r15, Y+5	; 0x05
    1596:	0c 81       	ldd	r16, Y+4	; 0x04
    1598:	1b 81       	ldd	r17, Y+3	; 0x03
    159a:	aa 81       	ldd	r26, Y+2	; 0x02
    159c:	b9 81       	ldd	r27, Y+1	; 0x01
    159e:	ce 0f       	add	r28, r30
    15a0:	d1 1d       	adc	r29, r1
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	f8 94       	cli
    15a6:	de bf       	out	0x3e, r29	; 62
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	cd bf       	out	0x3d, r28	; 61
    15ac:	ed 01       	movw	r28, r26
    15ae:	08 95       	ret

000015b0 <_exit>:
    15b0:	f8 94       	cli

000015b2 <__stop_program>:
    15b2:	ff cf       	rjmp	.-2      	; 0x15b2 <__stop_program>
