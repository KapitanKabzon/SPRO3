
SDTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00800100  000016ca  0000175e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  00800186  00800186  000017e4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001840  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c0d  00000000  00000000  000019a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000708  00000000  00000000  000035ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000078a  00000000  00000000  00003cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000508  00000000  00000000  00004440  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bb  00000000  00000000  00004948  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021a6  00000000  00000000  00004e03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00006fa9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea ec       	ldi	r30, 0xCA	; 202
      7c:	f6 e1       	ldi	r31, 0x16	; 22
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 38       	cpi	r26, 0x86	; 134
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a6 e8       	ldi	r26, 0x86	; 134
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 3b       	cpi	r26, 0xB9	; 185
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
      9e:	0c 94 63 0b 	jmp	0x16c6	; 0x16c6 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <errorHalt>:
	}
}

void errorHalt(char *msg)
{
	printf("Error: %s\n", msg);
      a6:	9f 93       	push	r25
      a8:	8f 93       	push	r24
      aa:	8c e1       	ldi	r24, 0x1C	; 28
      ac:	91 e0       	ldi	r25, 0x01	; 1
      ae:	9f 93       	push	r25
      b0:	8f 93       	push	r24
      b2:	0e 94 98 08 	call	0x1130	; 0x1130 <printf>
      b6:	0f 90       	pop	r0
      b8:	0f 90       	pop	r0
      ba:	0f 90       	pop	r0
      bc:	0f 90       	pop	r0
      be:	08 95       	ret

000000c0 <main>:

FATFS fs;
const char MyFilenameStr[] = {"README.TXT"};

int main(void)
{	
      c0:	ef 92       	push	r14
      c2:	ff 92       	push	r15
      c4:	0f 93       	push	r16
      c6:	1f 93       	push	r17
      c8:	cf 93       	push	r28
      ca:	df 93       	push	r29
      cc:	cd b7       	in	r28, 0x3d	; 61
      ce:	de b7       	in	r29, 0x3e	; 62
      d0:	a2 97       	sbiw	r28, 0x22	; 34
      d2:	0f b6       	in	r0, 0x3f	; 63
      d4:	f8 94       	cli
      d6:	de bf       	out	0x3e, r29	; 62
      d8:	0f be       	out	0x3f, r0	; 63
      da:	cd bf       	out	0x3d, r28	; 61
	uint8_t buf[32];
	
	uart_init();
      dc:	0e 94 40 08 	call	0x1080	; 0x1080 <uart_init>
	io_redirect();
      e0:	0e 94 51 08 	call	0x10a2	; 0x10a2 <io_redirect>
	
	disk_initialize();
      e4:	0e 94 19 01 	call	0x232	; 0x232 <disk_initialize>
	
	if (pf_mount(&fs))
      e8:	88 e8       	ldi	r24, 0x88	; 136
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	0e 94 92 05 	call	0xb24	; 0xb24 <pf_mount>
      f0:	88 23       	and	r24, r24
      f2:	21 f0       	breq	.+8      	; 0xfc <main+0x3c>
		errorHalt("pf_mount");
      f4:	87 e2       	ldi	r24, 0x27	; 39
      f6:	91 e0       	ldi	r25, 0x01	; 1
      f8:	0e 94 53 00 	call	0xa6	; 0xa6 <errorHalt>
		
	if (pf_open(MyFilenameStr))
      fc:	87 e4       	ldi	r24, 0x47	; 71
      fe:	91 e0       	ldi	r25, 0x01	; 1
     100:	0e 94 df 06 	call	0xdbe	; 0xdbe <pf_open>
     104:	88 23       	and	r24, r24
     106:	21 f0       	breq	.+8      	; 0x110 <main+0x50>
		errorHalt("pf_open");
     108:	80 e3       	ldi	r24, 0x30	; 48
     10a:	91 e0       	ldi	r25, 0x01	; 1
     10c:	0e 94 53 00 	call	0xa6	; 0xa6 <errorHalt>
	
	while(1) {
		UINT nr;
		if(pf_read(buf, sizeof(buf), &nr))
     110:	8e 01       	movw	r16, r28
     112:	0f 5f       	subi	r16, 0xFF	; 255
     114:	1f 4f       	sbci	r17, 0xFF	; 255
			errorHalt("pf_read");
		if (nr == 0)
			break;
		
		printf("%d, %d", buf, nr);
     116:	0f 2e       	mov	r0, r31
     118:	f0 e4       	ldi	r31, 0x40	; 64
     11a:	ef 2e       	mov	r14, r31
     11c:	f1 e0       	ldi	r31, 0x01	; 1
     11e:	ff 2e       	mov	r15, r31
     120:	f0 2d       	mov	r31, r0
	if (pf_open(MyFilenameStr))
		errorHalt("pf_open");
	
	while(1) {
		UINT nr;
		if(pf_read(buf, sizeof(buf), &nr))
     122:	ae 01       	movw	r20, r28
     124:	4f 5d       	subi	r20, 0xDF	; 223
     126:	5f 4f       	sbci	r21, 0xFF	; 255
     128:	60 e2       	ldi	r22, 0x20	; 32
     12a:	70 e0       	ldi	r23, 0x00	; 0
     12c:	c8 01       	movw	r24, r16
     12e:	0e 94 3b 07 	call	0xe76	; 0xe76 <pf_read>
     132:	88 23       	and	r24, r24
     134:	21 f0       	breq	.+8      	; 0x13e <main+0x7e>
			errorHalt("pf_read");
     136:	88 e3       	ldi	r24, 0x38	; 56
     138:	91 e0       	ldi	r25, 0x01	; 1
     13a:	0e 94 53 00 	call	0xa6	; 0xa6 <errorHalt>
		if (nr == 0)
     13e:	29 a1       	ldd	r18, Y+33	; 0x21
     140:	3a a1       	ldd	r19, Y+34	; 0x22
     142:	21 15       	cp	r18, r1
     144:	31 05       	cpc	r19, r1
     146:	79 f0       	breq	.+30     	; 0x166 <main+0xa6>
			break;
		
		printf("%d, %d", buf, nr);
     148:	3f 93       	push	r19
     14a:	2f 93       	push	r18
     14c:	1f 93       	push	r17
     14e:	0f 93       	push	r16
     150:	ff 92       	push	r15
     152:	ef 92       	push	r14
     154:	0e 94 98 08 	call	0x1130	; 0x1130 <printf>
	}
     158:	0f 90       	pop	r0
     15a:	0f 90       	pop	r0
     15c:	0f 90       	pop	r0
     15e:	0f 90       	pop	r0
     160:	0f 90       	pop	r0
     162:	0f 90       	pop	r0
     164:	de cf       	rjmp	.-68     	; 0x122 <main+0x62>
}
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	a2 96       	adiw	r28, 0x22	; 34
     16c:	0f b6       	in	r0, 0x3f	; 63
     16e:	f8 94       	cli
     170:	de bf       	out	0x3e, r29	; 62
     172:	0f be       	out	0x3f, r0	; 63
     174:	cd bf       	out	0x3d, r28	; 61
     176:	df 91       	pop	r29
     178:	cf 91       	pop	r28
     17a:	1f 91       	pop	r17
     17c:	0f 91       	pop	r16
     17e:	ff 90       	pop	r15
     180:	ef 90       	pop	r14
     182:	08 95       	ret

00000184 <spi_init>:
	return res;
}

void spi_init()
{
	DDRB |= CS; // SD circuit select as output
     184:	22 9a       	sbi	0x04, 2	; 4
	DDRB |= MOSI + SCK; // MOSI and SCK as outputs
     186:	84 b1       	in	r24, 0x04	; 4
     188:	88 62       	ori	r24, 0x28	; 40
     18a:	84 b9       	out	0x04, r24	; 4
	PORTB |= MISO; // pullup in MISO, might not be needed
     18c:	2c 9a       	sbi	0x05, 4	; 5
	
	// Enable SPI, master, set clock rate fck/128
	SPCR = _BV(SPE) | _BV(MSTR) | _BV(SPR0) | _BV(SPR1);
     18e:	83 e5       	ldi	r24, 0x53	; 83
     190:	8c bd       	out	0x2c, r24	; 44
     192:	08 95       	ret

00000194 <rcv_spi>:
}

uint8_t rcv_spi()
{
	SPDR = 0xFF;
     194:	8f ef       	ldi	r24, 0xFF	; 255
     196:	8e bd       	out	0x2e, r24	; 46
	while((SPSR & 0x80) == 0);
     198:	0d b4       	in	r0, 0x2d	; 45
     19a:	07 fe       	sbrs	r0, 7
     19c:	fd cf       	rjmp	.-6      	; 0x198 <rcv_spi+0x4>
	return SPDR;
     19e:	8e b5       	in	r24, 0x2e	; 46
}
     1a0:	08 95       	ret

000001a2 <xmit_spi>:

uint8_t xmit_spi(uint8_t byte)
{
	SPDR = byte;
     1a2:	8e bd       	out	0x2e, r24	; 46
	while((SPSR & 0x80) == 0);
     1a4:	0d b4       	in	r0, 0x2d	; 45
     1a6:	07 fe       	sbrs	r0, 7
     1a8:	fd cf       	rjmp	.-6      	; 0x1a4 <xmit_spi+0x2>
	return SPDR;
     1aa:	8e b5       	in	r24, 0x2e	; 46
}
     1ac:	08 95       	ret

000001ae <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     1ae:	ff 92       	push	r15
     1b0:	0f 93       	push	r16
     1b2:	1f 93       	push	r17
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
     1b8:	c8 2f       	mov	r28, r24
     1ba:	d4 2f       	mov	r29, r20
     1bc:	15 2f       	mov	r17, r21
     1be:	06 2f       	mov	r16, r22
     1c0:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     1c2:	88 23       	and	r24, r24
     1c4:	4c f4       	brge	.+18     	; 0x1d8 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     1c6:	40 e0       	ldi	r20, 0x00	; 0
     1c8:	50 e0       	ldi	r21, 0x00	; 0
     1ca:	ba 01       	movw	r22, r20
     1cc:	87 e7       	ldi	r24, 0x77	; 119
     1ce:	0e 94 d7 00 	call	0x1ae	; 0x1ae <send_cmd>
		if (res > 1) return res;
     1d2:	82 30       	cpi	r24, 0x02	; 2
     1d4:	40 f5       	brcc	.+80     	; 0x226 <send_cmd+0x78>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     1d6:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	DESELECT();
     1d8:	2a 9a       	sbi	0x05, 2	; 5
	rcv_spi();
     1da:	0e 94 ca 00 	call	0x194	; 0x194 <rcv_spi>
	SELECT();
     1de:	2a 98       	cbi	0x05, 2	; 5
	rcv_spi();
     1e0:	0e 94 ca 00 	call	0x194	; 0x194 <rcv_spi>

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
     1e4:	8c 2f       	mov	r24, r28
     1e6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     1ea:	8f 2d       	mov	r24, r15
     1ec:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     1f0:	80 2f       	mov	r24, r16
     1f2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     1f6:	81 2f       	mov	r24, r17
     1f8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
     1fc:	8d 2f       	mov	r24, r29
     1fe:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     202:	c0 34       	cpi	r28, 0x40	; 64
     204:	21 f0       	breq	.+8      	; 0x20e <send_cmd+0x60>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     206:	c8 34       	cpi	r28, 0x48	; 72
     208:	21 f4       	brne	.+8      	; 0x212 <send_cmd+0x64>
     20a:	87 e8       	ldi	r24, 0x87	; 135
     20c:	03 c0       	rjmp	.+6      	; 0x214 <send_cmd+0x66>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     20e:	85 e9       	ldi	r24, 0x95	; 149
     210:	01 c0       	rjmp	.+2      	; 0x214 <send_cmd+0x66>
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
     212:	81 e0       	ldi	r24, 0x01	; 1
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
	xmit_spi(n);
     214:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <xmit_spi>
     218:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
     21a:	0e 94 ca 00 	call	0x194	; 0x194 <rcv_spi>
	} while ((res & 0x80) && --n);
     21e:	88 23       	and	r24, r24
     220:	14 f4       	brge	.+4      	; 0x226 <send_cmd+0x78>
     222:	c1 50       	subi	r28, 0x01	; 1
     224:	d1 f7       	brne	.-12     	; 0x21a <send_cmd+0x6c>

	return res;			/* Return with the response value */
}
     226:	df 91       	pop	r29
     228:	cf 91       	pop	r28
     22a:	1f 91       	pop	r17
     22c:	0f 91       	pop	r16
     22e:	ff 90       	pop	r15
     230:	08 95       	ret

00000232 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
     232:	cf 92       	push	r12
     234:	df 92       	push	r13
     236:	ef 92       	push	r14
     238:	ff 92       	push	r15
     23a:	0f 93       	push	r16
     23c:	1f 93       	push	r17
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
     242:	00 d0       	rcall	.+0      	; 0x244 <disk_initialize+0x12>
     244:	00 d0       	rcall	.+0      	; 0x246 <disk_initialize+0x14>
     246:	cd b7       	in	r28, 0x3d	; 61
     248:	de b7       	in	r29, 0x3e	; 62

#if _USE_WRITE	
	if (CardType && MMC_SEL) disk_writep(0, 0);	/* Finalize write process if it is in progress */
#endif	

 	spi_init();
     24a:	0e 94 c2 00 	call	0x184	; 0x184 <spi_init>
 	DESELECT();
     24e:	2a 9a       	sbi	0x05, 2	; 5
     250:	0a e0       	ldi	r16, 0x0A	; 10
     252:	10 e0       	ldi	r17, 0x00	; 0

// 	SPCR = 0b01010000;
// 	SPSR = 0;

 	for (t = 10; t; t--) rcv_spi();	/* 80 dummy clocks with CS=H */
     254:	0e 94 ca 00 	call	0x194	; 0x194 <rcv_spi>
     258:	01 50       	subi	r16, 0x01	; 1
     25a:	11 09       	sbc	r17, r1
     25c:	d9 f7       	brne	.-10     	; 0x254 <disk_initialize+0x22>
	SELECT();
     25e:	2a 98       	cbi	0x05, 2	; 5
	
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     260:	40 e0       	ldi	r20, 0x00	; 0
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	ba 01       	movw	r22, r20
     266:	80 e4       	ldi	r24, 0x40	; 64
     268:	0e 94 d7 00 	call	0x1ae	; 0x1ae <send_cmd>
     26c:	81 30       	cpi	r24, 0x01	; 1
     26e:	09 f0       	breq	.+2      	; 0x272 <disk_initialize+0x40>
     270:	7d c0       	rjmp	.+250    	; 0x36c <disk_initialize+0x13a>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
     272:	4a ea       	ldi	r20, 0xAA	; 170
     274:	51 e0       	ldi	r21, 0x01	; 1
     276:	60 e0       	ldi	r22, 0x00	; 0
     278:	70 e0       	ldi	r23, 0x00	; 0
     27a:	88 e4       	ldi	r24, 0x48	; 72
     27c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <send_cmd>
     280:	81 30       	cpi	r24, 0x01	; 1
     282:	09 f0       	breq	.+2      	; 0x286 <disk_initialize+0x54>
     284:	42 c0       	rjmp	.+132    	; 0x30a <disk_initialize+0xd8>
     286:	ce 01       	movw	r24, r28
     288:	01 96       	adiw	r24, 0x01	; 1
     28a:	6c 01       	movw	r12, r24
     28c:	7e 01       	movw	r14, r28
     28e:	95 e0       	ldi	r25, 0x05	; 5
     290:	e9 0e       	add	r14, r25
     292:	f1 1c       	adc	r15, r1
     294:	86 01       	movw	r16, r12
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
     296:	0e 94 ca 00 	call	0x194	; 0x194 <rcv_spi>
     29a:	f8 01       	movw	r30, r16
     29c:	81 93       	st	Z+, r24
     29e:	8f 01       	movw	r16, r30
     2a0:	ee 15       	cp	r30, r14
     2a2:	ff 05       	cpc	r31, r15
     2a4:	c1 f7       	brne	.-16     	; 0x296 <disk_initialize+0x64>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     2a6:	8b 81       	ldd	r24, Y+3	; 0x03
     2a8:	81 30       	cpi	r24, 0x01	; 1
     2aa:	09 f0       	breq	.+2      	; 0x2ae <disk_initialize+0x7c>
     2ac:	61 c0       	rjmp	.+194    	; 0x370 <disk_initialize+0x13e>
     2ae:	8c 81       	ldd	r24, Y+4	; 0x04
     2b0:	8a 3a       	cpi	r24, 0xAA	; 170
     2b2:	31 f0       	breq	.+12     	; 0x2c0 <disk_initialize+0x8e>
// 	SPSR = 0;

 	for (t = 10; t; t--) rcv_spi();	/* 80 dummy clocks with CS=H */
	SELECT();
	
	ty = 0;
     2b4:	f1 2c       	mov	r15, r1
     2b6:	6c c0       	rjmp	.+216    	; 0x390 <disk_initialize+0x15e>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				for (t = 25000; t && send_cmd(ACMD41, 1UL << 30); t--);	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     2b8:	01 50       	subi	r16, 0x01	; 1
     2ba:	11 09       	sbc	r17, r1
     2bc:	19 f4       	brne	.+6      	; 0x2c4 <disk_initialize+0x92>
     2be:	5a c0       	rjmp	.+180    	; 0x374 <disk_initialize+0x142>
     2c0:	08 ea       	ldi	r16, 0xA8	; 168
     2c2:	11 e6       	ldi	r17, 0x61	; 97
     2c4:	40 e0       	ldi	r20, 0x00	; 0
     2c6:	50 e0       	ldi	r21, 0x00	; 0
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	70 e4       	ldi	r23, 0x40	; 64
     2cc:	89 ee       	ldi	r24, 0xE9	; 233
     2ce:	0e 94 d7 00 	call	0x1ae	; 0x1ae <send_cmd>
     2d2:	81 11       	cpse	r24, r1
     2d4:	f1 cf       	rjmp	.-30     	; 0x2b8 <disk_initialize+0x86>
				if (t && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     2d6:	01 2b       	or	r16, r17
     2d8:	09 f4       	brne	.+2      	; 0x2dc <disk_initialize+0xaa>
     2da:	4e c0       	rjmp	.+156    	; 0x378 <disk_initialize+0x146>
     2dc:	40 e0       	ldi	r20, 0x00	; 0
     2de:	50 e0       	ldi	r21, 0x00	; 0
     2e0:	ba 01       	movw	r22, r20
     2e2:	8a e7       	ldi	r24, 0x7A	; 122
     2e4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <send_cmd>
     2e8:	81 11       	cpse	r24, r1
     2ea:	48 c0       	rjmp	.+144    	; 0x37c <disk_initialize+0x14a>
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
     2ec:	0e 94 ca 00 	call	0x194	; 0x194 <rcv_spi>
     2f0:	f6 01       	movw	r30, r12
     2f2:	81 93       	st	Z+, r24
     2f4:	6f 01       	movw	r12, r30
     2f6:	ee 15       	cp	r30, r14
     2f8:	ff 05       	cpc	r31, r15
     2fa:	c1 f7       	brne	.-16     	; 0x2ec <disk_initialize+0xba>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     2fc:	89 81       	ldd	r24, Y+1	; 0x01
     2fe:	86 fd       	sbrc	r24, 6
     300:	3f c0       	rjmp	.+126    	; 0x380 <disk_initialize+0x14e>
     302:	68 94       	set
     304:	ff 24       	eor	r15, r15
     306:	f2 f8       	bld	r15, 2
     308:	43 c0       	rjmp	.+134    	; 0x390 <disk_initialize+0x15e>
				}
			}
		} else {							/* SDv1 or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     30a:	40 e0       	ldi	r20, 0x00	; 0
     30c:	50 e0       	ldi	r21, 0x00	; 0
     30e:	ba 01       	movw	r22, r20
     310:	89 ee       	ldi	r24, 0xE9	; 233
     312:	0e 94 d7 00 	call	0x1ae	; 0x1ae <send_cmd>
     316:	82 30       	cpi	r24, 0x02	; 2
     318:	38 f0       	brcs	.+14     	; 0x328 <disk_initialize+0xf6>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
     31a:	ff 24       	eor	r15, r15
     31c:	f3 94       	inc	r15
     31e:	0f 2e       	mov	r0, r31
     320:	f1 e4       	ldi	r31, 0x41	; 65
     322:	ef 2e       	mov	r14, r31
     324:	f0 2d       	mov	r31, r0
     326:	07 c0       	rjmp	.+14     	; 0x336 <disk_initialize+0x104>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
     328:	68 94       	set
     32a:	ff 24       	eor	r15, r15
     32c:	f1 f8       	bld	r15, 1
     32e:	0f 2e       	mov	r0, r31
     330:	f9 ee       	ldi	r31, 0xE9	; 233
     332:	ef 2e       	mov	r14, r31
     334:	f0 2d       	mov	r31, r0
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (t = 25000; t && send_cmd(cmd, 0); t--) ;	/* Wait for leaving idle state */
     336:	08 ea       	ldi	r16, 0xA8	; 168
     338:	11 e6       	ldi	r17, 0x61	; 97
     33a:	03 c0       	rjmp	.+6      	; 0x342 <disk_initialize+0x110>
     33c:	01 50       	subi	r16, 0x01	; 1
     33e:	11 09       	sbc	r17, r1
     340:	21 f1       	breq	.+72     	; 0x38a <disk_initialize+0x158>
     342:	40 e0       	ldi	r20, 0x00	; 0
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	ba 01       	movw	r22, r20
     348:	8e 2d       	mov	r24, r14
     34a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <send_cmd>
     34e:	81 11       	cpse	r24, r1
     350:	f5 cf       	rjmp	.-22     	; 0x33c <disk_initialize+0x10a>
			if (!t || send_cmd(CMD16, 512) != 0) {			/* Set R/W block length to 512 */
     352:	01 2b       	or	r16, r17
     354:	e1 f0       	breq	.+56     	; 0x38e <disk_initialize+0x15c>
     356:	40 e0       	ldi	r20, 0x00	; 0
     358:	52 e0       	ldi	r21, 0x02	; 2
     35a:	60 e0       	ldi	r22, 0x00	; 0
     35c:	70 e0       	ldi	r23, 0x00	; 0
     35e:	80 e5       	ldi	r24, 0x50	; 80
     360:	0e 94 d7 00 	call	0x1ae	; 0x1ae <send_cmd>
     364:	88 23       	and	r24, r24
     366:	a1 f0       	breq	.+40     	; 0x390 <disk_initialize+0x15e>
				ty = 0;
     368:	f1 2c       	mov	r15, r1
     36a:	12 c0       	rjmp	.+36     	; 0x390 <disk_initialize+0x15e>
// 	SPSR = 0;

 	for (t = 10; t; t--) rcv_spi();	/* 80 dummy clocks with CS=H */
	SELECT();
	
	ty = 0;
     36c:	f1 2c       	mov	r15, r1
     36e:	10 c0       	rjmp	.+32     	; 0x390 <disk_initialize+0x15e>
     370:	f1 2c       	mov	r15, r1
     372:	0e c0       	rjmp	.+28     	; 0x390 <disk_initialize+0x15e>
     374:	f1 2c       	mov	r15, r1
     376:	0c c0       	rjmp	.+24     	; 0x390 <disk_initialize+0x15e>
     378:	f1 2c       	mov	r15, r1
     37a:	0a c0       	rjmp	.+20     	; 0x390 <disk_initialize+0x15e>
     37c:	f1 2c       	mov	r15, r1
     37e:	08 c0       	rjmp	.+16     	; 0x390 <disk_initialize+0x15e>
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				for (t = 25000; t && send_cmd(ACMD41, 1UL << 30); t--);	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (t && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     380:	0f 2e       	mov	r0, r31
     382:	fc e0       	ldi	r31, 0x0C	; 12
     384:	ff 2e       	mov	r15, r31
     386:	f0 2d       	mov	r31, r0
     388:	03 c0       	rjmp	.+6      	; 0x390 <disk_initialize+0x15e>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (t = 25000; t && send_cmd(cmd, 0); t--) ;	/* Wait for leaving idle state */
			if (!t || send_cmd(CMD16, 512) != 0) {			/* Set R/W block length to 512 */
				ty = 0;
     38a:	f1 2c       	mov	r15, r1
     38c:	01 c0       	rjmp	.+2      	; 0x390 <disk_initialize+0x15e>
     38e:	f1 2c       	mov	r15, r1
			}
		}
	}
	CardType = ty;
     390:	f0 92 b2 01 	sts	0x01B2, r15
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
     394:	2a 9a       	sbi	0x05, 2	; 5
	rcv_spi();
     396:	0e 94 ca 00 	call	0x194	; 0x194 <rcv_spi>
		}
	}
	CardType = ty;
	release_spi();

	return ty ? 0 : STA_NOINIT;
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	f1 10       	cpse	r15, r1
     39e:	80 e0       	ldi	r24, 0x00	; 0
}
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	0f 90       	pop	r0
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
     3b0:	ff 90       	pop	r15
     3b2:	ef 90       	pop	r14
     3b4:	df 90       	pop	r13
     3b6:	cf 90       	pop	r12
     3b8:	08 95       	ret

000003ba <disk_readp>:
	BYTE *dest,		/* Pointer to the destination object to put data */
	DWORD lba,		/* Start sector number (LBA) */
	WORD ofs,		/* Byte offset in the sector (0..511) */
	WORD cnt		/* Byte count (1..512), b15:destination flag */
)
{
     3ba:	cf 92       	push	r12
     3bc:	df 92       	push	r13
     3be:	ef 92       	push	r14
     3c0:	ff 92       	push	r15
     3c2:	0f 93       	push	r16
     3c4:	1f 93       	push	r17
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	7c 01       	movw	r14, r24
     3cc:	69 01       	movw	r12, r18
	DRESULT res;
	BYTE rc;
	WORD t;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert LBA to BA if needed */
     3ce:	80 91 b2 01 	lds	r24, 0x01B2
     3d2:	83 fd       	sbrc	r24, 3
     3d4:	09 c0       	rjmp	.+18     	; 0x3e8 <disk_readp+0x2e>
     3d6:	03 2e       	mov	r0, r19
     3d8:	39 e0       	ldi	r19, 0x09	; 9
     3da:	44 0f       	add	r20, r20
     3dc:	55 1f       	adc	r21, r21
     3de:	66 1f       	adc	r22, r22
     3e0:	77 1f       	adc	r23, r23
     3e2:	3a 95       	dec	r19
     3e4:	d1 f7       	brne	.-12     	; 0x3da <disk_readp+0x20>
     3e6:	30 2d       	mov	r19, r0

	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
     3e8:	81 e5       	ldi	r24, 0x51	; 81
     3ea:	0e 94 d7 00 	call	0x1ae	; 0x1ae <send_cmd>
     3ee:	81 11       	cpse	r24, r1
     3f0:	2c c0       	rjmp	.+88     	; 0x44a <disk_readp+0x90>
     3f2:	c0 e3       	ldi	r28, 0x30	; 48
     3f4:	d5 e7       	ldi	r29, 0x75	; 117

		t = 30000;
		do {							/* Wait for data packet in timeout of 100ms */
			rc = rcv_spi();
     3f6:	0e 94 ca 00 	call	0x194	; 0x194 <rcv_spi>
		} while (rc == 0xFF && --t);
     3fa:	8f 3f       	cpi	r24, 0xFF	; 255
     3fc:	21 f4       	brne	.+8      	; 0x406 <disk_readp+0x4c>
     3fe:	21 97       	sbiw	r28, 0x01	; 1
     400:	d1 f7       	brne	.-12     	; 0x3f6 <disk_readp+0x3c>
	WORD t;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert LBA to BA if needed */

	res = RES_ERROR;
     402:	c1 e0       	ldi	r28, 0x01	; 1
     404:	25 c0       	rjmp	.+74     	; 0x450 <disk_readp+0x96>
		t = 30000;
		do {							/* Wait for data packet in timeout of 100ms */
			rc = rcv_spi();
		} while (rc == 0xFF && --t);

		if (rc == 0xFE) {				/* A data packet arrived */
     406:	8e 3f       	cpi	r24, 0xFE	; 254
     408:	11 f5       	brne	.+68     	; 0x44e <disk_readp+0x94>
     40a:	c2 e0       	ldi	r28, 0x02	; 2
     40c:	d2 e0       	ldi	r29, 0x02	; 2
     40e:	c0 1b       	sub	r28, r16
     410:	d1 0b       	sbc	r29, r17
			t = 514 - ofs - cnt;
     412:	cc 19       	sub	r28, r12
     414:	dd 09       	sbc	r29, r13

			/* Skip leading bytes */
			if (ofs) {
     416:	c1 14       	cp	r12, r1
     418:	d1 04       	cpc	r13, r1
     41a:	31 f0       	breq	.+12     	; 0x428 <disk_readp+0x6e>
				do rcv_spi(); while (--ofs);
     41c:	0e 94 ca 00 	call	0x194	; 0x194 <rcv_spi>
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	c8 1a       	sub	r12, r24
     424:	d1 08       	sbc	r13, r1
     426:	d1 f7       	brne	.-12     	; 0x41c <disk_readp+0x62>
			}

			/* Receive a part of the sector */
			if (dest) {	/* Store data to the memory */
     428:	e1 14       	cp	r14, r1
     42a:	f1 04       	cpc	r15, r1
     42c:	41 f0       	breq	.+16     	; 0x43e <disk_readp+0x84>
				do {
					*dest++ = rcv_spi();
     42e:	0e 94 ca 00 	call	0x194	; 0x194 <rcv_spi>
     432:	f7 01       	movw	r30, r14
     434:	81 93       	st	Z+, r24
     436:	7f 01       	movw	r14, r30
				} while (--cnt);
     438:	01 50       	subi	r16, 0x01	; 1
     43a:	11 09       	sbc	r17, r1
     43c:	c1 f7       	brne	.-16     	; 0x42e <disk_readp+0x74>
// 					FORWARD(rcv_spi());
// 				} while (--cnt);
// 			}

			/* Skip trailing bytes and CRC */
			do rcv_spi(); while (--t);
     43e:	0e 94 ca 00 	call	0x194	; 0x194 <rcv_spi>
     442:	21 97       	sbiw	r28, 0x01	; 1
     444:	e1 f7       	brne	.-8      	; 0x43e <disk_readp+0x84>

			res = RES_OK;
     446:	c0 e0       	ldi	r28, 0x00	; 0
     448:	03 c0       	rjmp	.+6      	; 0x450 <disk_readp+0x96>
	WORD t;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert LBA to BA if needed */

	res = RES_ERROR;
     44a:	c1 e0       	ldi	r28, 0x01	; 1
     44c:	01 c0       	rjmp	.+2      	; 0x450 <disk_readp+0x96>
     44e:	c1 e0       	ldi	r28, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
     450:	2a 9a       	sbi	0x05, 2	; 5
	rcv_spi();
     452:	0e 94 ca 00 	call	0x194	; 0x194 <rcv_spi>
	}

	release_spi();

	return res;
}
     456:	8c 2f       	mov	r24, r28
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	1f 91       	pop	r17
     45e:	0f 91       	pop	r16
     460:	ff 90       	pop	r15
     462:	ef 90       	pop	r14
     464:	df 90       	pop	r13
     466:	cf 90       	pop	r12
     468:	08 95       	ret

0000046a <clust2sect>:

static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
     46a:	0f 93       	push	r16
     46c:	1f 93       	push	r17
	FATFS *fs = FatFs;
     46e:	e0 91 86 01 	lds	r30, 0x0186
     472:	f0 91 87 01 	lds	r31, 0x0187


	clst -= 2;
     476:	9b 01       	movw	r18, r22
     478:	ac 01       	movw	r20, r24
     47a:	22 50       	subi	r18, 0x02	; 2
     47c:	31 09       	sbc	r19, r1
     47e:	41 09       	sbc	r20, r1
     480:	51 09       	sbc	r21, r1
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     482:	86 81       	ldd	r24, Z+6	; 0x06
     484:	97 81       	ldd	r25, Z+7	; 0x07
     486:	a0 85       	ldd	r26, Z+8	; 0x08
     488:	b1 85       	ldd	r27, Z+9	; 0x09
     48a:	02 97       	sbiw	r24, 0x02	; 2
     48c:	a1 09       	sbc	r26, r1
     48e:	b1 09       	sbc	r27, r1
     490:	28 17       	cp	r18, r24
     492:	39 07       	cpc	r19, r25
     494:	4a 07       	cpc	r20, r26
     496:	5b 07       	cpc	r21, r27
     498:	68 f4       	brcc	.+26     	; 0x4b4 <clust2sect+0x4a>
	return (DWORD)clst * fs->csize + fs->database;
     49a:	a2 81       	ldd	r26, Z+2	; 0x02
     49c:	b0 e0       	ldi	r27, 0x00	; 0
     49e:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__muluhisi3>
     4a2:	02 89       	ldd	r16, Z+18	; 0x12
     4a4:	13 89       	ldd	r17, Z+19	; 0x13
     4a6:	24 89       	ldd	r18, Z+20	; 0x14
     4a8:	35 89       	ldd	r19, Z+21	; 0x15
     4aa:	60 0f       	add	r22, r16
     4ac:	71 1f       	adc	r23, r17
     4ae:	82 1f       	adc	r24, r18
     4b0:	93 1f       	adc	r25, r19
     4b2:	03 c0       	rjmp	.+6      	; 0x4ba <clust2sect+0x50>
{
	FATFS *fs = FatFs;


	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	70 e0       	ldi	r23, 0x00	; 0
     4b8:	cb 01       	movw	r24, r22
	return (DWORD)clst * fs->csize + fs->database;
}
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	08 95       	ret

000004c0 <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
     4c0:	0f 93       	push	r16
     4c2:	1f 93       	push	r17
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	fc 01       	movw	r30, r24
	CLUST clst;
	FATFS *fs = FatFs;
     4ca:	a0 91 86 01 	lds	r26, 0x0186
     4ce:	b0 91 87 01 	lds	r27, 0x0187


	dj->index = 0;
     4d2:	11 82       	std	Z+1, r1	; 0x01
     4d4:	10 82       	st	Z, r1
	clst = dj->sclust;
     4d6:	64 81       	ldd	r22, Z+4	; 0x04
     4d8:	75 81       	ldd	r23, Z+5	; 0x05
     4da:	86 81       	ldd	r24, Z+6	; 0x06
     4dc:	97 81       	ldd	r25, Z+7	; 0x07
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
     4de:	61 30       	cpi	r22, 0x01	; 1
     4e0:	71 05       	cpc	r23, r1
     4e2:	81 05       	cpc	r24, r1
     4e4:	91 05       	cpc	r25, r1
     4e6:	91 f1       	breq	.+100    	; 0x54c <dir_rewind+0x8c>
     4e8:	16 96       	adiw	r26, 0x06	; 6
     4ea:	0d 91       	ld	r16, X+
     4ec:	1d 91       	ld	r17, X+
     4ee:	2d 91       	ld	r18, X+
     4f0:	3c 91       	ld	r19, X
     4f2:	19 97       	sbiw	r26, 0x09	; 9
     4f4:	60 17       	cp	r22, r16
     4f6:	71 07       	cpc	r23, r17
     4f8:	82 07       	cpc	r24, r18
     4fa:	93 07       	cpc	r25, r19
     4fc:	48 f5       	brcc	.+82     	; 0x550 <dir_rewind+0x90>
     4fe:	ef 01       	movw	r28, r30
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
     500:	61 15       	cp	r22, r1
     502:	71 05       	cpc	r23, r1
     504:	81 05       	cpc	r24, r1
     506:	91 05       	cpc	r25, r1
     508:	29 f5       	brne	.+74     	; 0x554 <dir_rewind+0x94>
     50a:	8c 91       	ld	r24, X
     50c:	83 30       	cpi	r24, 0x03	; 3
     50e:	39 f5       	brne	.+78     	; 0x55e <dir_rewind+0x9e>
		clst = (CLUST)fs->dirbase;
     510:	1e 96       	adiw	r26, 0x0e	; 14
     512:	6d 91       	ld	r22, X+
     514:	7d 91       	ld	r23, X+
     516:	8d 91       	ld	r24, X+
     518:	9c 91       	ld	r25, X
     51a:	51 97       	sbiw	r26, 0x11	; 17
	dj->clust = clst;						/* Current cluster */
     51c:	60 87       	std	Z+8, r22	; 0x08
     51e:	71 87       	std	Z+9, r23	; 0x09
     520:	82 87       	std	Z+10, r24	; 0x0a
     522:	93 87       	std	Z+11, r25	; 0x0b
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     524:	61 15       	cp	r22, r1
     526:	71 05       	cpc	r23, r1
     528:	81 05       	cpc	r24, r1
     52a:	91 05       	cpc	r25, r1
     52c:	19 f0       	breq	.+6      	; 0x534 <dir_rewind+0x74>
     52e:	0e 94 35 02 	call	0x46a	; 0x46a <clust2sect>
     532:	06 c0       	rjmp	.+12     	; 0x540 <dir_rewind+0x80>
     534:	1e 96       	adiw	r26, 0x0e	; 14
     536:	6d 91       	ld	r22, X+
     538:	7d 91       	ld	r23, X+
     53a:	8d 91       	ld	r24, X+
     53c:	9c 91       	ld	r25, X
     53e:	51 97       	sbiw	r26, 0x11	; 17
     540:	6c 87       	std	Y+12, r22	; 0x0c
     542:	7d 87       	std	Y+13, r23	; 0x0d
     544:	8e 87       	std	Y+14, r24	; 0x0e
     546:	9f 87       	std	Y+15, r25	; 0x0f

	return FR_OK;	/* Seek succeeded */
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	0e c0       	rjmp	.+28     	; 0x568 <dir_rewind+0xa8>


	dj->index = 0;
	clst = dj->sclust;
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
		return FR_DISK_ERR;
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	0c c0       	rjmp	.+24     	; 0x568 <dir_rewind+0xa8>
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	0a c0       	rjmp	.+20     	; 0x568 <dir_rewind+0xa8>
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;						/* Current cluster */
     554:	60 87       	std	Z+8, r22	; 0x08
     556:	71 87       	std	Z+9, r23	; 0x09
     558:	82 87       	std	Z+10, r24	; 0x0a
     55a:	93 87       	std	Z+11, r25	; 0x0b
     55c:	e8 cf       	rjmp	.-48     	; 0x52e <dir_rewind+0x6e>
     55e:	10 86       	std	Z+8, r1	; 0x08
     560:	11 86       	std	Z+9, r1	; 0x09
     562:	12 86       	std	Z+10, r1	; 0x0a
     564:	13 86       	std	Z+11, r1	; 0x0b
     566:	e6 cf       	rjmp	.-52     	; 0x534 <dir_rewind+0x74>
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */

	return FR_OK;	/* Seek succeeded */
}
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	1f 91       	pop	r17
     56e:	0f 91       	pop	r16
     570:	08 95       	ret

00000572 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     572:	cf 92       	push	r12
     574:	df 92       	push	r13
     576:	ef 92       	push	r14
     578:	ff 92       	push	r15
     57a:	0f 93       	push	r16
     57c:	1f 93       	push	r17
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	ec 01       	movw	r28, r24
     584:	6a 01       	movw	r12, r20
     586:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
     588:	02 e0       	ldi	r16, 0x02	; 2
     58a:	10 e0       	ldi	r17, 0x00	; 0
     58c:	2e ef       	ldi	r18, 0xFE	; 254
     58e:	31 e0       	ldi	r19, 0x01	; 1
     590:	0e 94 dd 01 	call	0x3ba	; 0x3ba <disk_readp>
     594:	81 11       	cpse	r24, r1
     596:	26 c0       	rjmp	.+76     	; 0x5e4 <check_fs+0x72>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
     598:	88 81       	ld	r24, Y
     59a:	99 81       	ldd	r25, Y+1	; 0x01
     59c:	85 35       	cpi	r24, 0x55	; 85
     59e:	9a 4a       	sbci	r25, 0xAA	; 170
     5a0:	19 f5       	brne	.+70     	; 0x5e8 <check_fs+0x76>
		return 2;

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
     5a2:	26 e3       	ldi	r18, 0x36	; 54
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	b7 01       	movw	r22, r14
     5a8:	a6 01       	movw	r20, r12
     5aa:	ce 01       	movw	r24, r28
     5ac:	0e 94 dd 01 	call	0x3ba	; 0x3ba <disk_readp>
     5b0:	81 11       	cpse	r24, r1
     5b2:	05 c0       	rjmp	.+10     	; 0x5be <check_fs+0x4c>
     5b4:	88 81       	ld	r24, Y
     5b6:	99 81       	ldd	r25, Y+1	; 0x01
     5b8:	86 34       	cpi	r24, 0x46	; 70
     5ba:	91 44       	sbci	r25, 0x41	; 65
     5bc:	b9 f0       	breq	.+46     	; 0x5ec <check_fs+0x7a>
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
     5be:	02 e0       	ldi	r16, 0x02	; 2
     5c0:	10 e0       	ldi	r17, 0x00	; 0
     5c2:	22 e5       	ldi	r18, 0x52	; 82
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	b7 01       	movw	r22, r14
     5c8:	a6 01       	movw	r20, r12
     5ca:	ce 01       	movw	r24, r28
     5cc:	0e 94 dd 01 	call	0x3ba	; 0x3ba <disk_readp>
     5d0:	81 11       	cpse	r24, r1
     5d2:	0e c0       	rjmp	.+28     	; 0x5f0 <check_fs+0x7e>
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	28 81       	ld	r18, Y
     5d8:	39 81       	ldd	r19, Y+1	; 0x01
     5da:	26 34       	cpi	r18, 0x46	; 70
     5dc:	31 44       	sbci	r19, 0x41	; 65
     5de:	49 f4       	brne	.+18     	; 0x5f2 <check_fs+0x80>
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	07 c0       	rjmp	.+14     	; 0x5f2 <check_fs+0x80>
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
		return 3;
     5e4:	83 e0       	ldi	r24, 0x03	; 3
     5e6:	05 c0       	rjmp	.+10     	; 0x5f2 <check_fs+0x80>
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
		return 2;
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	03 c0       	rjmp	.+6      	; 0x5f2 <check_fs+0x80>

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
		return 0;
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	01 c0       	rjmp	.+2      	; 0x5f2 <check_fs+0x80>
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
		return 0;
	return 1;
     5f0:	81 e0       	ldi	r24, 0x01	; 1
}
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
     5fc:	ef 90       	pop	r14
     5fe:	df 90       	pop	r13
     600:	cf 90       	pop	r12
     602:	08 95       	ret

00000604 <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
     604:	4f 92       	push	r4
     606:	5f 92       	push	r5
     608:	6f 92       	push	r6
     60a:	7f 92       	push	r7
     60c:	af 92       	push	r10
     60e:	bf 92       	push	r11
     610:	cf 92       	push	r12
     612:	df 92       	push	r13
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
     618:	0f 93       	push	r16
     61a:	1f 93       	push	r17
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	00 d0       	rcall	.+0      	; 0x622 <get_fat+0x1e>
     622:	00 d0       	rcall	.+0      	; 0x624 <get_fat+0x20>
     624:	cd b7       	in	r28, 0x3d	; 61
     626:	de b7       	in	r29, 0x3e	; 62
     628:	6b 01       	movw	r12, r22
     62a:	7c 01       	movw	r14, r24
	WORD wc, bc, ofs;
	BYTE buf[4];
	FATFS *fs = FatFs;
     62c:	a0 90 86 01 	lds	r10, 0x0186
     630:	b0 90 87 01 	lds	r11, 0x0187


	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
     634:	82 e0       	ldi	r24, 0x02	; 2
     636:	c8 16       	cp	r12, r24
     638:	d1 04       	cpc	r13, r1
     63a:	e1 04       	cpc	r14, r1
     63c:	f1 04       	cpc	r15, r1
     63e:	08 f4       	brcc	.+2      	; 0x642 <get_fat+0x3e>
     640:	b6 c0       	rjmp	.+364    	; 0x7ae <get_fat+0x1aa>
     642:	f5 01       	movw	r30, r10
     644:	86 81       	ldd	r24, Z+6	; 0x06
     646:	97 81       	ldd	r25, Z+7	; 0x07
     648:	a0 85       	ldd	r26, Z+8	; 0x08
     64a:	b1 85       	ldd	r27, Z+9	; 0x09
     64c:	c8 16       	cp	r12, r24
     64e:	d9 06       	cpc	r13, r25
     650:	ea 06       	cpc	r14, r26
     652:	fb 06       	cpc	r15, r27
     654:	08 f0       	brcs	.+2      	; 0x658 <get_fat+0x54>
     656:	b0 c0       	rjmp	.+352    	; 0x7b8 <get_fat+0x1b4>
		return 1;

	switch (fs->fs_type) {
     658:	80 81       	ld	r24, Z
     65a:	82 30       	cpi	r24, 0x02	; 2
     65c:	09 f4       	brne	.+2      	; 0x660 <get_fat+0x5c>
     65e:	61 c0       	rjmp	.+194    	; 0x722 <get_fat+0x11e>
     660:	83 30       	cpi	r24, 0x03	; 3
     662:	09 f4       	brne	.+2      	; 0x666 <get_fat+0x62>
     664:	7c c0       	rjmp	.+248    	; 0x75e <get_fat+0x15a>
     666:	81 30       	cpi	r24, 0x01	; 1
     668:	09 f0       	breq	.+2      	; 0x66c <get_fat+0x68>
     66a:	ab c0       	rjmp	.+342    	; 0x7c2 <get_fat+0x1be>
#if _FS_FAT12
	case FS_FAT12 :
		bc = (WORD)clst; bc += bc / 2;
     66c:	26 01       	movw	r4, r12
     66e:	56 94       	lsr	r5
     670:	47 94       	ror	r4
     672:	4c 0c       	add	r4, r12
     674:	5d 1c       	adc	r5, r13
		ofs = bc % 512; bc /= 512;
     676:	92 01       	movw	r18, r4
     678:	31 70       	andi	r19, 0x01	; 1
     67a:	45 2c       	mov	r4, r5
     67c:	55 24       	eor	r5, r5
     67e:	46 94       	lsr	r4
		if (ofs != 511) {
     680:	2f 3f       	cpi	r18, 0xFF	; 255
     682:	f1 e0       	ldi	r31, 0x01	; 1
     684:	3f 07       	cpc	r19, r31
     686:	91 f0       	breq	.+36     	; 0x6ac <get_fat+0xa8>
			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
     688:	f5 01       	movw	r30, r10
     68a:	42 85       	ldd	r20, Z+10	; 0x0a
     68c:	53 85       	ldd	r21, Z+11	; 0x0b
     68e:	64 85       	ldd	r22, Z+12	; 0x0c
     690:	75 85       	ldd	r23, Z+13	; 0x0d
     692:	44 0d       	add	r20, r4
     694:	55 1d       	adc	r21, r5
     696:	61 1d       	adc	r22, r1
     698:	71 1d       	adc	r23, r1
     69a:	02 e0       	ldi	r16, 0x02	; 2
     69c:	10 e0       	ldi	r17, 0x00	; 0
     69e:	ce 01       	movw	r24, r28
     6a0:	01 96       	adiw	r24, 0x01	; 1
     6a2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <disk_readp>
     6a6:	88 23       	and	r24, r24
     6a8:	59 f1       	breq	.+86     	; 0x700 <get_fat+0xfc>
     6aa:	90 c0       	rjmp	.+288    	; 0x7cc <get_fat+0x1c8>
		} else {
			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
     6ac:	61 2c       	mov	r6, r1
     6ae:	71 2c       	mov	r7, r1
     6b0:	f5 01       	movw	r30, r10
     6b2:	42 85       	ldd	r20, Z+10	; 0x0a
     6b4:	53 85       	ldd	r21, Z+11	; 0x0b
     6b6:	64 85       	ldd	r22, Z+12	; 0x0c
     6b8:	75 85       	ldd	r23, Z+13	; 0x0d
     6ba:	44 0d       	add	r20, r4
     6bc:	55 1d       	adc	r21, r5
     6be:	66 1d       	adc	r22, r6
     6c0:	77 1d       	adc	r23, r7
     6c2:	01 e0       	ldi	r16, 0x01	; 1
     6c4:	10 e0       	ldi	r17, 0x00	; 0
     6c6:	2f ef       	ldi	r18, 0xFF	; 255
     6c8:	31 e0       	ldi	r19, 0x01	; 1
     6ca:	ce 01       	movw	r24, r28
     6cc:	01 96       	adiw	r24, 0x01	; 1
     6ce:	0e 94 dd 01 	call	0x3ba	; 0x3ba <disk_readp>
     6d2:	81 11       	cpse	r24, r1
     6d4:	80 c0       	rjmp	.+256    	; 0x7d6 <get_fat+0x1d2>
     6d6:	f5 01       	movw	r30, r10
     6d8:	42 85       	ldd	r20, Z+10	; 0x0a
     6da:	53 85       	ldd	r21, Z+11	; 0x0b
     6dc:	64 85       	ldd	r22, Z+12	; 0x0c
     6de:	75 85       	ldd	r23, Z+13	; 0x0d
     6e0:	4f 5f       	subi	r20, 0xFF	; 255
     6e2:	5f 4f       	sbci	r21, 0xFF	; 255
     6e4:	6f 4f       	sbci	r22, 0xFF	; 255
     6e6:	7f 4f       	sbci	r23, 0xFF	; 255
			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
     6e8:	44 0d       	add	r20, r4
     6ea:	55 1d       	adc	r21, r5
     6ec:	66 1d       	adc	r22, r6
     6ee:	77 1d       	adc	r23, r7
     6f0:	20 e0       	ldi	r18, 0x00	; 0
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	ce 01       	movw	r24, r28
     6f6:	02 96       	adiw	r24, 0x02	; 2
     6f8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <disk_readp>
     6fc:	81 11       	cpse	r24, r1
     6fe:	70 c0       	rjmp	.+224    	; 0x7e0 <get_fat+0x1dc>
		}
		wc = LD_WORD(buf);
     700:	69 81       	ldd	r22, Y+1	; 0x01
     702:	7a 81       	ldd	r23, Y+2	; 0x02
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
     704:	c0 fe       	sbrs	r12, 0
     706:	09 c0       	rjmp	.+18     	; 0x71a <get_fat+0x116>
     708:	72 95       	swap	r23
     70a:	62 95       	swap	r22
     70c:	6f 70       	andi	r22, 0x0F	; 15
     70e:	67 27       	eor	r22, r23
     710:	7f 70       	andi	r23, 0x0F	; 15
     712:	67 27       	eor	r22, r23
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	71 c0       	rjmp	.+226    	; 0x7fc <get_fat+0x1f8>
     71a:	7f 70       	andi	r23, 0x0F	; 15
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	6d c0       	rjmp	.+218    	; 0x7fc <get_fat+0x1f8>
#endif
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
     722:	96 01       	movw	r18, r12
     724:	33 27       	eor	r19, r19
     726:	22 0f       	add	r18, r18
     728:	33 1f       	adc	r19, r19
     72a:	77 27       	eor	r23, r23
     72c:	6f 2d       	mov	r22, r15
     72e:	5e 2d       	mov	r21, r14
     730:	4d 2d       	mov	r20, r13
     732:	f5 01       	movw	r30, r10
     734:	82 85       	ldd	r24, Z+10	; 0x0a
     736:	93 85       	ldd	r25, Z+11	; 0x0b
     738:	a4 85       	ldd	r26, Z+12	; 0x0c
     73a:	b5 85       	ldd	r27, Z+13	; 0x0d
     73c:	48 0f       	add	r20, r24
     73e:	59 1f       	adc	r21, r25
     740:	6a 1f       	adc	r22, r26
     742:	7b 1f       	adc	r23, r27
     744:	02 e0       	ldi	r16, 0x02	; 2
     746:	10 e0       	ldi	r17, 0x00	; 0
     748:	ce 01       	movw	r24, r28
     74a:	01 96       	adiw	r24, 0x01	; 1
     74c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <disk_readp>
     750:	81 11       	cpse	r24, r1
     752:	4b c0       	rjmp	.+150    	; 0x7ea <get_fat+0x1e6>
		return LD_WORD(buf);
     754:	69 81       	ldd	r22, Y+1	; 0x01
     756:	7a 81       	ldd	r23, Y+2	; 0x02
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	4f c0       	rjmp	.+158    	; 0x7fc <get_fat+0x1f8>
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
     75e:	96 01       	movw	r18, r12
     760:	2f 77       	andi	r18, 0x7F	; 127
     762:	33 27       	eor	r19, r19
     764:	22 0f       	add	r18, r18
     766:	33 1f       	adc	r19, r19
     768:	22 0f       	add	r18, r18
     76a:	33 1f       	adc	r19, r19
     76c:	68 94       	set
     76e:	16 f8       	bld	r1, 6
     770:	f6 94       	lsr	r15
     772:	e7 94       	ror	r14
     774:	d7 94       	ror	r13
     776:	c7 94       	ror	r12
     778:	16 94       	lsr	r1
     77a:	d1 f7       	brne	.-12     	; 0x770 <get_fat+0x16c>
     77c:	f5 01       	movw	r30, r10
     77e:	42 85       	ldd	r20, Z+10	; 0x0a
     780:	53 85       	ldd	r21, Z+11	; 0x0b
     782:	64 85       	ldd	r22, Z+12	; 0x0c
     784:	75 85       	ldd	r23, Z+13	; 0x0d
     786:	4c 0d       	add	r20, r12
     788:	5d 1d       	adc	r21, r13
     78a:	6e 1d       	adc	r22, r14
     78c:	7f 1d       	adc	r23, r15
     78e:	04 e0       	ldi	r16, 0x04	; 4
     790:	10 e0       	ldi	r17, 0x00	; 0
     792:	ce 01       	movw	r24, r28
     794:	01 96       	adiw	r24, 0x01	; 1
     796:	0e 94 dd 01 	call	0x3ba	; 0x3ba <disk_readp>
     79a:	81 11       	cpse	r24, r1
     79c:	2b c0       	rjmp	.+86     	; 0x7f4 <get_fat+0x1f0>
		return LD_DWORD(buf) & 0x0FFFFFFF;
     79e:	89 81       	ldd	r24, Y+1	; 0x01
     7a0:	9a 81       	ldd	r25, Y+2	; 0x02
     7a2:	ab 81       	ldd	r26, Y+3	; 0x03
     7a4:	bc 81       	ldd	r27, Y+4	; 0x04
     7a6:	bc 01       	movw	r22, r24
     7a8:	cd 01       	movw	r24, r26
     7aa:	9f 70       	andi	r25, 0x0F	; 15
     7ac:	27 c0       	rjmp	.+78     	; 0x7fc <get_fat+0x1f8>
	BYTE buf[4];
	FATFS *fs = FatFs;


	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
		return 1;
     7ae:	61 e0       	ldi	r22, 0x01	; 1
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	22 c0       	rjmp	.+68     	; 0x7fc <get_fat+0x1f8>
     7b8:	61 e0       	ldi	r22, 0x01	; 1
     7ba:	70 e0       	ldi	r23, 0x00	; 0
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	1d c0       	rjmp	.+58     	; 0x7fc <get_fat+0x1f8>
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
		return LD_DWORD(buf) & 0x0FFFFFFF;
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
     7c2:	61 e0       	ldi	r22, 0x01	; 1
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	18 c0       	rjmp	.+48     	; 0x7fc <get_fat+0x1f8>
     7cc:	61 e0       	ldi	r22, 0x01	; 1
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	13 c0       	rjmp	.+38     	; 0x7fc <get_fat+0x1f8>
     7d6:	61 e0       	ldi	r22, 0x01	; 1
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e c0       	rjmp	.+28     	; 0x7fc <get_fat+0x1f8>
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	09 c0       	rjmp	.+18     	; 0x7fc <get_fat+0x1f8>
     7ea:	61 e0       	ldi	r22, 0x01	; 1
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	04 c0       	rjmp	.+8      	; 0x7fc <get_fat+0x1f8>
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	90 e0       	ldi	r25, 0x00	; 0
}
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	1f 91       	pop	r17
     80a:	0f 91       	pop	r16
     80c:	ff 90       	pop	r15
     80e:	ef 90       	pop	r14
     810:	df 90       	pop	r13
     812:	cf 90       	pop	r12
     814:	bf 90       	pop	r11
     816:	af 90       	pop	r10
     818:	7f 90       	pop	r7
     81a:	6f 90       	pop	r6
     81c:	5f 90       	pop	r5
     81e:	4f 90       	pop	r4
     820:	08 95       	ret

00000822 <dir_next>:

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
	DIR *dj			/* Pointer to directory object */
)
{
     822:	cf 92       	push	r12
     824:	df 92       	push	r13
     826:	ef 92       	push	r14
     828:	ff 92       	push	r15
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
     832:	e0 90 86 01 	lds	r14, 0x0186
     836:	f0 90 87 01 	lds	r15, 0x0187


	i = dj->index + 1;
     83a:	fc 01       	movw	r30, r24
     83c:	c0 81       	ld	r28, Z
     83e:	d1 81       	ldd	r29, Z+1	; 0x01
     840:	21 96       	adiw	r28, 0x01	; 1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
     842:	09 f4       	brne	.+2      	; 0x846 <dir_next+0x24>
     844:	5c c0       	rjmp	.+184    	; 0x8fe <dir_next+0xdc>
     846:	44 85       	ldd	r20, Z+12	; 0x0c
     848:	55 85       	ldd	r21, Z+13	; 0x0d
     84a:	66 85       	ldd	r22, Z+14	; 0x0e
     84c:	77 85       	ldd	r23, Z+15	; 0x0f
     84e:	41 15       	cp	r20, r1
     850:	51 05       	cpc	r21, r1
     852:	61 05       	cpc	r22, r1
     854:	71 05       	cpc	r23, r1
     856:	09 f4       	brne	.+2      	; 0x85a <dir_next+0x38>
     858:	54 c0       	rjmp	.+168    	; 0x902 <__stack+0x3>
     85a:	8c 01       	movw	r16, r24
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
     85c:	ce 01       	movw	r24, r28
     85e:	8f 70       	andi	r24, 0x0F	; 15
     860:	99 27       	eor	r25, r25
     862:	89 2b       	or	r24, r25
     864:	09 f0       	breq	.+2      	; 0x868 <dir_next+0x46>
     866:	46 c0       	rjmp	.+140    	; 0x8f4 <dir_next+0xd2>
		dj->sect++;			/* Next sector */
     868:	4f 5f       	subi	r20, 0xFF	; 255
     86a:	5f 4f       	sbci	r21, 0xFF	; 255
     86c:	6f 4f       	sbci	r22, 0xFF	; 255
     86e:	7f 4f       	sbci	r23, 0xFF	; 255
     870:	44 87       	std	Z+12, r20	; 0x0c
     872:	55 87       	std	Z+13, r21	; 0x0d
     874:	66 87       	std	Z+14, r22	; 0x0e
     876:	77 87       	std	Z+15, r23	; 0x0f

		if (dj->clust == 0) {	/* Static table */
     878:	40 85       	ldd	r20, Z+8	; 0x08
     87a:	51 85       	ldd	r21, Z+9	; 0x09
     87c:	62 85       	ldd	r22, Z+10	; 0x0a
     87e:	73 85       	ldd	r23, Z+11	; 0x0b
     880:	41 15       	cp	r20, r1
     882:	51 05       	cpc	r21, r1
     884:	61 05       	cpc	r22, r1
     886:	71 05       	cpc	r23, r1
     888:	39 f4       	brne	.+14     	; 0x898 <dir_next+0x76>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
     88a:	f7 01       	movw	r30, r14
     88c:	84 81       	ldd	r24, Z+4	; 0x04
     88e:	95 81       	ldd	r25, Z+5	; 0x05
     890:	c8 17       	cp	r28, r24
     892:	d9 07       	cpc	r29, r25
     894:	c0 f5       	brcc	.+112    	; 0x906 <__stack+0x7>
     896:	2e c0       	rjmp	.+92     	; 0x8f4 <dir_next+0xd2>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
     898:	f7 01       	movw	r30, r14
     89a:	82 81       	ldd	r24, Z+2	; 0x02
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	9e 01       	movw	r18, r28
     8a2:	32 95       	swap	r19
     8a4:	22 95       	swap	r18
     8a6:	2f 70       	andi	r18, 0x0F	; 15
     8a8:	23 27       	eor	r18, r19
     8aa:	3f 70       	andi	r19, 0x0F	; 15
     8ac:	23 27       	eor	r18, r19
     8ae:	82 23       	and	r24, r18
     8b0:	93 23       	and	r25, r19
     8b2:	89 2b       	or	r24, r25
     8b4:	f9 f4       	brne	.+62     	; 0x8f4 <dir_next+0xd2>
				clst = get_fat(dj->clust);		/* Get next cluster */
     8b6:	cb 01       	movw	r24, r22
     8b8:	ba 01       	movw	r22, r20
     8ba:	0e 94 02 03 	call	0x604	; 0x604 <get_fat>
				if (clst <= 1) return FR_DISK_ERR;
     8be:	62 30       	cpi	r22, 0x02	; 2
     8c0:	71 05       	cpc	r23, r1
     8c2:	81 05       	cpc	r24, r1
     8c4:	91 05       	cpc	r25, r1
     8c6:	08 f1       	brcs	.+66     	; 0x90a <__stack+0xb>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
     8c8:	f7 01       	movw	r30, r14
     8ca:	c6 80       	ldd	r12, Z+6	; 0x06
     8cc:	d7 80       	ldd	r13, Z+7	; 0x07
     8ce:	e0 84       	ldd	r14, Z+8	; 0x08
     8d0:	f1 84       	ldd	r15, Z+9	; 0x09
     8d2:	6c 15       	cp	r22, r12
     8d4:	7d 05       	cpc	r23, r13
     8d6:	8e 05       	cpc	r24, r14
     8d8:	9f 05       	cpc	r25, r15
     8da:	c8 f4       	brcc	.+50     	; 0x90e <__stack+0xf>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
     8dc:	f8 01       	movw	r30, r16
     8de:	60 87       	std	Z+8, r22	; 0x08
     8e0:	71 87       	std	Z+9, r23	; 0x09
     8e2:	82 87       	std	Z+10, r24	; 0x0a
     8e4:	93 87       	std	Z+11, r25	; 0x0b
				dj->sect = clust2sect(clst);
     8e6:	0e 94 35 02 	call	0x46a	; 0x46a <clust2sect>
     8ea:	f8 01       	movw	r30, r16
     8ec:	64 87       	std	Z+12, r22	; 0x0c
     8ee:	75 87       	std	Z+13, r23	; 0x0d
     8f0:	86 87       	std	Z+14, r24	; 0x0e
     8f2:	97 87       	std	Z+15, r25	; 0x0f
			}
		}
	}

	dj->index = i;
     8f4:	f8 01       	movw	r30, r16
     8f6:	d1 83       	std	Z+1, r29	; 0x01
     8f8:	c0 83       	st	Z, r28

	return FR_OK;
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	09 c0       	rjmp	.+18     	; 0x910 <__stack+0x11>
	FATFS *fs = FatFs;


	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
     8fe:	83 e0       	ldi	r24, 0x03	; 3
     900:	07 c0       	rjmp	.+14     	; 0x910 <__stack+0x11>
     902:	83 e0       	ldi	r24, 0x03	; 3
     904:	05 c0       	rjmp	.+10     	; 0x910 <__stack+0x11>
	if (!(i % 16)) {		/* Sector changed? */
		dj->sect++;			/* Next sector */

		if (dj->clust == 0) {	/* Static table */
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
     906:	83 e0       	ldi	r24, 0x03	; 3
     908:	03 c0       	rjmp	.+6      	; 0x910 <__stack+0x11>
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	01 c0       	rjmp	.+2      	; 0x910 <__stack+0x11>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
					return FR_NO_FILE;			/* Report EOT */
     90e:	83 e0       	ldi	r24, 0x03	; 3
	}

	dj->index = i;

	return FR_OK;
}
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	ff 90       	pop	r15
     91a:	ef 90       	pop	r14
     91c:	df 90       	pop	r13
     91e:	cf 90       	pop	r12
     920:	08 95       	ret

00000922 <follow_path>:
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	BYTE *dir,			/* 32-byte working buffer */
	const char *path	/* Full-path string to find a file or directory */
)
{
     922:	2f 92       	push	r2
     924:	3f 92       	push	r3
     926:	4f 92       	push	r4
     928:	5f 92       	push	r5
     92a:	6f 92       	push	r6
     92c:	7f 92       	push	r7
     92e:	8f 92       	push	r8
     930:	9f 92       	push	r9
     932:	af 92       	push	r10
     934:	bf 92       	push	r11
     936:	cf 92       	push	r12
     938:	df 92       	push	r13
     93a:	ef 92       	push	r14
     93c:	ff 92       	push	r15
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	7c 01       	movw	r14, r24
     948:	6b 01       	movw	r12, r22
     94a:	5a 01       	movw	r10, r20
	FRESULT res;


	while (*path == ' ') path++;		/* Skip leading spaces */
     94c:	da 01       	movw	r26, r20
     94e:	8c 91       	ld	r24, X
     950:	80 32       	cpi	r24, 0x20	; 32
     952:	31 f4       	brne	.+12     	; 0x960 <follow_path+0x3e>
     954:	fa 01       	movw	r30, r20
     956:	31 96       	adiw	r30, 0x01	; 1
     958:	5f 01       	movw	r10, r30
     95a:	81 91       	ld	r24, Z+
     95c:	80 32       	cpi	r24, 0x20	; 32
     95e:	e1 f3       	breq	.-8      	; 0x958 <follow_path+0x36>
	if (*path == '/') path++;			/* Strip heading separator */
     960:	8f 32       	cpi	r24, 0x2F	; 47
     962:	19 f4       	brne	.+6      	; 0x96a <follow_path+0x48>
     964:	bf ef       	ldi	r27, 0xFF	; 255
     966:	ab 1a       	sub	r10, r27
     968:	bb 0a       	sbc	r11, r27
	dj->sclust = 0;						/* Set start directory (always root dir) */
     96a:	f7 01       	movw	r30, r14
     96c:	14 82       	std	Z+4, r1	; 0x04
     96e:	15 82       	std	Z+5, r1	; 0x05
     970:	16 82       	std	Z+6, r1	; 0x06
     972:	17 82       	std	Z+7, r1	; 0x07

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
     974:	d5 01       	movw	r26, r10
     976:	8c 91       	ld	r24, X
     978:	81 32       	cpi	r24, 0x21	; 33
     97a:	38 f4       	brcc	.+14     	; 0x98a <follow_path+0x68>
		res = dir_rewind(dj);
     97c:	c7 01       	movw	r24, r14
     97e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <dir_rewind>
     982:	58 2f       	mov	r21, r24
		dir[0] = 0;
     984:	f6 01       	movw	r30, r12
     986:	10 82       	st	Z, r1
     988:	b9 c0       	rjmp	.+370    	; 0xafc <follow_path+0x1da>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     98a:	68 94       	set
     98c:	99 24       	eor	r9, r9
     98e:	95 f8       	bld	r9, 5
     990:	61 2c       	mov	r6, r1
     992:	68 94       	set
     994:	44 24       	eor	r4, r4
     996:	43 f8       	bld	r4, 3
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
			i = 8; ni = 11;
     998:	24 2c       	mov	r2, r4
     99a:	0f 2e       	mov	r0, r31
     99c:	fb e0       	ldi	r31, 0x0B	; 11
     99e:	3f 2e       	mov	r3, r31
     9a0:	f0 2d       	mov	r31, r0
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
     9a2:	55 24       	eor	r5, r5
     9a4:	53 94       	inc	r5
     9a6:	e6 01       	movw	r28, r12
     9a8:	2b 96       	adiw	r28, 0x0b	; 11
	res = dir_rewind(dj);			/* Rewind directory object */
	if (res != FR_OK) return res;

	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
     9aa:	85 2c       	mov	r8, r5
     9ac:	76 2c       	mov	r7, r6
{
	BYTE c, d, ni, si, i, *sfn;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
     9ae:	f7 01       	movw	r30, r14
     9b0:	a2 81       	ldd	r26, Z+2	; 0x02
     9b2:	b3 81       	ldd	r27, Z+3	; 0x03
     9b4:	fd 01       	movw	r30, r26
     9b6:	cd 01       	movw	r24, r26
     9b8:	0b 96       	adiw	r24, 0x0b	; 11

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     9ba:	91 92       	st	Z+, r9
     9bc:	e8 17       	cp	r30, r24
     9be:	f9 07       	cpc	r31, r25
     9c0:	e1 f7       	brne	.-8      	; 0x9ba <follow_path+0x98>
     9c2:	96 2d       	mov	r25, r6
     9c4:	86 2d       	mov	r24, r6
     9c6:	34 2d       	mov	r19, r4
     9c8:	01 c0       	rjmp	.+2      	; 0x9cc <follow_path+0xaa>
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
     9ca:	82 2f       	mov	r24, r18
     9cc:	21 e0       	ldi	r18, 0x01	; 1
     9ce:	28 0f       	add	r18, r24
     9d0:	f5 01       	movw	r30, r10
     9d2:	e8 0f       	add	r30, r24
     9d4:	f1 1d       	adc	r31, r1
     9d6:	80 81       	ld	r24, Z
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
     9d8:	81 32       	cpi	r24, 0x21	; 33
     9da:	90 f0       	brcs	.+36     	; 0xa00 <follow_path+0xde>
     9dc:	8f 32       	cpi	r24, 0x2F	; 47
     9de:	81 f0       	breq	.+32     	; 0xa00 <follow_path+0xde>
		if (c == '.' || i >= ni) {
     9e0:	8e 32       	cpi	r24, 0x2E	; 46
     9e2:	09 f4       	brne	.+2      	; 0x9e6 <follow_path+0xc4>
     9e4:	83 c0       	rjmp	.+262    	; 0xaec <follow_path+0x1ca>
     9e6:	93 17       	cp	r25, r19
     9e8:	58 f4       	brcc	.+22     	; 0xa00 <follow_path+0xde>
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
     9ea:	4f e9       	ldi	r20, 0x9F	; 159
     9ec:	48 0f       	add	r20, r24
     9ee:	4a 31       	cpi	r20, 0x1A	; 26
     9f0:	08 f4       	brcc	.+2      	; 0x9f4 <follow_path+0xd2>
     9f2:	80 52       	subi	r24, 0x20	; 32
			sfn[i++] = c;
     9f4:	fd 01       	movw	r30, r26
     9f6:	e9 0f       	add	r30, r25
     9f8:	f1 1d       	adc	r31, r1
     9fa:	80 83       	st	Z, r24
     9fc:	9f 5f       	subi	r25, 0xFF	; 255
     9fe:	e5 cf       	rjmp	.-54     	; 0x9ca <follow_path+0xa8>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
     a00:	a2 0e       	add	r10, r18
     a02:	b1 1c       	adc	r11, r1

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
     a04:	95 2d       	mov	r25, r5
     a06:	81 32       	cpi	r24, 0x21	; 33
     a08:	08 f0       	brcs	.+2      	; 0xa0c <follow_path+0xea>
     a0a:	96 2d       	mov	r25, r6
     a0c:	1b 96       	adiw	r26, 0x0b	; 11
     a0e:	9c 93       	st	X, r25
{
	FRESULT res;
	BYTE c;


	res = dir_rewind(dj);			/* Rewind directory object */
     a10:	c7 01       	movw	r24, r14
     a12:	0e 94 60 02 	call	0x4c0	; 0x4c0 <dir_rewind>
     a16:	58 2f       	mov	r21, r24
	if (res != FR_OK) return res;
     a18:	81 11       	cpse	r24, r1
     a1a:	6e c0       	rjmp	.+220    	; 0xaf8 <follow_path+0x1d6>

	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
     a1c:	d7 01       	movw	r26, r14
     a1e:	2d 91       	ld	r18, X+
     a20:	3c 91       	ld	r19, X
     a22:	11 97       	sbiw	r26, 0x01	; 1
     a24:	2f 70       	andi	r18, 0x0F	; 15
     a26:	33 27       	eor	r19, r19
     a28:	22 0f       	add	r18, r18
     a2a:	33 1f       	adc	r19, r19
     a2c:	22 95       	swap	r18
     a2e:	32 95       	swap	r19
     a30:	30 7f       	andi	r19, 0xF0	; 240
     a32:	32 27       	eor	r19, r18
     a34:	20 7f       	andi	r18, 0xF0	; 240
     a36:	32 27       	eor	r19, r18
     a38:	1c 96       	adiw	r26, 0x0c	; 12
     a3a:	4d 91       	ld	r20, X+
     a3c:	5d 91       	ld	r21, X+
     a3e:	6d 91       	ld	r22, X+
     a40:	7c 91       	ld	r23, X
     a42:	1f 97       	sbiw	r26, 0x0f	; 15
     a44:	00 e2       	ldi	r16, 0x20	; 32
     a46:	10 e0       	ldi	r17, 0x00	; 0
     a48:	c6 01       	movw	r24, r12
     a4a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <disk_readp>
			? FR_DISK_ERR : FR_OK;
     a4e:	58 2d       	mov	r21, r8
     a50:	81 11       	cpse	r24, r1
     a52:	01 c0       	rjmp	.+2      	; 0xa56 <follow_path+0x134>
     a54:	57 2d       	mov	r21, r7
		if (res != FR_OK) break;
     a56:	51 11       	cpse	r21, r1
     a58:	4f c0       	rjmp	.+158    	; 0xaf8 <follow_path+0x1d6>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
     a5a:	f6 01       	movw	r30, r12
     a5c:	80 81       	ld	r24, Z
     a5e:	88 23       	and	r24, r24
     a60:	c1 f0       	breq	.+48     	; 0xa92 <follow_path+0x170>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
     a62:	83 85       	ldd	r24, Z+11	; 0x0b
     a64:	83 fd       	sbrc	r24, 3
     a66:	0e c0       	rjmp	.+28     	; 0xa84 <follow_path+0x162>
     a68:	d7 01       	movw	r26, r14
     a6a:	12 96       	adiw	r26, 0x02	; 2
     a6c:	2d 91       	ld	r18, X+
     a6e:	3c 91       	ld	r19, X
     a70:	13 97       	sbiw	r26, 0x03	; 3
     a72:	d9 01       	movw	r26, r18
     a74:	03 c0       	rjmp	.+6      	; 0xa7c <follow_path+0x15a>
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
     a76:	ec 17       	cp	r30, r28
     a78:	fd 07       	cpc	r31, r29
     a7a:	a9 f0       	breq	.+42     	; 0xaa6 <follow_path+0x184>
     a7c:	41 91       	ld	r20, Z+
     a7e:	9d 91       	ld	r25, X+
     a80:	49 17       	cp	r20, r25
     a82:	c9 f3       	breq	.-14     	; 0xa76 <follow_path+0x154>
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
		res = dir_next(dj);					/* Next entry */
     a84:	c7 01       	movw	r24, r14
     a86:	0e 94 11 04 	call	0x822	; 0x822 <dir_next>
     a8a:	58 2f       	mov	r21, r24
	} while (res == FR_OK);
     a8c:	88 23       	and	r24, r24
     a8e:	31 f2       	breq	.-116    	; 0xa1c <follow_path+0xfa>
     a90:	33 c0       	rjmp	.+102    	; 0xaf8 <follow_path+0x1d6>
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
     a92:	d7 01       	movw	r26, r14
     a94:	12 96       	adiw	r26, 0x02	; 2
     a96:	ed 91       	ld	r30, X+
     a98:	fc 91       	ld	r31, X
     a9a:	13 97       	sbiw	r26, 0x03	; 3
     a9c:	83 85       	ldd	r24, Z+11	; 0x0b
     a9e:	88 23       	and	r24, r24
     aa0:	09 f1       	breq	.+66     	; 0xae4 <follow_path+0x1c2>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
     aa2:	53 e0       	ldi	r21, 0x03	; 3
     aa4:	2b c0       	rjmp	.+86     	; 0xafc <follow_path+0x1da>
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
     aa6:	f9 01       	movw	r30, r18
     aa8:	93 85       	ldd	r25, Z+11	; 0x0b
     aaa:	91 11       	cpse	r25, r1
     aac:	27 c0       	rjmp	.+78     	; 0xafc <follow_path+0x1da>
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
     aae:	84 ff       	sbrs	r24, 4
     ab0:	1b c0       	rjmp	.+54     	; 0xae8 <follow_path+0x1c6>
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
     ab2:	d6 01       	movw	r26, r12
     ab4:	54 96       	adiw	r26, 0x14	; 20
     ab6:	8d 91       	ld	r24, X+
     ab8:	9c 91       	ld	r25, X
     aba:	55 97       	sbiw	r26, 0x15	; 21
     abc:	a0 e0       	ldi	r26, 0x00	; 0
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	dc 01       	movw	r26, r24
     ac2:	99 27       	eor	r25, r25
     ac4:	88 27       	eor	r24, r24
     ac6:	f6 01       	movw	r30, r12
     ac8:	42 8d       	ldd	r20, Z+26	; 0x1a
     aca:	53 8d       	ldd	r21, Z+27	; 0x1b
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	84 2b       	or	r24, r20
     ad2:	95 2b       	or	r25, r21
     ad4:	a6 2b       	or	r26, r22
     ad6:	b7 2b       	or	r27, r23
     ad8:	f7 01       	movw	r30, r14
     ada:	84 83       	std	Z+4, r24	; 0x04
     adc:	95 83       	std	Z+5, r25	; 0x05
     ade:	a6 83       	std	Z+6, r26	; 0x06
     ae0:	b7 83       	std	Z+7, r27	; 0x07
		}
     ae2:	65 cf       	rjmp	.-310    	; 0x9ae <follow_path+0x8c>
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
     ae4:	54 e0       	ldi	r21, 0x04	; 4
     ae6:	0a c0       	rjmp	.+20     	; 0xafc <follow_path+0x1da>
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
     ae8:	54 e0       	ldi	r21, 0x04	; 4
     aea:	08 c0       	rjmp	.+16     	; 0xafc <follow_path+0x1da>
	p = *path;
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
     aec:	38 30       	cpi	r19, 0x08	; 8
     aee:	09 f0       	breq	.+2      	; 0xaf2 <follow_path+0x1d0>
     af0:	87 cf       	rjmp	.-242    	; 0xa00 <follow_path+0xde>
			i = 8; ni = 11;
     af2:	92 2d       	mov	r25, r2
     af4:	33 2d       	mov	r19, r3
     af6:	69 cf       	rjmp	.-302    	; 0x9ca <follow_path+0xa8>
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
     af8:	53 30       	cpi	r21, 0x03	; 3
     afa:	59 f2       	breq	.-106    	; 0xa92 <follow_path+0x170>
			dj->sclust = LD_CLUST(dir);
		}
	}

	return res;
}
     afc:	85 2f       	mov	r24, r21
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	df 90       	pop	r13
     b0c:	cf 90       	pop	r12
     b0e:	bf 90       	pop	r11
     b10:	af 90       	pop	r10
     b12:	9f 90       	pop	r9
     b14:	8f 90       	pop	r8
     b16:	7f 90       	pop	r7
     b18:	6f 90       	pop	r6
     b1a:	5f 90       	pop	r5
     b1c:	4f 90       	pop	r4
     b1e:	3f 90       	pop	r3
     b20:	2f 90       	pop	r2
     b22:	08 95       	ret

00000b24 <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
     b24:	4f 92       	push	r4
     b26:	5f 92       	push	r5
     b28:	6f 92       	push	r6
     b2a:	7f 92       	push	r7
     b2c:	8f 92       	push	r8
     b2e:	9f 92       	push	r9
     b30:	af 92       	push	r10
     b32:	bf 92       	push	r11
     b34:	ef 92       	push	r14
     b36:	ff 92       	push	r15
     b38:	0f 93       	push	r16
     b3a:	1f 93       	push	r17
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	a8 97       	sbiw	r28, 0x28	; 40
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
     b50:	10 92 87 01 	sts	0x0187, r1
     b54:	10 92 86 01 	sts	0x0186, r1
	if (!fs) return FR_OK;				/* Unregister fs object */
     b58:	00 97       	sbiw	r24, 0x00	; 0
     b5a:	09 f4       	brne	.+2      	; 0xb5e <pf_mount+0x3a>
     b5c:	f5 c0       	rjmp	.+490    	; 0xd48 <pf_mount+0x224>
     b5e:	7c 01       	movw	r14, r24

	if (disk_initialize() & STA_NOINIT) {	/* Check if the drive is ready or not */
     b60:	0e 94 19 01 	call	0x232	; 0x232 <disk_initialize>
     b64:	80 ff       	sbrs	r24, 0
     b66:	0f c0       	rjmp	.+30     	; 0xb86 <pf_mount+0x62>
		printf("fr not ready: %d\n", FR_NOT_READY);
     b68:	1f 92       	push	r1
     b6a:	82 e0       	ldi	r24, 0x02	; 2
     b6c:	8f 93       	push	r24
     b6e:	82 e5       	ldi	r24, 0x52	; 82
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	9f 93       	push	r25
     b74:	8f 93       	push	r24
     b76:	0e 94 98 08 	call	0x1130	; 0x1130 <printf>
		return FR_NOT_READY;
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	07 c1       	rjmp	.+526    	; 0xd94 <pf_mount+0x270>
	}
	
	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
     b86:	40 e0       	ldi	r20, 0x00	; 0
     b88:	50 e0       	ldi	r21, 0x00	; 0
     b8a:	ba 01       	movw	r22, r20
     b8c:	ce 01       	movw	r24, r28
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	0e 94 b9 02 	call	0x572	; 0x572 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
     b94:	81 30       	cpi	r24, 0x01	; 1
     b96:	d9 f4       	brne	.+54     	; 0xbce <pf_mount+0xaa>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
     b98:	00 e1       	ldi	r16, 0x10	; 16
     b9a:	10 e0       	ldi	r17, 0x00	; 0
     b9c:	2e eb       	ldi	r18, 0xBE	; 190
     b9e:	31 e0       	ldi	r19, 0x01	; 1
     ba0:	40 e0       	ldi	r20, 0x00	; 0
     ba2:	50 e0       	ldi	r21, 0x00	; 0
     ba4:	ba 01       	movw	r22, r20
     ba6:	ce 01       	movw	r24, r28
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	0e 94 dd 01 	call	0x3ba	; 0x3ba <disk_readp>
     bae:	81 11       	cpse	r24, r1
     bb0:	13 c0       	rjmp	.+38     	; 0xbd8 <pf_mount+0xb4>
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
     bb2:	8d 81       	ldd	r24, Y+5	; 0x05
     bb4:	88 23       	and	r24, r24
     bb6:	09 f1       	breq	.+66     	; 0xbfa <pf_mount+0xd6>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
     bb8:	49 84       	ldd	r4, Y+9	; 0x09
     bba:	5a 84       	ldd	r5, Y+10	; 0x0a
     bbc:	6b 84       	ldd	r6, Y+11	; 0x0b
     bbe:	7c 84       	ldd	r7, Y+12	; 0x0c
				fmt = check_fs(buf, bsect);	/* Check the partition */
     bc0:	b3 01       	movw	r22, r6
     bc2:	a2 01       	movw	r20, r4
     bc4:	ce 01       	movw	r24, r28
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	0e 94 b9 02 	call	0x572	; 0x572 <check_fs>
     bcc:	03 c0       	rjmp	.+6      	; 0xbd4 <pf_mount+0xb0>
		printf("fr not ready: %d\n", FR_NOT_READY);
		return FR_NOT_READY;
	}
	
	/* Search FAT partition on the drive */
	bsect = 0;
     bce:	41 2c       	mov	r4, r1
     bd0:	51 2c       	mov	r5, r1
     bd2:	32 01       	movw	r6, r4
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) {
     bd4:	83 30       	cpi	r24, 0x03	; 3
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <pf_mount+0xd2>
		printf("disk err: %d\n", FR_DISK_ERR);
     bd8:	1f 92       	push	r1
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	8f 93       	push	r24
     bde:	84 e6       	ldi	r24, 0x64	; 100
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	9f 93       	push	r25
     be4:	8f 93       	push	r24
     be6:	0e 94 98 08 	call	0x1130	; 0x1130 <printf>
		return FR_DISK_ERR;
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	cf c0       	rjmp	.+414    	; 0xd94 <pf_mount+0x270>
	}
	
	if (fmt) {
     bf6:	88 23       	and	r24, r24
     bf8:	79 f0       	breq	.+30     	; 0xc18 <pf_mount+0xf4>
		printf("no file system: %d\n", FR_NO_FILESYSTEM);
     bfa:	1f 92       	push	r1
     bfc:	87 e0       	ldi	r24, 0x07	; 7
     bfe:	8f 93       	push	r24
     c00:	82 e7       	ldi	r24, 0x72	; 114
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	9f 93       	push	r25
     c06:	8f 93       	push	r24
     c08:	0e 94 98 08 	call	0x1130	; 0x1130 <printf>
		return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	87 e0       	ldi	r24, 0x07	; 7
     c16:	be c0       	rjmp	.+380    	; 0xd94 <pf_mount+0x270>
	}

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
     c18:	04 e2       	ldi	r16, 0x24	; 36
     c1a:	10 e0       	ldi	r17, 0x00	; 0
     c1c:	2d e0       	ldi	r18, 0x0D	; 13
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	b3 01       	movw	r22, r6
     c22:	a2 01       	movw	r20, r4
     c24:	ce 01       	movw	r24, r28
     c26:	01 96       	adiw	r24, 0x01	; 1
     c28:	0e 94 dd 01 	call	0x3ba	; 0x3ba <disk_readp>
     c2c:	81 11       	cpse	r24, r1
     c2e:	8e c0       	rjmp	.+284    	; 0xd4c <pf_mount+0x228>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
     c30:	2a 85       	ldd	r18, Y+10	; 0x0a
     c32:	3b 85       	ldd	r19, Y+11	; 0x0b
     c34:	40 e0       	ldi	r20, 0x00	; 0
     c36:	50 e0       	ldi	r21, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
     c38:	21 15       	cp	r18, r1
     c3a:	31 05       	cpc	r19, r1
     c3c:	41 05       	cpc	r20, r1
     c3e:	51 05       	cpc	r21, r1
     c40:	21 f4       	brne	.+8      	; 0xc4a <pf_mount+0x126>
     c42:	28 8d       	ldd	r18, Y+24	; 0x18
     c44:	39 8d       	ldd	r19, Y+25	; 0x19
     c46:	4a 8d       	ldd	r20, Y+26	; 0x1a
     c48:	5b 8d       	ldd	r21, Y+27	; 0x1b

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
     c4a:	ac 81       	ldd	r26, Y+4	; 0x04
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__muluhisi3>
     c52:	6d a3       	std	Y+37, r22	; 0x25
     c54:	7e a3       	std	Y+38, r23	; 0x26
     c56:	8f a3       	std	Y+39, r24	; 0x27
     c58:	98 a7       	std	Y+40, r25	; 0x28
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
     c5a:	0a 81       	ldd	r16, Y+2	; 0x02
     c5c:	1b 81       	ldd	r17, Y+3	; 0x03
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	40 0e       	add	r4, r16
     c64:	51 1e       	adc	r5, r17
     c66:	62 1e       	adc	r6, r18
     c68:	73 1e       	adc	r7, r19
     c6a:	d7 01       	movw	r26, r14
     c6c:	1a 96       	adiw	r26, 0x0a	; 10
     c6e:	4d 92       	st	X+, r4
     c70:	5d 92       	st	X+, r5
     c72:	6d 92       	st	X+, r6
     c74:	7c 92       	st	X, r7
     c76:	1d 97       	sbiw	r26, 0x0d	; 13
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
     c78:	49 81       	ldd	r20, Y+1	; 0x01
     c7a:	12 96       	adiw	r26, 0x02	; 2
     c7c:	4c 93       	st	X, r20
     c7e:	12 97       	sbiw	r26, 0x02	; 2
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
     c80:	8d 80       	ldd	r8, Y+5	; 0x05
     c82:	9e 80       	ldd	r9, Y+6	; 0x06
     c84:	15 96       	adiw	r26, 0x05	; 5
     c86:	9c 92       	st	X, r9
     c88:	8e 92       	st	-X, r8
     c8a:	14 97       	sbiw	r26, 0x04	; 4
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
     c8c:	8f 81       	ldd	r24, Y+7	; 0x07
     c8e:	98 85       	ldd	r25, Y+8	; 0x08
     c90:	a0 e0       	ldi	r26, 0x00	; 0
     c92:	b0 e0       	ldi	r27, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
     c94:	00 97       	sbiw	r24, 0x00	; 0
     c96:	a1 05       	cpc	r26, r1
     c98:	b1 05       	cpc	r27, r1
     c9a:	21 f4       	brne	.+8      	; 0xca4 <pf_mount+0x180>
     c9c:	8c 89       	ldd	r24, Y+20	; 0x14
     c9e:	9d 89       	ldd	r25, Y+21	; 0x15
     ca0:	ae 89       	ldd	r26, Y+22	; 0x16
     ca2:	bf 89       	ldd	r27, Y+23	; 0x17
	mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
     ca4:	96 94       	lsr	r9
     ca6:	87 94       	ror	r8
     ca8:	96 94       	lsr	r9
     caa:	87 94       	ror	r8
     cac:	96 94       	lsr	r9
     cae:	87 94       	ror	r8
     cb0:	96 94       	lsr	r9
     cb2:	87 94       	ror	r8
     cb4:	a1 2c       	mov	r10, r1
     cb6:	b1 2c       	mov	r11, r1
     cb8:	80 1b       	sub	r24, r16
     cba:	91 0b       	sbc	r25, r17
     cbc:	a2 0b       	sbc	r26, r18
     cbe:	b3 0b       	sbc	r27, r19
     cc0:	0d a1       	ldd	r16, Y+37	; 0x25
     cc2:	1e a1       	ldd	r17, Y+38	; 0x26
     cc4:	2f a1       	ldd	r18, Y+39	; 0x27
     cc6:	38 a5       	ldd	r19, Y+40	; 0x28
     cc8:	80 1b       	sub	r24, r16
     cca:	91 0b       	sbc	r25, r17
     ccc:	a2 0b       	sbc	r26, r18
     cce:	b3 0b       	sbc	r27, r19
     cd0:	bc 01       	movw	r22, r24
     cd2:	cd 01       	movw	r24, r26
     cd4:	68 19       	sub	r22, r8
     cd6:	79 09       	sbc	r23, r9
     cd8:	8a 09       	sbc	r24, r10
     cda:	9b 09       	sbc	r25, r11
		) / fs->csize + 2;
     cdc:	24 2f       	mov	r18, r20
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	40 e0       	ldi	r20, 0x00	; 0
     ce2:	50 e0       	ldi	r21, 0x00	; 0
     ce4:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__udivmodsi4>
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
	mclst = (tsect						/* Last cluster# + 1 */
     ce8:	ba 01       	movw	r22, r20
     cea:	a9 01       	movw	r20, r18
     cec:	4e 5f       	subi	r20, 0xFE	; 254
     cee:	5f 4f       	sbci	r21, 0xFF	; 255
     cf0:	6f 4f       	sbci	r22, 0xFF	; 255
     cf2:	7f 4f       	sbci	r23, 0xFF	; 255
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;
     cf4:	d7 01       	movw	r26, r14
     cf6:	16 96       	adiw	r26, 0x06	; 6
     cf8:	4d 93       	st	X+, r20
     cfa:	5d 93       	st	X+, r21
     cfc:	6d 93       	st	X+, r22
     cfe:	7c 93       	st	X, r23
     d00:	19 97       	sbiw	r26, 0x09	; 9

	fmt = FS_FAT16;							/* Determine the FAT sub type */
	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
     d02:	47 3f       	cpi	r20, 0xF7	; 247
     d04:	bf e0       	ldi	r27, 0x0F	; 15
     d06:	5b 07       	cpc	r21, r27
     d08:	61 05       	cpc	r22, r1
     d0a:	71 05       	cpc	r23, r1
     d0c:	80 f5       	brcc	.+96     	; 0xd6e <pf_mount+0x24a>
#if _FS_FAT12
		fmt = FS_FAT12;
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	2f c0       	rjmp	.+94     	; 0xd70 <pf_mount+0x24c>
     d12:	84 0c       	add	r8, r4
     d14:	95 1c       	adc	r9, r5
     d16:	a6 1c       	adc	r10, r6
     d18:	b7 1c       	adc	r11, r7
	fs->fs_type = fmt;		/* FAT sub-type */
	if (_FS_FAT32 && fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
     d1a:	0d a1       	ldd	r16, Y+37	; 0x25
     d1c:	1e a1       	ldd	r17, Y+38	; 0x26
     d1e:	2f a1       	ldd	r18, Y+39	; 0x27
     d20:	38 a5       	ldd	r19, Y+40	; 0x28
     d22:	80 0e       	add	r8, r16
     d24:	91 1e       	adc	r9, r17
     d26:	a2 1e       	adc	r10, r18
     d28:	b3 1e       	adc	r11, r19
     d2a:	d7 01       	movw	r26, r14
     d2c:	52 96       	adiw	r26, 0x12	; 18
     d2e:	8d 92       	st	X+, r8
     d30:	9d 92       	st	X+, r9
     d32:	ad 92       	st	X+, r10
     d34:	bc 92       	st	X, r11
     d36:	55 97       	sbiw	r26, 0x15	; 21

	fs->flag = 0;
     d38:	11 96       	adiw	r26, 0x01	; 1
     d3a:	1c 92       	st	X, r1
	FatFs = fs;
     d3c:	f0 92 87 01 	sts	0x0187, r15
     d40:	e0 92 86 01 	sts	0x0186, r14

	return FR_OK;
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	26 c0       	rjmp	.+76     	; 0xd94 <pf_mount+0x270>
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
	if (!fs) return FR_OK;				/* Unregister fs object */
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	24 c0       	rjmp	.+72     	; 0xd94 <pf_mount+0x270>
		printf("no file system: %d\n", FR_NO_FILESYSTEM);
		return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
	}

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	22 c0       	rjmp	.+68     	; 0xd94 <pf_mount+0x270>
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
     d50:	f7 01       	movw	r30, r14
     d52:	80 83       	st	Z, r24
	if (_FS_FAT32 && fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
     d54:	8d a1       	ldd	r24, Y+37	; 0x25
     d56:	9e a1       	ldd	r25, Y+38	; 0x26
     d58:	af a1       	ldd	r26, Y+39	; 0x27
     d5a:	b8 a5       	ldd	r27, Y+40	; 0x28
     d5c:	84 0d       	add	r24, r4
     d5e:	95 1d       	adc	r25, r5
     d60:	a6 1d       	adc	r26, r6
     d62:	b7 1d       	adc	r27, r7
     d64:	86 87       	std	Z+14, r24	; 0x0e
     d66:	97 87       	std	Z+15, r25	; 0x0f
     d68:	a0 8b       	std	Z+16, r26	; 0x10
     d6a:	b1 8b       	std	Z+17, r27	; 0x11
     d6c:	d2 cf       	rjmp	.-92     	; 0xd12 <pf_mount+0x1ee>
	mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;

	fmt = FS_FAT16;							/* Determine the FAT sub type */
     d6e:	82 e0       	ldi	r24, 0x02	; 2
#if _FS_FAT12
		fmt = FS_FAT12;
#else
		return FR_NO_FILESYSTEM;
#endif
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
     d70:	47 3f       	cpi	r20, 0xF7	; 247
     d72:	5f 4f       	sbci	r21, 0xFF	; 255
     d74:	61 05       	cpc	r22, r1
     d76:	71 05       	cpc	r23, r1
     d78:	58 f3       	brcs	.-42     	; 0xd50 <pf_mount+0x22c>
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
     d7a:	83 e0       	ldi	r24, 0x03	; 3
     d7c:	d7 01       	movw	r26, r14
     d7e:	8c 93       	st	X, r24
	if (_FS_FAT32 && fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
     d80:	88 a1       	ldd	r24, Y+32	; 0x20
     d82:	99 a1       	ldd	r25, Y+33	; 0x21
     d84:	aa a1       	ldd	r26, Y+34	; 0x22
     d86:	bb a1       	ldd	r27, Y+35	; 0x23
     d88:	f7 01       	movw	r30, r14
     d8a:	86 87       	std	Z+14, r24	; 0x0e
     d8c:	97 87       	std	Z+15, r25	; 0x0f
     d8e:	a0 8b       	std	Z+16, r26	; 0x10
     d90:	b1 8b       	std	Z+17, r27	; 0x11
     d92:	bf cf       	rjmp	.-130    	; 0xd12 <pf_mount+0x1ee>

	fs->flag = 0;
	FatFs = fs;

	return FR_OK;
}
     d94:	a8 96       	adiw	r28, 0x28	; 40
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	1f 91       	pop	r17
     da6:	0f 91       	pop	r16
     da8:	ff 90       	pop	r15
     daa:	ef 90       	pop	r14
     dac:	bf 90       	pop	r11
     dae:	af 90       	pop	r10
     db0:	9f 90       	pop	r9
     db2:	8f 90       	pop	r8
     db4:	7f 90       	pop	r7
     db6:	6f 90       	pop	r6
     db8:	5f 90       	pop	r5
     dba:	4f 90       	pop	r4
     dbc:	08 95       	ret

00000dbe <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	ec 97       	sbiw	r28, 0x3c	; 60
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	de bf       	out	0x3e, r29	; 62
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	cd bf       	out	0x3d, r28	; 61
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
     dd6:	00 91 86 01 	lds	r16, 0x0186
     dda:	10 91 87 01 	lds	r17, 0x0187


	if (!fs)						/* Check file system */
     dde:	01 15       	cp	r16, r1
     de0:	11 05       	cpc	r17, r1
     de2:	c9 f1       	breq	.+114    	; 0xe56 <pf_open+0x98>
     de4:	ac 01       	movw	r20, r24
		return FR_NOT_ENABLED;

	fs->flag = 0;
     de6:	f8 01       	movw	r30, r16
     de8:	11 82       	std	Z+1, r1	; 0x01
	dj.fn = sp;
     dea:	ce 01       	movw	r24, r28
     dec:	41 96       	adiw	r24, 0x11	; 17
     dee:	9c 83       	std	Y+4, r25	; 0x04
     df0:	8b 83       	std	Y+3, r24	; 0x03
	res = follow_path(&dj, dir, path);	/* Follow the file path */
     df2:	be 01       	movw	r22, r28
     df4:	63 5e       	subi	r22, 0xE3	; 227
     df6:	7f 4f       	sbci	r23, 0xFF	; 255
     df8:	40 97       	sbiw	r24, 0x10	; 16
     dfa:	0e 94 91 04 	call	0x922	; 0x922 <follow_path>
	if (res != FR_OK) return res;		/* Follow failed */
     dfe:	81 11       	cpse	r24, r1
     e00:	2f c0       	rjmp	.+94     	; 0xe60 <pf_open+0xa2>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
     e02:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e04:	88 23       	and	r24, r24
     e06:	49 f1       	breq	.+82     	; 0xe5a <pf_open+0x9c>
     e08:	88 a5       	ldd	r24, Y+40	; 0x28
     e0a:	84 fd       	sbrc	r24, 4
     e0c:	28 c0       	rjmp	.+80     	; 0xe5e <pf_open+0xa0>
		return FR_NO_FILE;

	fs->org_clust = LD_CLUST(dir);			/* File start cluster */
     e0e:	89 a9       	ldd	r24, Y+49	; 0x31
     e10:	9a a9       	ldd	r25, Y+50	; 0x32
     e12:	a0 e0       	ldi	r26, 0x00	; 0
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	dc 01       	movw	r26, r24
     e18:	99 27       	eor	r25, r25
     e1a:	88 27       	eor	r24, r24
     e1c:	4f a9       	ldd	r20, Y+55	; 0x37
     e1e:	58 ad       	ldd	r21, Y+56	; 0x38
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	84 2b       	or	r24, r20
     e26:	95 2b       	or	r25, r21
     e28:	a6 2b       	or	r26, r22
     e2a:	b7 2b       	or	r27, r23
     e2c:	f8 01       	movw	r30, r16
     e2e:	86 8f       	std	Z+30, r24	; 0x1e
     e30:	97 8f       	std	Z+31, r25	; 0x1f
     e32:	a0 a3       	std	Z+32, r26	; 0x20
     e34:	b1 a3       	std	Z+33, r27	; 0x21
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
     e36:	89 ad       	ldd	r24, Y+57	; 0x39
     e38:	9a ad       	ldd	r25, Y+58	; 0x3a
     e3a:	ab ad       	ldd	r26, Y+59	; 0x3b
     e3c:	bc ad       	ldd	r27, Y+60	; 0x3c
     e3e:	82 8f       	std	Z+26, r24	; 0x1a
     e40:	93 8f       	std	Z+27, r25	; 0x1b
     e42:	a4 8f       	std	Z+28, r26	; 0x1c
     e44:	b5 8f       	std	Z+29, r27	; 0x1d
	fs->fptr = 0;						/* File pointer */
     e46:	16 8a       	std	Z+22, r1	; 0x16
     e48:	17 8a       	std	Z+23, r1	; 0x17
     e4a:	10 8e       	std	Z+24, r1	; 0x18
     e4c:	11 8e       	std	Z+25, r1	; 0x19
	fs->flag = FA_OPENED;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	81 83       	std	Z+1, r24	; 0x01

	return FR_OK;
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	05 c0       	rjmp	.+10     	; 0xe60 <pf_open+0xa2>
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs)						/* Check file system */
		return FR_NOT_ENABLED;
     e56:	86 e0       	ldi	r24, 0x06	; 6
     e58:	03 c0       	rjmp	.+6      	; 0xe60 <pf_open+0xa2>
	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
		return FR_NO_FILE;
     e5a:	83 e0       	ldi	r24, 0x03	; 3
     e5c:	01 c0       	rjmp	.+2      	; 0xe60 <pf_open+0xa2>
     e5e:	83 e0       	ldi	r24, 0x03	; 3
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
	fs->fptr = 0;						/* File pointer */
	fs->flag = FA_OPENED;

	return FR_OK;
}
     e60:	ec 96       	adiw	r28, 0x3c	; 60
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	cd bf       	out	0x3d, r28	; 61
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	1f 91       	pop	r17
     e72:	0f 91       	pop	r16
     e74:	08 95       	ret

00000e76 <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
     e76:	2f 92       	push	r2
     e78:	3f 92       	push	r3
     e7a:	4f 92       	push	r4
     e7c:	5f 92       	push	r5
     e7e:	6f 92       	push	r6
     e80:	7f 92       	push	r7
     e82:	8f 92       	push	r8
     e84:	9f 92       	push	r9
     e86:	af 92       	push	r10
     e88:	bf 92       	push	r11
     e8a:	cf 92       	push	r12
     e8c:	df 92       	push	r13
     e8e:	ef 92       	push	r14
     e90:	ff 92       	push	r15
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	2c 01       	movw	r4, r24
     e9c:	6b 01       	movw	r12, r22
     e9e:	3a 01       	movw	r6, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;
     ea0:	e0 90 86 01 	lds	r14, 0x0186
     ea4:	f0 90 87 01 	lds	r15, 0x0187


	*br = 0;
     ea8:	fa 01       	movw	r30, r20
     eaa:	11 82       	std	Z+1, r1	; 0x01
     eac:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     eae:	e1 14       	cp	r14, r1
     eb0:	f1 04       	cpc	r15, r1
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <pf_read+0x40>
     eb4:	b5 c0       	rjmp	.+362    	; 0x1020 <pf_read+0x1aa>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
     eb6:	f7 01       	movw	r30, r14
     eb8:	81 81       	ldd	r24, Z+1	; 0x01
     eba:	80 ff       	sbrs	r24, 0
     ebc:	b3 c0       	rjmp	.+358    	; 0x1024 <pf_read+0x1ae>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
     ebe:	82 8d       	ldd	r24, Z+26	; 0x1a
     ec0:	93 8d       	ldd	r25, Z+27	; 0x1b
     ec2:	a4 8d       	ldd	r26, Z+28	; 0x1c
     ec4:	b5 8d       	ldd	r27, Z+29	; 0x1d
     ec6:	46 89       	ldd	r20, Z+22	; 0x16
     ec8:	57 89       	ldd	r21, Z+23	; 0x17
     eca:	60 8d       	ldd	r22, Z+24	; 0x18
     ecc:	71 8d       	ldd	r23, Z+25	; 0x19
     ece:	84 1b       	sub	r24, r20
     ed0:	95 0b       	sbc	r25, r21
     ed2:	a6 0b       	sbc	r26, r22
     ed4:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
     ed6:	a6 01       	movw	r20, r12
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	84 17       	cp	r24, r20
     ede:	95 07       	cpc	r25, r21
     ee0:	a6 07       	cpc	r26, r22
     ee2:	b7 07       	cpc	r27, r23
     ee4:	08 f4       	brcc	.+2      	; 0xee8 <pf_read+0x72>
     ee6:	6c 01       	movw	r12, r24

	while (btr)	{									/* Repeat until all data transferred */
     ee8:	c1 14       	cp	r12, r1
     eea:	d1 04       	cpc	r13, r1
     eec:	09 f4       	brne	.+2      	; 0xef0 <pf_read+0x7a>
     eee:	9c c0       	rjmp	.+312    	; 0x1028 <pf_read+0x1b2>
     ef0:	52 01       	movw	r10, r4
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
			fs->dsect = sect + cs;
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
     ef2:	81 2c       	mov	r8, r1
     ef4:	68 94       	set
     ef6:	99 24       	eor	r9, r9
     ef8:	91 f8       	bld	r9, 1
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
     efa:	31 2c       	mov	r3, r1
     efc:	21 2c       	mov	r2, r1

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
     efe:	f7 01       	movw	r30, r14
     f00:	86 89       	ldd	r24, Z+22	; 0x16
     f02:	97 89       	ldd	r25, Z+23	; 0x17
     f04:	a0 8d       	ldd	r26, Z+24	; 0x18
     f06:	b1 8d       	ldd	r27, Z+25	; 0x19
     f08:	ac 01       	movw	r20, r24
     f0a:	bd 01       	movw	r22, r26
     f0c:	51 70       	andi	r21, 0x01	; 1
     f0e:	66 27       	eor	r22, r22
     f10:	77 27       	eor	r23, r23
     f12:	45 2b       	or	r20, r21
     f14:	46 2b       	or	r20, r22
     f16:	47 2b       	or	r20, r23
     f18:	09 f0       	breq	.+2      	; 0xf1c <pf_read+0xa6>
     f1a:	42 c0       	rjmp	.+132    	; 0xfa0 <pf_read+0x12a>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
     f1c:	c2 81       	ldd	r28, Z+2	; 0x02
     f1e:	c1 50       	subi	r28, 0x01	; 1
     f20:	ac 01       	movw	r20, r24
     f22:	bd 01       	movw	r22, r26
     f24:	03 2e       	mov	r0, r19
     f26:	39 e0       	ldi	r19, 0x09	; 9
     f28:	76 95       	lsr	r23
     f2a:	67 95       	ror	r22
     f2c:	57 95       	ror	r21
     f2e:	47 95       	ror	r20
     f30:	3a 95       	dec	r19
     f32:	d1 f7       	brne	.-12     	; 0xf28 <pf_read+0xb2>
     f34:	30 2d       	mov	r19, r0
     f36:	c4 23       	and	r28, r20
			if (!cs) {								/* On the cluster boundary? */
     f38:	d9 f4       	brne	.+54     	; 0xf70 <pf_read+0xfa>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
					fs->org_clust : get_fat(fs->curr_clust);
     f3a:	89 2b       	or	r24, r25
     f3c:	8a 2b       	or	r24, r26
     f3e:	8b 2b       	or	r24, r27
     f40:	29 f4       	brne	.+10     	; 0xf4c <pf_read+0xd6>
     f42:	66 8d       	ldd	r22, Z+30	; 0x1e
     f44:	77 8d       	ldd	r23, Z+31	; 0x1f
     f46:	80 a1       	ldd	r24, Z+32	; 0x20
     f48:	91 a1       	ldd	r25, Z+33	; 0x21
     f4a:	07 c0       	rjmp	.+14     	; 0xf5a <pf_read+0xe4>
     f4c:	f7 01       	movw	r30, r14
     f4e:	62 a1       	ldd	r22, Z+34	; 0x22
     f50:	73 a1       	ldd	r23, Z+35	; 0x23
     f52:	84 a1       	ldd	r24, Z+36	; 0x24
     f54:	95 a1       	ldd	r25, Z+37	; 0x25
     f56:	0e 94 02 03 	call	0x604	; 0x604 <get_fat>
				if (clst <= 1) goto fr_abort;
     f5a:	62 30       	cpi	r22, 0x02	; 2
     f5c:	71 05       	cpc	r23, r1
     f5e:	81 05       	cpc	r24, r1
     f60:	91 05       	cpc	r25, r1
     f62:	08 f4       	brcc	.+2      	; 0xf66 <pf_read+0xf0>
     f64:	59 c0       	rjmp	.+178    	; 0x1018 <pf_read+0x1a2>
				fs->curr_clust = clst;				/* Update current cluster */
     f66:	f7 01       	movw	r30, r14
     f68:	62 a3       	std	Z+34, r22	; 0x22
     f6a:	73 a3       	std	Z+35, r23	; 0x23
     f6c:	84 a3       	std	Z+36, r24	; 0x24
     f6e:	95 a3       	std	Z+37, r25	; 0x25
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
     f70:	f7 01       	movw	r30, r14
     f72:	62 a1       	ldd	r22, Z+34	; 0x22
     f74:	73 a1       	ldd	r23, Z+35	; 0x23
     f76:	84 a1       	ldd	r24, Z+36	; 0x24
     f78:	95 a1       	ldd	r25, Z+37	; 0x25
     f7a:	0e 94 35 02 	call	0x46a	; 0x46a <clust2sect>
			if (!sect) goto fr_abort;
     f7e:	61 15       	cp	r22, r1
     f80:	71 05       	cpc	r23, r1
     f82:	81 05       	cpc	r24, r1
     f84:	91 05       	cpc	r25, r1
     f86:	09 f4       	brne	.+2      	; 0xf8a <pf_read+0x114>
     f88:	47 c0       	rjmp	.+142    	; 0x1018 <pf_read+0x1a2>
			fs->dsect = sect + cs;
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	8c 0f       	add	r24, r28
     f90:	91 1d       	adc	r25, r1
     f92:	a1 1d       	adc	r26, r1
     f94:	b1 1d       	adc	r27, r1
     f96:	f7 01       	movw	r30, r14
     f98:	86 a3       	std	Z+38, r24	; 0x26
     f9a:	97 a3       	std	Z+39, r25	; 0x27
     f9c:	a0 a7       	std	Z+40, r26	; 0x28
     f9e:	b1 a7       	std	Z+41, r27	; 0x29
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
     fa0:	f7 01       	movw	r30, r14
     fa2:	26 89       	ldd	r18, Z+22	; 0x16
     fa4:	37 89       	ldd	r19, Z+23	; 0x17
     fa6:	31 70       	andi	r19, 0x01	; 1
     fa8:	c4 01       	movw	r24, r8
     faa:	82 1b       	sub	r24, r18
     fac:	93 0b       	sbc	r25, r19
     fae:	e6 01       	movw	r28, r12
     fb0:	8c 15       	cp	r24, r12
     fb2:	9d 05       	cpc	r25, r13
     fb4:	08 f4       	brcc	.+2      	; 0xfb8 <pf_read+0x142>
     fb6:	ec 01       	movw	r28, r24
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
     fb8:	f7 01       	movw	r30, r14
     fba:	46 a1       	ldd	r20, Z+38	; 0x26
     fbc:	57 a1       	ldd	r21, Z+39	; 0x27
     fbe:	60 a5       	ldd	r22, Z+40	; 0x28
     fc0:	71 a5       	ldd	r23, Z+41	; 0x29
     fc2:	41 14       	cp	r4, r1
     fc4:	51 04       	cpc	r5, r1
     fc6:	19 f0       	breq	.+6      	; 0xfce <pf_read+0x158>
     fc8:	8a 2d       	mov	r24, r10
     fca:	9b 2d       	mov	r25, r11
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <pf_read+0x15c>
     fce:	83 2d       	mov	r24, r3
     fd0:	92 2d       	mov	r25, r2
     fd2:	8e 01       	movw	r16, r28
     fd4:	0e 94 dd 01 	call	0x3ba	; 0x3ba <disk_readp>
		if (dr) goto fr_abort;
     fd8:	81 11       	cpse	r24, r1
     fda:	1e c0       	rjmp	.+60     	; 0x1018 <pf_read+0x1a2>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
     fdc:	f7 01       	movw	r30, r14
     fde:	86 89       	ldd	r24, Z+22	; 0x16
     fe0:	97 89       	ldd	r25, Z+23	; 0x17
     fe2:	a0 8d       	ldd	r26, Z+24	; 0x18
     fe4:	b1 8d       	ldd	r27, Z+25	; 0x19
     fe6:	8c 0f       	add	r24, r28
     fe8:	9d 1f       	adc	r25, r29
     fea:	a1 1d       	adc	r26, r1
     fec:	b1 1d       	adc	r27, r1
     fee:	86 8b       	std	Z+22, r24	; 0x16
     ff0:	97 8b       	std	Z+23, r25	; 0x17
     ff2:	a0 8f       	std	Z+24, r26	; 0x18
     ff4:	b1 8f       	std	Z+25, r27	; 0x19
     ff6:	ac 0e       	add	r10, r28
     ff8:	bd 1e       	adc	r11, r29
		btr -= rcnt; *br += rcnt;
     ffa:	cc 1a       	sub	r12, r28
     ffc:	dd 0a       	sbc	r13, r29
     ffe:	f3 01       	movw	r30, r6
    1000:	80 81       	ld	r24, Z
    1002:	91 81       	ldd	r25, Z+1	; 0x01
    1004:	c8 0f       	add	r28, r24
    1006:	d9 1f       	adc	r29, r25
    1008:	d1 83       	std	Z+1, r29	; 0x01
    100a:	c0 83       	st	Z, r28
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
    100c:	c1 14       	cp	r12, r1
    100e:	d1 04       	cpc	r13, r1
    1010:	09 f0       	breq	.+2      	; 0x1014 <pf_read+0x19e>
    1012:	75 cf       	rjmp	.-278    	; 0xefe <pf_read+0x88>
		if (dr) goto fr_abort;
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
		btr -= rcnt; *br += rcnt;
	}

	return FR_OK;
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	09 c0       	rjmp	.+18     	; 0x102a <pf_read+0x1b4>

fr_abort:
	fs->flag = 0;
    1018:	f7 01       	movw	r30, r14
    101a:	11 82       	std	Z+1, r1	; 0x01
	return FR_DISK_ERR;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	05 c0       	rjmp	.+10     	; 0x102a <pf_read+0x1b4>
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;


	*br = 0;
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1020:	86 e0       	ldi	r24, 0x06	; 6
    1022:	03 c0       	rjmp	.+6      	; 0x102a <pf_read+0x1b4>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
		return FR_NOT_OPENED;
    1024:	85 e0       	ldi	r24, 0x05	; 5
    1026:	01 c0       	rjmp	.+2      	; 0x102a <pf_read+0x1b4>
		if (dr) goto fr_abort;
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
		btr -= rcnt; *br += rcnt;
	}

	return FR_OK;
    1028:	80 e0       	ldi	r24, 0x00	; 0

fr_abort:
	fs->flag = 0;
	return FR_DISK_ERR;
}
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	ff 90       	pop	r15
    1034:	ef 90       	pop	r14
    1036:	df 90       	pop	r13
    1038:	cf 90       	pop	r12
    103a:	bf 90       	pop	r11
    103c:	af 90       	pop	r10
    103e:	9f 90       	pop	r9
    1040:	8f 90       	pop	r8
    1042:	7f 90       	pop	r7
    1044:	6f 90       	pop	r6
    1046:	5f 90       	pop	r5
    1048:	4f 90       	pop	r4
    104a:	3f 90       	pop	r3
    104c:	2f 90       	pop	r2
    104e:	08 95       	ret

00001050 <uart_putchar>:
		stdout = &uart_output;	//redirect standard output to uart
		stdin  = &uart_input;  //redirect standard input to uart
}
	

void uart_putchar(char c, FILE *stream) {
    1050:	cf 93       	push	r28
    1052:	c8 2f       	mov	r28, r24
	if (c == '\n') {
    1054:	8a 30       	cpi	r24, 0x0A	; 10
    1056:	19 f4       	brne	.+6      	; 0x105e <uart_putchar+0xe>
		uart_putchar('\r', stream);
    1058:	8d e0       	ldi	r24, 0x0D	; 13
    105a:	0e 94 28 08 	call	0x1050	; 0x1050 <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
    105e:	e0 ec       	ldi	r30, 0xC0	; 192
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	90 81       	ld	r25, Z
    1064:	95 ff       	sbrs	r25, 5
    1066:	fd cf       	rjmp	.-6      	; 0x1062 <uart_putchar+0x12>
	UDR0 = c;
    1068:	c0 93 c6 00 	sts	0x00C6, r28
}
    106c:	cf 91       	pop	r28
    106e:	08 95       	ret

00001070 <uart_getchar>:

char uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0);
    1070:	e0 ec       	ldi	r30, 0xC0	; 192
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	88 23       	and	r24, r24
    1078:	ec f7       	brge	.-6      	; 0x1074 <uart_getchar+0x4>
	return UDR0;
    107a:	80 91 c6 00 	lds	r24, 0x00C6
    107e:	08 95       	ret

00001080 <uart_init>:
FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);


void uart_init(void) {
	
	UBRR0H = UBRRH_VALUE;
    1080:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
    1084:	87 e6       	ldi	r24, 0x67	; 103
    1086:	80 93 c4 00 	sts	0x00C4, r24
	
	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
    108a:	e0 ec       	ldi	r30, 0xC0	; 192
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	8d 7f       	andi	r24, 0xFD	; 253
    1092:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
    1094:	86 e0       	ldi	r24, 0x06	; 6
    1096:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
    109a:	88 e1       	ldi	r24, 0x18	; 24
    109c:	80 93 c1 00 	sts	0x00C1, r24
    10a0:	08 95       	ret

000010a2 <io_redirect>:
	
}

void io_redirect(void ){
		
		stdout = &uart_output;	//redirect standard output to uart
    10a2:	e3 eb       	ldi	r30, 0xB3	; 179
    10a4:	f1 e0       	ldi	r31, 0x01	; 1
    10a6:	8e e0       	ldi	r24, 0x0E	; 14
    10a8:	91 e0       	ldi	r25, 0x01	; 1
    10aa:	93 83       	std	Z+3, r25	; 0x03
    10ac:	82 83       	std	Z+2, r24	; 0x02
		stdin  = &uart_input;  //redirect standard input to uart
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	91 e0       	ldi	r25, 0x01	; 1
    10b2:	91 83       	std	Z+1, r25	; 0x01
    10b4:	80 83       	st	Z, r24
    10b6:	08 95       	ret

000010b8 <__udivmodsi4>:
    10b8:	a1 e2       	ldi	r26, 0x21	; 33
    10ba:	1a 2e       	mov	r1, r26
    10bc:	aa 1b       	sub	r26, r26
    10be:	bb 1b       	sub	r27, r27
    10c0:	fd 01       	movw	r30, r26
    10c2:	0d c0       	rjmp	.+26     	; 0x10de <__udivmodsi4_ep>

000010c4 <__udivmodsi4_loop>:
    10c4:	aa 1f       	adc	r26, r26
    10c6:	bb 1f       	adc	r27, r27
    10c8:	ee 1f       	adc	r30, r30
    10ca:	ff 1f       	adc	r31, r31
    10cc:	a2 17       	cp	r26, r18
    10ce:	b3 07       	cpc	r27, r19
    10d0:	e4 07       	cpc	r30, r20
    10d2:	f5 07       	cpc	r31, r21
    10d4:	20 f0       	brcs	.+8      	; 0x10de <__udivmodsi4_ep>
    10d6:	a2 1b       	sub	r26, r18
    10d8:	b3 0b       	sbc	r27, r19
    10da:	e4 0b       	sbc	r30, r20
    10dc:	f5 0b       	sbc	r31, r21

000010de <__udivmodsi4_ep>:
    10de:	66 1f       	adc	r22, r22
    10e0:	77 1f       	adc	r23, r23
    10e2:	88 1f       	adc	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	1a 94       	dec	r1
    10e8:	69 f7       	brne	.-38     	; 0x10c4 <__udivmodsi4_loop>
    10ea:	60 95       	com	r22
    10ec:	70 95       	com	r23
    10ee:	80 95       	com	r24
    10f0:	90 95       	com	r25
    10f2:	9b 01       	movw	r18, r22
    10f4:	ac 01       	movw	r20, r24
    10f6:	bd 01       	movw	r22, r26
    10f8:	cf 01       	movw	r24, r30
    10fa:	08 95       	ret

000010fc <__muluhisi3>:
    10fc:	0e 94 89 08 	call	0x1112	; 0x1112 <__umulhisi3>
    1100:	a5 9f       	mul	r26, r21
    1102:	90 0d       	add	r25, r0
    1104:	b4 9f       	mul	r27, r20
    1106:	90 0d       	add	r25, r0
    1108:	a4 9f       	mul	r26, r20
    110a:	80 0d       	add	r24, r0
    110c:	91 1d       	adc	r25, r1
    110e:	11 24       	eor	r1, r1
    1110:	08 95       	ret

00001112 <__umulhisi3>:
    1112:	a2 9f       	mul	r26, r18
    1114:	b0 01       	movw	r22, r0
    1116:	b3 9f       	mul	r27, r19
    1118:	c0 01       	movw	r24, r0
    111a:	a3 9f       	mul	r26, r19
    111c:	70 0d       	add	r23, r0
    111e:	81 1d       	adc	r24, r1
    1120:	11 24       	eor	r1, r1
    1122:	91 1d       	adc	r25, r1
    1124:	b2 9f       	mul	r27, r18
    1126:	70 0d       	add	r23, r0
    1128:	81 1d       	adc	r24, r1
    112a:	11 24       	eor	r1, r1
    112c:	91 1d       	adc	r25, r1
    112e:	08 95       	ret

00001130 <printf>:
    1130:	a0 e0       	ldi	r26, 0x00	; 0
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	ee e9       	ldi	r30, 0x9E	; 158
    1136:	f8 e0       	ldi	r31, 0x08	; 8
    1138:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <__prologue_saves__+0x20>
    113c:	ae 01       	movw	r20, r28
    113e:	4b 5f       	subi	r20, 0xFB	; 251
    1140:	5f 4f       	sbci	r21, 0xFF	; 255
    1142:	fa 01       	movw	r30, r20
    1144:	61 91       	ld	r22, Z+
    1146:	71 91       	ld	r23, Z+
    1148:	af 01       	movw	r20, r30
    114a:	80 91 b5 01 	lds	r24, 0x01B5
    114e:	90 91 b6 01 	lds	r25, 0x01B6
    1152:	0e 94 ae 08 	call	0x115c	; 0x115c <vfprintf>
    1156:	e2 e0       	ldi	r30, 0x02	; 2
    1158:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <__epilogue_restores__+0x20>

0000115c <vfprintf>:
    115c:	ac e0       	ldi	r26, 0x0C	; 12
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e4 eb       	ldi	r30, 0xB4	; 180
    1162:	f8 e0       	ldi	r31, 0x08	; 8
    1164:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__prologue_saves__>
    1168:	7c 01       	movw	r14, r24
    116a:	6b 01       	movw	r12, r22
    116c:	8a 01       	movw	r16, r20
    116e:	fc 01       	movw	r30, r24
    1170:	17 82       	std	Z+7, r1	; 0x07
    1172:	16 82       	std	Z+6, r1	; 0x06
    1174:	83 81       	ldd	r24, Z+3	; 0x03
    1176:	81 ff       	sbrs	r24, 1
    1178:	bd c1       	rjmp	.+890    	; 0x14f4 <vfprintf+0x398>
    117a:	ce 01       	movw	r24, r28
    117c:	01 96       	adiw	r24, 0x01	; 1
    117e:	4c 01       	movw	r8, r24
    1180:	f7 01       	movw	r30, r14
    1182:	93 81       	ldd	r25, Z+3	; 0x03
    1184:	f6 01       	movw	r30, r12
    1186:	93 fd       	sbrc	r25, 3
    1188:	85 91       	lpm	r24, Z+
    118a:	93 ff       	sbrs	r25, 3
    118c:	81 91       	ld	r24, Z+
    118e:	6f 01       	movw	r12, r30
    1190:	88 23       	and	r24, r24
    1192:	09 f4       	brne	.+2      	; 0x1196 <vfprintf+0x3a>
    1194:	ab c1       	rjmp	.+854    	; 0x14ec <vfprintf+0x390>
    1196:	85 32       	cpi	r24, 0x25	; 37
    1198:	39 f4       	brne	.+14     	; 0x11a8 <vfprintf+0x4c>
    119a:	93 fd       	sbrc	r25, 3
    119c:	85 91       	lpm	r24, Z+
    119e:	93 ff       	sbrs	r25, 3
    11a0:	81 91       	ld	r24, Z+
    11a2:	6f 01       	movw	r12, r30
    11a4:	85 32       	cpi	r24, 0x25	; 37
    11a6:	29 f4       	brne	.+10     	; 0x11b2 <vfprintf+0x56>
    11a8:	b7 01       	movw	r22, r14
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	0e 94 96 0a 	call	0x152c	; 0x152c <fputc>
    11b0:	e7 cf       	rjmp	.-50     	; 0x1180 <vfprintf+0x24>
    11b2:	51 2c       	mov	r5, r1
    11b4:	31 2c       	mov	r3, r1
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	20 32       	cpi	r18, 0x20	; 32
    11ba:	a0 f4       	brcc	.+40     	; 0x11e4 <vfprintf+0x88>
    11bc:	8b 32       	cpi	r24, 0x2B	; 43
    11be:	69 f0       	breq	.+26     	; 0x11da <vfprintf+0x7e>
    11c0:	30 f4       	brcc	.+12     	; 0x11ce <vfprintf+0x72>
    11c2:	80 32       	cpi	r24, 0x20	; 32
    11c4:	59 f0       	breq	.+22     	; 0x11dc <vfprintf+0x80>
    11c6:	83 32       	cpi	r24, 0x23	; 35
    11c8:	69 f4       	brne	.+26     	; 0x11e4 <vfprintf+0x88>
    11ca:	20 61       	ori	r18, 0x10	; 16
    11cc:	2c c0       	rjmp	.+88     	; 0x1226 <vfprintf+0xca>
    11ce:	8d 32       	cpi	r24, 0x2D	; 45
    11d0:	39 f0       	breq	.+14     	; 0x11e0 <vfprintf+0x84>
    11d2:	80 33       	cpi	r24, 0x30	; 48
    11d4:	39 f4       	brne	.+14     	; 0x11e4 <vfprintf+0x88>
    11d6:	21 60       	ori	r18, 0x01	; 1
    11d8:	26 c0       	rjmp	.+76     	; 0x1226 <vfprintf+0xca>
    11da:	22 60       	ori	r18, 0x02	; 2
    11dc:	24 60       	ori	r18, 0x04	; 4
    11de:	23 c0       	rjmp	.+70     	; 0x1226 <vfprintf+0xca>
    11e0:	28 60       	ori	r18, 0x08	; 8
    11e2:	21 c0       	rjmp	.+66     	; 0x1226 <vfprintf+0xca>
    11e4:	27 fd       	sbrc	r18, 7
    11e6:	27 c0       	rjmp	.+78     	; 0x1236 <vfprintf+0xda>
    11e8:	30 ed       	ldi	r19, 0xD0	; 208
    11ea:	38 0f       	add	r19, r24
    11ec:	3a 30       	cpi	r19, 0x0A	; 10
    11ee:	78 f4       	brcc	.+30     	; 0x120e <vfprintf+0xb2>
    11f0:	26 ff       	sbrs	r18, 6
    11f2:	06 c0       	rjmp	.+12     	; 0x1200 <vfprintf+0xa4>
    11f4:	fa e0       	ldi	r31, 0x0A	; 10
    11f6:	5f 9e       	mul	r5, r31
    11f8:	30 0d       	add	r19, r0
    11fa:	11 24       	eor	r1, r1
    11fc:	53 2e       	mov	r5, r19
    11fe:	13 c0       	rjmp	.+38     	; 0x1226 <vfprintf+0xca>
    1200:	8a e0       	ldi	r24, 0x0A	; 10
    1202:	38 9e       	mul	r3, r24
    1204:	30 0d       	add	r19, r0
    1206:	11 24       	eor	r1, r1
    1208:	33 2e       	mov	r3, r19
    120a:	20 62       	ori	r18, 0x20	; 32
    120c:	0c c0       	rjmp	.+24     	; 0x1226 <vfprintf+0xca>
    120e:	8e 32       	cpi	r24, 0x2E	; 46
    1210:	21 f4       	brne	.+8      	; 0x121a <vfprintf+0xbe>
    1212:	26 fd       	sbrc	r18, 6
    1214:	6b c1       	rjmp	.+726    	; 0x14ec <vfprintf+0x390>
    1216:	20 64       	ori	r18, 0x40	; 64
    1218:	06 c0       	rjmp	.+12     	; 0x1226 <vfprintf+0xca>
    121a:	8c 36       	cpi	r24, 0x6C	; 108
    121c:	11 f4       	brne	.+4      	; 0x1222 <vfprintf+0xc6>
    121e:	20 68       	ori	r18, 0x80	; 128
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <vfprintf+0xca>
    1222:	88 36       	cpi	r24, 0x68	; 104
    1224:	41 f4       	brne	.+16     	; 0x1236 <vfprintf+0xda>
    1226:	f6 01       	movw	r30, r12
    1228:	93 fd       	sbrc	r25, 3
    122a:	85 91       	lpm	r24, Z+
    122c:	93 ff       	sbrs	r25, 3
    122e:	81 91       	ld	r24, Z+
    1230:	6f 01       	movw	r12, r30
    1232:	81 11       	cpse	r24, r1
    1234:	c1 cf       	rjmp	.-126    	; 0x11b8 <vfprintf+0x5c>
    1236:	98 2f       	mov	r25, r24
    1238:	9f 7d       	andi	r25, 0xDF	; 223
    123a:	95 54       	subi	r25, 0x45	; 69
    123c:	93 30       	cpi	r25, 0x03	; 3
    123e:	28 f4       	brcc	.+10     	; 0x124a <vfprintf+0xee>
    1240:	0c 5f       	subi	r16, 0xFC	; 252
    1242:	1f 4f       	sbci	r17, 0xFF	; 255
    1244:	ff e3       	ldi	r31, 0x3F	; 63
    1246:	f9 83       	std	Y+1, r31	; 0x01
    1248:	0d c0       	rjmp	.+26     	; 0x1264 <vfprintf+0x108>
    124a:	83 36       	cpi	r24, 0x63	; 99
    124c:	31 f0       	breq	.+12     	; 0x125a <vfprintf+0xfe>
    124e:	83 37       	cpi	r24, 0x73	; 115
    1250:	71 f0       	breq	.+28     	; 0x126e <vfprintf+0x112>
    1252:	83 35       	cpi	r24, 0x53	; 83
    1254:	09 f0       	breq	.+2      	; 0x1258 <vfprintf+0xfc>
    1256:	5b c0       	rjmp	.+182    	; 0x130e <vfprintf+0x1b2>
    1258:	22 c0       	rjmp	.+68     	; 0x129e <vfprintf+0x142>
    125a:	f8 01       	movw	r30, r16
    125c:	80 81       	ld	r24, Z
    125e:	89 83       	std	Y+1, r24	; 0x01
    1260:	0e 5f       	subi	r16, 0xFE	; 254
    1262:	1f 4f       	sbci	r17, 0xFF	; 255
    1264:	44 24       	eor	r4, r4
    1266:	43 94       	inc	r4
    1268:	51 2c       	mov	r5, r1
    126a:	54 01       	movw	r10, r8
    126c:	15 c0       	rjmp	.+42     	; 0x1298 <vfprintf+0x13c>
    126e:	38 01       	movw	r6, r16
    1270:	f2 e0       	ldi	r31, 0x02	; 2
    1272:	6f 0e       	add	r6, r31
    1274:	71 1c       	adc	r7, r1
    1276:	f8 01       	movw	r30, r16
    1278:	a0 80       	ld	r10, Z
    127a:	b1 80       	ldd	r11, Z+1	; 0x01
    127c:	26 ff       	sbrs	r18, 6
    127e:	03 c0       	rjmp	.+6      	; 0x1286 <vfprintf+0x12a>
    1280:	65 2d       	mov	r22, r5
    1282:	70 e0       	ldi	r23, 0x00	; 0
    1284:	02 c0       	rjmp	.+4      	; 0x128a <vfprintf+0x12e>
    1286:	6f ef       	ldi	r22, 0xFF	; 255
    1288:	7f ef       	ldi	r23, 0xFF	; 255
    128a:	c5 01       	movw	r24, r10
    128c:	2c 87       	std	Y+12, r18	; 0x0c
    128e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <strnlen>
    1292:	2c 01       	movw	r4, r24
    1294:	83 01       	movw	r16, r6
    1296:	2c 85       	ldd	r18, Y+12	; 0x0c
    1298:	2f 77       	andi	r18, 0x7F	; 127
    129a:	22 2e       	mov	r2, r18
    129c:	17 c0       	rjmp	.+46     	; 0x12cc <vfprintf+0x170>
    129e:	38 01       	movw	r6, r16
    12a0:	f2 e0       	ldi	r31, 0x02	; 2
    12a2:	6f 0e       	add	r6, r31
    12a4:	71 1c       	adc	r7, r1
    12a6:	f8 01       	movw	r30, r16
    12a8:	a0 80       	ld	r10, Z
    12aa:	b1 80       	ldd	r11, Z+1	; 0x01
    12ac:	26 ff       	sbrs	r18, 6
    12ae:	03 c0       	rjmp	.+6      	; 0x12b6 <vfprintf+0x15a>
    12b0:	65 2d       	mov	r22, r5
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <vfprintf+0x15e>
    12b6:	6f ef       	ldi	r22, 0xFF	; 255
    12b8:	7f ef       	ldi	r23, 0xFF	; 255
    12ba:	c5 01       	movw	r24, r10
    12bc:	2c 87       	std	Y+12, r18	; 0x0c
    12be:	0e 94 80 0a 	call	0x1500	; 0x1500 <strnlen_P>
    12c2:	2c 01       	movw	r4, r24
    12c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    12c6:	20 68       	ori	r18, 0x80	; 128
    12c8:	22 2e       	mov	r2, r18
    12ca:	83 01       	movw	r16, r6
    12cc:	23 fc       	sbrc	r2, 3
    12ce:	1b c0       	rjmp	.+54     	; 0x1306 <vfprintf+0x1aa>
    12d0:	83 2d       	mov	r24, r3
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	48 16       	cp	r4, r24
    12d6:	59 06       	cpc	r5, r25
    12d8:	b0 f4       	brcc	.+44     	; 0x1306 <vfprintf+0x1aa>
    12da:	b7 01       	movw	r22, r14
    12dc:	80 e2       	ldi	r24, 0x20	; 32
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	0e 94 96 0a 	call	0x152c	; 0x152c <fputc>
    12e4:	3a 94       	dec	r3
    12e6:	f4 cf       	rjmp	.-24     	; 0x12d0 <vfprintf+0x174>
    12e8:	f5 01       	movw	r30, r10
    12ea:	27 fc       	sbrc	r2, 7
    12ec:	85 91       	lpm	r24, Z+
    12ee:	27 fe       	sbrs	r2, 7
    12f0:	81 91       	ld	r24, Z+
    12f2:	5f 01       	movw	r10, r30
    12f4:	b7 01       	movw	r22, r14
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	0e 94 96 0a 	call	0x152c	; 0x152c <fputc>
    12fc:	31 10       	cpse	r3, r1
    12fe:	3a 94       	dec	r3
    1300:	f1 e0       	ldi	r31, 0x01	; 1
    1302:	4f 1a       	sub	r4, r31
    1304:	51 08       	sbc	r5, r1
    1306:	41 14       	cp	r4, r1
    1308:	51 04       	cpc	r5, r1
    130a:	71 f7       	brne	.-36     	; 0x12e8 <vfprintf+0x18c>
    130c:	e5 c0       	rjmp	.+458    	; 0x14d8 <vfprintf+0x37c>
    130e:	84 36       	cpi	r24, 0x64	; 100
    1310:	11 f0       	breq	.+4      	; 0x1316 <vfprintf+0x1ba>
    1312:	89 36       	cpi	r24, 0x69	; 105
    1314:	39 f5       	brne	.+78     	; 0x1364 <vfprintf+0x208>
    1316:	f8 01       	movw	r30, r16
    1318:	27 ff       	sbrs	r18, 7
    131a:	07 c0       	rjmp	.+14     	; 0x132a <vfprintf+0x1ce>
    131c:	60 81       	ld	r22, Z
    131e:	71 81       	ldd	r23, Z+1	; 0x01
    1320:	82 81       	ldd	r24, Z+2	; 0x02
    1322:	93 81       	ldd	r25, Z+3	; 0x03
    1324:	0c 5f       	subi	r16, 0xFC	; 252
    1326:	1f 4f       	sbci	r17, 0xFF	; 255
    1328:	08 c0       	rjmp	.+16     	; 0x133a <vfprintf+0x1de>
    132a:	60 81       	ld	r22, Z
    132c:	71 81       	ldd	r23, Z+1	; 0x01
    132e:	07 2e       	mov	r0, r23
    1330:	00 0c       	add	r0, r0
    1332:	88 0b       	sbc	r24, r24
    1334:	99 0b       	sbc	r25, r25
    1336:	0e 5f       	subi	r16, 0xFE	; 254
    1338:	1f 4f       	sbci	r17, 0xFF	; 255
    133a:	2f 76       	andi	r18, 0x6F	; 111
    133c:	72 2e       	mov	r7, r18
    133e:	97 ff       	sbrs	r25, 7
    1340:	09 c0       	rjmp	.+18     	; 0x1354 <vfprintf+0x1f8>
    1342:	90 95       	com	r25
    1344:	80 95       	com	r24
    1346:	70 95       	com	r23
    1348:	61 95       	neg	r22
    134a:	7f 4f       	sbci	r23, 0xFF	; 255
    134c:	8f 4f       	sbci	r24, 0xFF	; 255
    134e:	9f 4f       	sbci	r25, 0xFF	; 255
    1350:	20 68       	ori	r18, 0x80	; 128
    1352:	72 2e       	mov	r7, r18
    1354:	2a e0       	ldi	r18, 0x0A	; 10
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	a4 01       	movw	r20, r8
    135a:	0e 94 ce 0a 	call	0x159c	; 0x159c <__ultoa_invert>
    135e:	a8 2e       	mov	r10, r24
    1360:	a8 18       	sub	r10, r8
    1362:	44 c0       	rjmp	.+136    	; 0x13ec <vfprintf+0x290>
    1364:	85 37       	cpi	r24, 0x75	; 117
    1366:	29 f4       	brne	.+10     	; 0x1372 <vfprintf+0x216>
    1368:	2f 7e       	andi	r18, 0xEF	; 239
    136a:	b2 2e       	mov	r11, r18
    136c:	2a e0       	ldi	r18, 0x0A	; 10
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	25 c0       	rjmp	.+74     	; 0x13bc <vfprintf+0x260>
    1372:	f2 2f       	mov	r31, r18
    1374:	f9 7f       	andi	r31, 0xF9	; 249
    1376:	bf 2e       	mov	r11, r31
    1378:	8f 36       	cpi	r24, 0x6F	; 111
    137a:	c1 f0       	breq	.+48     	; 0x13ac <vfprintf+0x250>
    137c:	18 f4       	brcc	.+6      	; 0x1384 <vfprintf+0x228>
    137e:	88 35       	cpi	r24, 0x58	; 88
    1380:	79 f0       	breq	.+30     	; 0x13a0 <vfprintf+0x244>
    1382:	b4 c0       	rjmp	.+360    	; 0x14ec <vfprintf+0x390>
    1384:	80 37       	cpi	r24, 0x70	; 112
    1386:	19 f0       	breq	.+6      	; 0x138e <vfprintf+0x232>
    1388:	88 37       	cpi	r24, 0x78	; 120
    138a:	21 f0       	breq	.+8      	; 0x1394 <vfprintf+0x238>
    138c:	af c0       	rjmp	.+350    	; 0x14ec <vfprintf+0x390>
    138e:	2f 2f       	mov	r18, r31
    1390:	20 61       	ori	r18, 0x10	; 16
    1392:	b2 2e       	mov	r11, r18
    1394:	b4 fe       	sbrs	r11, 4
    1396:	0d c0       	rjmp	.+26     	; 0x13b2 <vfprintf+0x256>
    1398:	8b 2d       	mov	r24, r11
    139a:	84 60       	ori	r24, 0x04	; 4
    139c:	b8 2e       	mov	r11, r24
    139e:	09 c0       	rjmp	.+18     	; 0x13b2 <vfprintf+0x256>
    13a0:	24 ff       	sbrs	r18, 4
    13a2:	0a c0       	rjmp	.+20     	; 0x13b8 <vfprintf+0x25c>
    13a4:	9f 2f       	mov	r25, r31
    13a6:	96 60       	ori	r25, 0x06	; 6
    13a8:	b9 2e       	mov	r11, r25
    13aa:	06 c0       	rjmp	.+12     	; 0x13b8 <vfprintf+0x25c>
    13ac:	28 e0       	ldi	r18, 0x08	; 8
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	05 c0       	rjmp	.+10     	; 0x13bc <vfprintf+0x260>
    13b2:	20 e1       	ldi	r18, 0x10	; 16
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <vfprintf+0x260>
    13b8:	20 e1       	ldi	r18, 0x10	; 16
    13ba:	32 e0       	ldi	r19, 0x02	; 2
    13bc:	f8 01       	movw	r30, r16
    13be:	b7 fe       	sbrs	r11, 7
    13c0:	07 c0       	rjmp	.+14     	; 0x13d0 <vfprintf+0x274>
    13c2:	60 81       	ld	r22, Z
    13c4:	71 81       	ldd	r23, Z+1	; 0x01
    13c6:	82 81       	ldd	r24, Z+2	; 0x02
    13c8:	93 81       	ldd	r25, Z+3	; 0x03
    13ca:	0c 5f       	subi	r16, 0xFC	; 252
    13cc:	1f 4f       	sbci	r17, 0xFF	; 255
    13ce:	06 c0       	rjmp	.+12     	; 0x13dc <vfprintf+0x280>
    13d0:	60 81       	ld	r22, Z
    13d2:	71 81       	ldd	r23, Z+1	; 0x01
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 5f       	subi	r16, 0xFE	; 254
    13da:	1f 4f       	sbci	r17, 0xFF	; 255
    13dc:	a4 01       	movw	r20, r8
    13de:	0e 94 ce 0a 	call	0x159c	; 0x159c <__ultoa_invert>
    13e2:	a8 2e       	mov	r10, r24
    13e4:	a8 18       	sub	r10, r8
    13e6:	fb 2d       	mov	r31, r11
    13e8:	ff 77       	andi	r31, 0x7F	; 127
    13ea:	7f 2e       	mov	r7, r31
    13ec:	76 fe       	sbrs	r7, 6
    13ee:	0b c0       	rjmp	.+22     	; 0x1406 <vfprintf+0x2aa>
    13f0:	37 2d       	mov	r19, r7
    13f2:	3e 7f       	andi	r19, 0xFE	; 254
    13f4:	a5 14       	cp	r10, r5
    13f6:	50 f4       	brcc	.+20     	; 0x140c <vfprintf+0x2b0>
    13f8:	74 fe       	sbrs	r7, 4
    13fa:	0a c0       	rjmp	.+20     	; 0x1410 <vfprintf+0x2b4>
    13fc:	72 fc       	sbrc	r7, 2
    13fe:	08 c0       	rjmp	.+16     	; 0x1410 <vfprintf+0x2b4>
    1400:	37 2d       	mov	r19, r7
    1402:	3e 7e       	andi	r19, 0xEE	; 238
    1404:	05 c0       	rjmp	.+10     	; 0x1410 <vfprintf+0x2b4>
    1406:	ba 2c       	mov	r11, r10
    1408:	37 2d       	mov	r19, r7
    140a:	03 c0       	rjmp	.+6      	; 0x1412 <vfprintf+0x2b6>
    140c:	ba 2c       	mov	r11, r10
    140e:	01 c0       	rjmp	.+2      	; 0x1412 <vfprintf+0x2b6>
    1410:	b5 2c       	mov	r11, r5
    1412:	34 ff       	sbrs	r19, 4
    1414:	0d c0       	rjmp	.+26     	; 0x1430 <vfprintf+0x2d4>
    1416:	fe 01       	movw	r30, r28
    1418:	ea 0d       	add	r30, r10
    141a:	f1 1d       	adc	r31, r1
    141c:	80 81       	ld	r24, Z
    141e:	80 33       	cpi	r24, 0x30	; 48
    1420:	11 f4       	brne	.+4      	; 0x1426 <vfprintf+0x2ca>
    1422:	39 7e       	andi	r19, 0xE9	; 233
    1424:	09 c0       	rjmp	.+18     	; 0x1438 <vfprintf+0x2dc>
    1426:	32 ff       	sbrs	r19, 2
    1428:	06 c0       	rjmp	.+12     	; 0x1436 <vfprintf+0x2da>
    142a:	b3 94       	inc	r11
    142c:	b3 94       	inc	r11
    142e:	04 c0       	rjmp	.+8      	; 0x1438 <vfprintf+0x2dc>
    1430:	83 2f       	mov	r24, r19
    1432:	86 78       	andi	r24, 0x86	; 134
    1434:	09 f0       	breq	.+2      	; 0x1438 <vfprintf+0x2dc>
    1436:	b3 94       	inc	r11
    1438:	33 fd       	sbrc	r19, 3
    143a:	13 c0       	rjmp	.+38     	; 0x1462 <vfprintf+0x306>
    143c:	30 ff       	sbrs	r19, 0
    143e:	06 c0       	rjmp	.+12     	; 0x144c <vfprintf+0x2f0>
    1440:	5a 2c       	mov	r5, r10
    1442:	b3 14       	cp	r11, r3
    1444:	18 f4       	brcc	.+6      	; 0x144c <vfprintf+0x2f0>
    1446:	53 0c       	add	r5, r3
    1448:	5b 18       	sub	r5, r11
    144a:	b3 2c       	mov	r11, r3
    144c:	b3 14       	cp	r11, r3
    144e:	68 f4       	brcc	.+26     	; 0x146a <vfprintf+0x30e>
    1450:	b7 01       	movw	r22, r14
    1452:	80 e2       	ldi	r24, 0x20	; 32
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	3c 87       	std	Y+12, r19	; 0x0c
    1458:	0e 94 96 0a 	call	0x152c	; 0x152c <fputc>
    145c:	b3 94       	inc	r11
    145e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1460:	f5 cf       	rjmp	.-22     	; 0x144c <vfprintf+0x2f0>
    1462:	b3 14       	cp	r11, r3
    1464:	10 f4       	brcc	.+4      	; 0x146a <vfprintf+0x30e>
    1466:	3b 18       	sub	r3, r11
    1468:	01 c0       	rjmp	.+2      	; 0x146c <vfprintf+0x310>
    146a:	31 2c       	mov	r3, r1
    146c:	34 ff       	sbrs	r19, 4
    146e:	12 c0       	rjmp	.+36     	; 0x1494 <vfprintf+0x338>
    1470:	b7 01       	movw	r22, r14
    1472:	80 e3       	ldi	r24, 0x30	; 48
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	3c 87       	std	Y+12, r19	; 0x0c
    1478:	0e 94 96 0a 	call	0x152c	; 0x152c <fputc>
    147c:	3c 85       	ldd	r19, Y+12	; 0x0c
    147e:	32 ff       	sbrs	r19, 2
    1480:	17 c0       	rjmp	.+46     	; 0x14b0 <vfprintf+0x354>
    1482:	31 fd       	sbrc	r19, 1
    1484:	03 c0       	rjmp	.+6      	; 0x148c <vfprintf+0x330>
    1486:	88 e7       	ldi	r24, 0x78	; 120
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <vfprintf+0x334>
    148c:	88 e5       	ldi	r24, 0x58	; 88
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	b7 01       	movw	r22, r14
    1492:	0c c0       	rjmp	.+24     	; 0x14ac <vfprintf+0x350>
    1494:	83 2f       	mov	r24, r19
    1496:	86 78       	andi	r24, 0x86	; 134
    1498:	59 f0       	breq	.+22     	; 0x14b0 <vfprintf+0x354>
    149a:	31 ff       	sbrs	r19, 1
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <vfprintf+0x346>
    149e:	8b e2       	ldi	r24, 0x2B	; 43
    14a0:	01 c0       	rjmp	.+2      	; 0x14a4 <vfprintf+0x348>
    14a2:	80 e2       	ldi	r24, 0x20	; 32
    14a4:	37 fd       	sbrc	r19, 7
    14a6:	8d e2       	ldi	r24, 0x2D	; 45
    14a8:	b7 01       	movw	r22, r14
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	0e 94 96 0a 	call	0x152c	; 0x152c <fputc>
    14b0:	a5 14       	cp	r10, r5
    14b2:	38 f4       	brcc	.+14     	; 0x14c2 <vfprintf+0x366>
    14b4:	b7 01       	movw	r22, r14
    14b6:	80 e3       	ldi	r24, 0x30	; 48
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0e 94 96 0a 	call	0x152c	; 0x152c <fputc>
    14be:	5a 94       	dec	r5
    14c0:	f7 cf       	rjmp	.-18     	; 0x14b0 <vfprintf+0x354>
    14c2:	aa 94       	dec	r10
    14c4:	f4 01       	movw	r30, r8
    14c6:	ea 0d       	add	r30, r10
    14c8:	f1 1d       	adc	r31, r1
    14ca:	80 81       	ld	r24, Z
    14cc:	b7 01       	movw	r22, r14
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	0e 94 96 0a 	call	0x152c	; 0x152c <fputc>
    14d4:	a1 10       	cpse	r10, r1
    14d6:	f5 cf       	rjmp	.-22     	; 0x14c2 <vfprintf+0x366>
    14d8:	33 20       	and	r3, r3
    14da:	09 f4       	brne	.+2      	; 0x14de <vfprintf+0x382>
    14dc:	51 ce       	rjmp	.-862    	; 0x1180 <vfprintf+0x24>
    14de:	b7 01       	movw	r22, r14
    14e0:	80 e2       	ldi	r24, 0x20	; 32
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 96 0a 	call	0x152c	; 0x152c <fputc>
    14e8:	3a 94       	dec	r3
    14ea:	f6 cf       	rjmp	.-20     	; 0x14d8 <vfprintf+0x37c>
    14ec:	f7 01       	movw	r30, r14
    14ee:	86 81       	ldd	r24, Z+6	; 0x06
    14f0:	97 81       	ldd	r25, Z+7	; 0x07
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <vfprintf+0x39c>
    14f4:	8f ef       	ldi	r24, 0xFF	; 255
    14f6:	9f ef       	ldi	r25, 0xFF	; 255
    14f8:	2c 96       	adiw	r28, 0x0c	; 12
    14fa:	e2 e1       	ldi	r30, 0x12	; 18
    14fc:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <__epilogue_restores__>

00001500 <strnlen_P>:
    1500:	fc 01       	movw	r30, r24
    1502:	05 90       	lpm	r0, Z+
    1504:	61 50       	subi	r22, 0x01	; 1
    1506:	70 40       	sbci	r23, 0x00	; 0
    1508:	01 10       	cpse	r0, r1
    150a:	d8 f7       	brcc	.-10     	; 0x1502 <strnlen_P+0x2>
    150c:	80 95       	com	r24
    150e:	90 95       	com	r25
    1510:	8e 0f       	add	r24, r30
    1512:	9f 1f       	adc	r25, r31
    1514:	08 95       	ret

00001516 <strnlen>:
    1516:	fc 01       	movw	r30, r24
    1518:	61 50       	subi	r22, 0x01	; 1
    151a:	70 40       	sbci	r23, 0x00	; 0
    151c:	01 90       	ld	r0, Z+
    151e:	01 10       	cpse	r0, r1
    1520:	d8 f7       	brcc	.-10     	; 0x1518 <strnlen+0x2>
    1522:	80 95       	com	r24
    1524:	90 95       	com	r25
    1526:	8e 0f       	add	r24, r30
    1528:	9f 1f       	adc	r25, r31
    152a:	08 95       	ret

0000152c <fputc>:
    152c:	0f 93       	push	r16
    152e:	1f 93       	push	r17
    1530:	cf 93       	push	r28
    1532:	df 93       	push	r29
    1534:	fb 01       	movw	r30, r22
    1536:	23 81       	ldd	r18, Z+3	; 0x03
    1538:	21 fd       	sbrc	r18, 1
    153a:	03 c0       	rjmp	.+6      	; 0x1542 <fputc+0x16>
    153c:	8f ef       	ldi	r24, 0xFF	; 255
    153e:	9f ef       	ldi	r25, 0xFF	; 255
    1540:	28 c0       	rjmp	.+80     	; 0x1592 <fputc+0x66>
    1542:	22 ff       	sbrs	r18, 2
    1544:	16 c0       	rjmp	.+44     	; 0x1572 <fputc+0x46>
    1546:	46 81       	ldd	r20, Z+6	; 0x06
    1548:	57 81       	ldd	r21, Z+7	; 0x07
    154a:	24 81       	ldd	r18, Z+4	; 0x04
    154c:	35 81       	ldd	r19, Z+5	; 0x05
    154e:	42 17       	cp	r20, r18
    1550:	53 07       	cpc	r21, r19
    1552:	44 f4       	brge	.+16     	; 0x1564 <fputc+0x38>
    1554:	a0 81       	ld	r26, Z
    1556:	b1 81       	ldd	r27, Z+1	; 0x01
    1558:	9d 01       	movw	r18, r26
    155a:	2f 5f       	subi	r18, 0xFF	; 255
    155c:	3f 4f       	sbci	r19, 0xFF	; 255
    155e:	31 83       	std	Z+1, r19	; 0x01
    1560:	20 83       	st	Z, r18
    1562:	8c 93       	st	X, r24
    1564:	26 81       	ldd	r18, Z+6	; 0x06
    1566:	37 81       	ldd	r19, Z+7	; 0x07
    1568:	2f 5f       	subi	r18, 0xFF	; 255
    156a:	3f 4f       	sbci	r19, 0xFF	; 255
    156c:	37 83       	std	Z+7, r19	; 0x07
    156e:	26 83       	std	Z+6, r18	; 0x06
    1570:	10 c0       	rjmp	.+32     	; 0x1592 <fputc+0x66>
    1572:	eb 01       	movw	r28, r22
    1574:	09 2f       	mov	r16, r25
    1576:	18 2f       	mov	r17, r24
    1578:	00 84       	ldd	r0, Z+8	; 0x08
    157a:	f1 85       	ldd	r31, Z+9	; 0x09
    157c:	e0 2d       	mov	r30, r0
    157e:	09 95       	icall
    1580:	89 2b       	or	r24, r25
    1582:	e1 f6       	brne	.-72     	; 0x153c <fputc+0x10>
    1584:	8e 81       	ldd	r24, Y+6	; 0x06
    1586:	9f 81       	ldd	r25, Y+7	; 0x07
    1588:	01 96       	adiw	r24, 0x01	; 1
    158a:	9f 83       	std	Y+7, r25	; 0x07
    158c:	8e 83       	std	Y+6, r24	; 0x06
    158e:	81 2f       	mov	r24, r17
    1590:	90 2f       	mov	r25, r16
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	1f 91       	pop	r17
    1598:	0f 91       	pop	r16
    159a:	08 95       	ret

0000159c <__ultoa_invert>:
    159c:	fa 01       	movw	r30, r20
    159e:	aa 27       	eor	r26, r26
    15a0:	28 30       	cpi	r18, 0x08	; 8
    15a2:	51 f1       	breq	.+84     	; 0x15f8 <__ultoa_invert+0x5c>
    15a4:	20 31       	cpi	r18, 0x10	; 16
    15a6:	81 f1       	breq	.+96     	; 0x1608 <__ultoa_invert+0x6c>
    15a8:	e8 94       	clt
    15aa:	6f 93       	push	r22
    15ac:	6e 7f       	andi	r22, 0xFE	; 254
    15ae:	6e 5f       	subi	r22, 0xFE	; 254
    15b0:	7f 4f       	sbci	r23, 0xFF	; 255
    15b2:	8f 4f       	sbci	r24, 0xFF	; 255
    15b4:	9f 4f       	sbci	r25, 0xFF	; 255
    15b6:	af 4f       	sbci	r26, 0xFF	; 255
    15b8:	b1 e0       	ldi	r27, 0x01	; 1
    15ba:	3e d0       	rcall	.+124    	; 0x1638 <__ultoa_invert+0x9c>
    15bc:	b4 e0       	ldi	r27, 0x04	; 4
    15be:	3c d0       	rcall	.+120    	; 0x1638 <__ultoa_invert+0x9c>
    15c0:	67 0f       	add	r22, r23
    15c2:	78 1f       	adc	r23, r24
    15c4:	89 1f       	adc	r24, r25
    15c6:	9a 1f       	adc	r25, r26
    15c8:	a1 1d       	adc	r26, r1
    15ca:	68 0f       	add	r22, r24
    15cc:	79 1f       	adc	r23, r25
    15ce:	8a 1f       	adc	r24, r26
    15d0:	91 1d       	adc	r25, r1
    15d2:	a1 1d       	adc	r26, r1
    15d4:	6a 0f       	add	r22, r26
    15d6:	71 1d       	adc	r23, r1
    15d8:	81 1d       	adc	r24, r1
    15da:	91 1d       	adc	r25, r1
    15dc:	a1 1d       	adc	r26, r1
    15de:	20 d0       	rcall	.+64     	; 0x1620 <__ultoa_invert+0x84>
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <__ultoa_invert+0x48>
    15e2:	68 94       	set
    15e4:	3f 91       	pop	r19
    15e6:	2a e0       	ldi	r18, 0x0A	; 10
    15e8:	26 9f       	mul	r18, r22
    15ea:	11 24       	eor	r1, r1
    15ec:	30 19       	sub	r19, r0
    15ee:	30 5d       	subi	r19, 0xD0	; 208
    15f0:	31 93       	st	Z+, r19
    15f2:	de f6       	brtc	.-74     	; 0x15aa <__ultoa_invert+0xe>
    15f4:	cf 01       	movw	r24, r30
    15f6:	08 95       	ret
    15f8:	46 2f       	mov	r20, r22
    15fa:	47 70       	andi	r20, 0x07	; 7
    15fc:	40 5d       	subi	r20, 0xD0	; 208
    15fe:	41 93       	st	Z+, r20
    1600:	b3 e0       	ldi	r27, 0x03	; 3
    1602:	0f d0       	rcall	.+30     	; 0x1622 <__ultoa_invert+0x86>
    1604:	c9 f7       	brne	.-14     	; 0x15f8 <__ultoa_invert+0x5c>
    1606:	f6 cf       	rjmp	.-20     	; 0x15f4 <__ultoa_invert+0x58>
    1608:	46 2f       	mov	r20, r22
    160a:	4f 70       	andi	r20, 0x0F	; 15
    160c:	40 5d       	subi	r20, 0xD0	; 208
    160e:	4a 33       	cpi	r20, 0x3A	; 58
    1610:	18 f0       	brcs	.+6      	; 0x1618 <__ultoa_invert+0x7c>
    1612:	49 5d       	subi	r20, 0xD9	; 217
    1614:	31 fd       	sbrc	r19, 1
    1616:	40 52       	subi	r20, 0x20	; 32
    1618:	41 93       	st	Z+, r20
    161a:	02 d0       	rcall	.+4      	; 0x1620 <__ultoa_invert+0x84>
    161c:	a9 f7       	brne	.-22     	; 0x1608 <__ultoa_invert+0x6c>
    161e:	ea cf       	rjmp	.-44     	; 0x15f4 <__ultoa_invert+0x58>
    1620:	b4 e0       	ldi	r27, 0x04	; 4
    1622:	a6 95       	lsr	r26
    1624:	97 95       	ror	r25
    1626:	87 95       	ror	r24
    1628:	77 95       	ror	r23
    162a:	67 95       	ror	r22
    162c:	ba 95       	dec	r27
    162e:	c9 f7       	brne	.-14     	; 0x1622 <__ultoa_invert+0x86>
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	61 05       	cpc	r22, r1
    1634:	71 05       	cpc	r23, r1
    1636:	08 95       	ret
    1638:	9b 01       	movw	r18, r22
    163a:	ac 01       	movw	r20, r24
    163c:	0a 2e       	mov	r0, r26
    163e:	06 94       	lsr	r0
    1640:	57 95       	ror	r21
    1642:	47 95       	ror	r20
    1644:	37 95       	ror	r19
    1646:	27 95       	ror	r18
    1648:	ba 95       	dec	r27
    164a:	c9 f7       	brne	.-14     	; 0x163e <__ultoa_invert+0xa2>
    164c:	62 0f       	add	r22, r18
    164e:	73 1f       	adc	r23, r19
    1650:	84 1f       	adc	r24, r20
    1652:	95 1f       	adc	r25, r21
    1654:	a0 1d       	adc	r26, r0
    1656:	08 95       	ret

00001658 <__prologue_saves__>:
    1658:	2f 92       	push	r2
    165a:	3f 92       	push	r3
    165c:	4f 92       	push	r4
    165e:	5f 92       	push	r5
    1660:	6f 92       	push	r6
    1662:	7f 92       	push	r7
    1664:	8f 92       	push	r8
    1666:	9f 92       	push	r9
    1668:	af 92       	push	r10
    166a:	bf 92       	push	r11
    166c:	cf 92       	push	r12
    166e:	df 92       	push	r13
    1670:	ef 92       	push	r14
    1672:	ff 92       	push	r15
    1674:	0f 93       	push	r16
    1676:	1f 93       	push	r17
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	ca 1b       	sub	r28, r26
    1682:	db 0b       	sbc	r29, r27
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	09 94       	ijmp

00001690 <__epilogue_restores__>:
    1690:	2a 88       	ldd	r2, Y+18	; 0x12
    1692:	39 88       	ldd	r3, Y+17	; 0x11
    1694:	48 88       	ldd	r4, Y+16	; 0x10
    1696:	5f 84       	ldd	r5, Y+15	; 0x0f
    1698:	6e 84       	ldd	r6, Y+14	; 0x0e
    169a:	7d 84       	ldd	r7, Y+13	; 0x0d
    169c:	8c 84       	ldd	r8, Y+12	; 0x0c
    169e:	9b 84       	ldd	r9, Y+11	; 0x0b
    16a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    16a2:	b9 84       	ldd	r11, Y+9	; 0x09
    16a4:	c8 84       	ldd	r12, Y+8	; 0x08
    16a6:	df 80       	ldd	r13, Y+7	; 0x07
    16a8:	ee 80       	ldd	r14, Y+6	; 0x06
    16aa:	fd 80       	ldd	r15, Y+5	; 0x05
    16ac:	0c 81       	ldd	r16, Y+4	; 0x04
    16ae:	1b 81       	ldd	r17, Y+3	; 0x03
    16b0:	aa 81       	ldd	r26, Y+2	; 0x02
    16b2:	b9 81       	ldd	r27, Y+1	; 0x01
    16b4:	ce 0f       	add	r28, r30
    16b6:	d1 1d       	adc	r29, r1
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	ed 01       	movw	r28, r26
    16c4:	08 95       	ret

000016c6 <_exit>:
    16c6:	f8 94       	cli

000016c8 <__stop_program>:
    16c8:	ff cf       	rjmp	.-2      	; 0x16c8 <__stop_program>
